{"version":3,"file":"mod.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/symbol-ctor/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/main.js","../node_modules/@stdlib/number-ctor/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js","../node_modules/@stdlib/constants-array-max-array-length/lib/index.js","../node_modules/@stdlib/assert-tools-array-like-function/lib/main.js","../node_modules/@stdlib/assert-is-array-like/lib/main.js","../node_modules/@stdlib/assert-is-nonnegative-integer-array/lib/index.js","../node_modules/@stdlib/assert-is-empty-collection/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/boolean-ctor/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global.js","../node_modules/@stdlib/utils-global/lib/global_this.js","../node_modules/@stdlib/utils-global/lib/main.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/assert-has-bigint-support/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js","../node_modules/@stdlib/ndarray-base-bytes-per-element/lib/main.js","../node_modules/@stdlib/ndarray-base-iteration-order/lib/main.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/ndarray-base-strides2order/lib/main.js","../node_modules/@stdlib/ndarray-base-ctor/lib/is_column_major_contiguous.js","../node_modules/@stdlib/ndarray-base-ctor/lib/is_row_major_contiguous.js","../node_modules/@stdlib/ndarray-base-minmax-view-buffer-index/lib/main.js","../node_modules/@stdlib/complex-float64-real/lib/main.js","../node_modules/@stdlib/complex-float64-imag/lib/main.js","../node_modules/@stdlib/assert-is-string/lib/primitive.js","../node_modules/@stdlib/ndarray-base-minmax-view-buffer-index/lib/index.js","../node_modules/@stdlib/ndarray-base-minmax-view-buffer-index/lib/assign.js","../node_modules/@stdlib/assert-is-string/lib/valueof.js","../node_modules/@stdlib/assert-is-string/lib/object.js","../node_modules/@stdlib/assert-is-string/lib/try2valueof.js","../node_modules/@stdlib/assert-is-string/lib/main.js","../node_modules/@stdlib/assert-is-string/lib/index.js","../node_modules/@stdlib/utils-escape-regexp-string/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-tools-array-function/lib/main.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/main.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/assert-is-regexp/lib/exec.js","../node_modules/@stdlib/assert-is-regexp/lib/main.js","../node_modules/@stdlib/assert-is-regexp/lib/try2exec.js","../node_modules/@stdlib/string-base-replace/lib/main.js","../node_modules/@stdlib/string-replace/lib/main.js","../node_modules/@stdlib/ndarray-base-ctor/lib/tostring.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/constants-uint8-max/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/main.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/constants-uint16-max/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/main.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/assert-is-arraybuffer/lib/main.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/main.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/assert-has-arraybuffer-support/lib/arraybuffer.js","../node_modules/@stdlib/array-buffer/lib/main.js","../node_modules/@stdlib/array-buffer/lib/index.js","../node_modules/@stdlib/assert-has-arraybuffer-support/lib/main.js","../node_modules/@stdlib/array-buffer/lib/polyfill.js","../node_modules/@stdlib/assert-is-dataview/lib/main.js","../node_modules/@stdlib/assert-has-dataview-support/lib/dataview.js","../node_modules/@stdlib/array-dataview/lib/main.js","../node_modules/@stdlib/array-dataview/lib/index.js","../node_modules/@stdlib/assert-has-dataview-support/lib/main.js","../node_modules/@stdlib/array-dataview/lib/polyfill.js","../node_modules/@stdlib/bigint-ctor/lib/main.js","../node_modules/@stdlib/ndarray-dtypes/lib/main.js","../node_modules/@stdlib/ndarray-dtypes/lib/enum.js","../node_modules/@stdlib/utils-keys/lib/builtin.js","../node_modules/@stdlib/utils-keys/lib/has_builtin.js","../node_modules/@stdlib/assert-is-arguments/lib/main.js","../node_modules/@stdlib/assert-is-arguments/lib/detect.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/assert-is-nan/lib/primitive.js","../node_modules/@stdlib/assert-is-nan/lib/object.js","../node_modules/@stdlib/assert-is-nan/lib/main.js","../node_modules/@stdlib/assert-is-nan/lib/index.js","../node_modules/@stdlib/assert-is-enumerable-property/lib/native.js","../node_modules/@stdlib/assert-is-enumerable-property/lib/has_string_enumerability_bug.js","../node_modules/@stdlib/assert-is-enumerable-property/lib/main.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/assert-is-arguments/lib/index.js","../node_modules/@stdlib/assert-is-arguments/lib/polyfill.js","../node_modules/@stdlib/utils-keys/lib/builtin_wrapper.js","../node_modules/@stdlib/utils-noop/lib/main.js","../node_modules/@stdlib/utils-keys/lib/has_enumerable_prototype_bug.js","../node_modules/@stdlib/utils-keys/lib/has_non_enumerable_properties_bug.js","../node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js","../node_modules/@stdlib/assert-is-collection/lib/main.js","../node_modules/@stdlib/utils-index-of/lib/main.js","../node_modules/@stdlib/utils-keys/lib/is_constructor_prototype.js","../node_modules/@stdlib/utils-keys/lib/window.js","../node_modules/@stdlib/utils-keys/lib/has_automation_equality_bug.js","../node_modules/@stdlib/utils-keys/lib/has_window.js","../node_modules/@stdlib/utils-keys/lib/main.js","../node_modules/@stdlib/utils-keys/lib/has_arguments_bug.js","../node_modules/@stdlib/utils-keys/lib/polyfill.js","../node_modules/@stdlib/utils-keys/lib/is_constructor_prototype_wrapper.js","../node_modules/@stdlib/ndarray-dtypes/lib/index.js","../node_modules/@stdlib/ndarray-dtypes/lib/assign.js","../node_modules/@stdlib/ndarray-orders/lib/main.js","../node_modules/@stdlib/blas-base-layouts/lib/enum.js","../node_modules/@stdlib/blas-base-layouts/lib/index.js","../node_modules/@stdlib/blas-base-layouts/lib/main.js","../node_modules/@stdlib/ndarray-orders/lib/enum.js","../node_modules/@stdlib/ndarray-orders/lib/index.js","../node_modules/@stdlib/ndarray-index-modes/lib/main.js","../node_modules/@stdlib/ndarray-index-modes/lib/enum.js","../node_modules/@stdlib/ndarray-index-modes/lib/index.js","../node_modules/@stdlib/ndarray-base-ctor/lib/meta2dataview.js","../node_modules/@stdlib/number-float64-base-to-int64-bytes/lib/assign.js","../node_modules/@stdlib/number-float64-base-to-int64-bytes/lib/index.js","../node_modules/@stdlib/number-float64-base-to-int64-bytes/lib/main.js","../node_modules/@stdlib/ndarray-base-ctor/lib/meta2dataview.polyfill.js","../node_modules/@stdlib/ndarray-base-ctor/lib/main.js","../node_modules/@stdlib/ndarray-base-ctor/lib/is_contiguous.js","../node_modules/@stdlib/assert-is-ndarray-like/lib/main.js","../node_modules/@stdlib/complex-float64-ctor/lib/main.js","../node_modules/@stdlib/ndarray-base-ctor/lib/copy_flags.js","../node_modules/@stdlib/ndarray-base-ctor/lib/get.js","../node_modules/@stdlib/ndarray-base-ctor/lib/iget.js","../node_modules/@stdlib/ndarray-base-ctor/lib/set.js","../node_modules/@stdlib/ndarray-base-ctor/lib/iset.js","../node_modules/@stdlib/ndarray-base-ctor/lib/tojson.js","../node_modules/@stdlib/complex-float64-ctor/lib/tostring.js","../node_modules/@stdlib/complex-float64-ctor/lib/tojson.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/main.js","../node_modules/@stdlib/assert-is-float32array/lib/main.js","../node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js","../node_modules/@stdlib/array-float32/lib/main.js","../node_modules/@stdlib/array-float32/lib/index.js","../node_modules/@stdlib/assert-has-float32array-support/lib/main.js","../node_modules/@stdlib/array-float32/lib/polyfill.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/polyfill.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/index.js","../node_modules/@stdlib/complex-float32-ctor/lib/main.js","../node_modules/@stdlib/assert-is-complex-like/lib/main.js","../node_modules/@stdlib/assert-is-object/lib/main.js","../node_modules/@stdlib/complex-float32-ctor/lib/tostring.js","../node_modules/@stdlib/complex-float32-ctor/lib/tojson.js","../node_modules/@stdlib/object-ctor/lib/main.js","../node_modules/@stdlib/utils-get-prototype-of/lib/detect.js","../node_modules/@stdlib/utils-get-prototype-of/lib/native.js","../node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js","../node_modules/@stdlib/utils-get-prototype-of/lib/proto.js","../node_modules/@stdlib/assert-is-plain-object/lib/main.js","../node_modules/@stdlib/utils-get-prototype-of/lib/main.js","../node_modules/@stdlib/array-base-assert-is-accessor-array/lib/main.js","../node_modules/@stdlib/array-base-accessor-getter/lib/main.js","../node_modules/@stdlib/array-base-getter/lib/main.js","../node_modules/@stdlib/array-dtype/lib/ctor2dtype.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/main.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/assert-is-int32array/lib/main.js","../node_modules/@stdlib/constants-int32-max/lib/index.js","../node_modules/@stdlib/assert-has-int32array-support/lib/int32array.js","../node_modules/@stdlib/array-int32/lib/main.js","../node_modules/@stdlib/array-int32/lib/index.js","../node_modules/@stdlib/assert-has-int32array-support/lib/main.js","../node_modules/@stdlib/constants-int32-min/lib/index.js","../node_modules/@stdlib/array-int32/lib/polyfill.js","../node_modules/@stdlib/assert-is-int16array/lib/main.js","../node_modules/@stdlib/constants-int16-max/lib/index.js","../node_modules/@stdlib/assert-has-int16array-support/lib/int16array.js","../node_modules/@stdlib/array-int16/lib/main.js","../node_modules/@stdlib/array-int16/lib/index.js","../node_modules/@stdlib/assert-has-int16array-support/lib/main.js","../node_modules/@stdlib/constants-int16-min/lib/index.js","../node_modules/@stdlib/array-int16/lib/polyfill.js","../node_modules/@stdlib/assert-is-uint8clampedarray/lib/main.js","../node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js","../node_modules/@stdlib/array-uint8c/lib/main.js","../node_modules/@stdlib/array-uint8c/lib/index.js","../node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/main.js","../node_modules/@stdlib/array-uint8c/lib/polyfill.js","../node_modules/@stdlib/assert-is-int8array/lib/main.js","../node_modules/@stdlib/constants-int8-max/lib/index.js","../node_modules/@stdlib/assert-has-int8array-support/lib/int8array.js","../node_modules/@stdlib/array-int8/lib/main.js","../node_modules/@stdlib/array-int8/lib/index.js","../node_modules/@stdlib/assert-has-int8array-support/lib/main.js","../node_modules/@stdlib/constants-int8-min/lib/index.js","../node_modules/@stdlib/array-int8/lib/polyfill.js","../node_modules/@stdlib/assert-is-array-like-object/lib/main.js","../node_modules/@stdlib/math-base-assert-is-even/lib/main.js","../node_modules/@stdlib/array-base-assert-is-complex64array/lib/main.js","../node_modules/@stdlib/array-base-assert-is-complex128array/lib/main.js","../node_modules/@stdlib/assert-has-iterator-symbol-support/lib/main.js","../node_modules/@stdlib/symbol-iterator/lib/main.js","../node_modules/@stdlib/complex-float32/lib/main.js","../node_modules/@stdlib/complex-realf/lib/main.js","../node_modules/@stdlib/complex-imagf/lib/main.js","../node_modules/@stdlib/strided-base-reinterpret-complex64/lib/main.js","../node_modules/@stdlib/strided-base-reinterpret-complex128/lib/main.js","../node_modules/@stdlib/array-complex64/lib/from_iterator.js","../node_modules/@stdlib/complex-float32/lib/tostring.js","../node_modules/@stdlib/complex-float32/lib/tojson.js","../node_modules/@stdlib/array-complex64/lib/main.js","../node_modules/@stdlib/array-complex64/lib/from_array.js","../node_modules/@stdlib/complex-float64/lib/main.js","../node_modules/@stdlib/complex-real/lib/main.js","../node_modules/@stdlib/complex-imag/lib/main.js","../node_modules/@stdlib/array-complex128/lib/from_iterator.js","../node_modules/@stdlib/array-complex64/lib/from_iterator_map.js","../node_modules/@stdlib/complex-float64/lib/tostring.js","../node_modules/@stdlib/complex-float64/lib/tojson.js","../node_modules/@stdlib/array-complex128/lib/main.js","../node_modules/@stdlib/array-complex128/lib/from_array.js","../node_modules/@stdlib/array-complex128/lib/from_iterator_map.js","../node_modules/@stdlib/array-dtype/lib/ctors.js","../node_modules/@stdlib/array-dtype/lib/dtypes.js","../node_modules/@stdlib/array-dtype/lib/main.js","../node_modules/@stdlib/array-base-assert-contains/lib/main.js","../node_modules/@stdlib/array-base-assert-contains/lib/factory.js","../node_modules/@stdlib/array-base-assert-contains/lib/index.js","../node_modules/@stdlib/ndarray-base-assert-is-data-type/lib/main.js","../node_modules/@stdlib/ndarray-output-dtype-policies/lib/main.js","../node_modules/@stdlib/ndarray-output-dtype-policies/lib/enum.js","../node_modules/@stdlib/ndarray-output-dtype-policies/lib/index.js","../node_modules/@stdlib/ndarray-output-dtype-policies/lib/assign.js","../node_modules/@stdlib/ndarray-base-assert-is-output-data-type-policy/lib/main.js","../node_modules/@stdlib/object-assign/lib/has_object_assign.js","../node_modules/@stdlib/object-assign/lib/builtin.js","../node_modules/@stdlib/utils-property-symbols/lib/has_builtin.js","../node_modules/@stdlib/utils-property-symbols/lib/builtin.js","../node_modules/@stdlib/utils-property-symbols/lib/index.js","../node_modules/@stdlib/object-assign/lib/index.js","../node_modules/@stdlib/utils-property-symbols/lib/polyfill.js","../node_modules/@stdlib/utils-enumerable-properties/lib/main.js","../node_modules/@stdlib/object-assign/lib/polyfill.js","../node_modules/@stdlib/ndarray-base-flag/lib/main.js","../node_modules/@stdlib/ndarray-base-flags/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-read-only/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-order/lib/main.js","../node_modules/@stdlib/array-base-filled-by/lib/main.js","../node_modules/@stdlib/array-base-setter/lib/main.js","../node_modules/@stdlib/array-base-accessor-setter/lib/main.js","../node_modules/@stdlib/array-base-arraylike2object/lib/main.js","../node_modules/@stdlib/array-base-every-by/lib/main.js","../node_modules/@stdlib/assert-is-undefined-or-null/lib/main.js","../node_modules/@stdlib/array-base-join/lib/main.js","../node_modules/@stdlib/strided-base-stride2offset/lib/main.js","../node_modules/@stdlib/strided-base-nullary/lib/nullary.ndarray.js","../node_modules/@stdlib/strided-base-nullary/lib/accessors.ndarray.js","../node_modules/@stdlib/strided-base-nullary/lib/main.js","../node_modules/@stdlib/strided-base-nullary/lib/accessors.js","../node_modules/@stdlib/strided-base-nullary/lib/nullary.js","../node_modules/@stdlib/ndarray-base-numel/lib/main.js","../node_modules/@stdlib/ndarray-base-dtype/lib/main.js","../node_modules/@stdlib/array-base-copy-indexed/lib/main.js","../node_modules/@stdlib/ndarray-base-shape/lib/main.js","../node_modules/@stdlib/ndarray-base-shape2strides/lib/main.js","../node_modules/@stdlib/strided-base-nullary/lib/index.js","../node_modules/@stdlib/strided-base-nullary/lib/ndarray.js","../node_modules/@stdlib/ndarray-base-shape2strides/lib/index.js","../node_modules/@stdlib/ndarray-base-shape2strides/lib/assign.js","../node_modules/@stdlib/ndarray-base-strides/lib/main.js","../node_modules/@stdlib/ndarray-base-offset/lib/main.js","../node_modules/@stdlib/ndarray-base-strides2offset/lib/main.js","../node_modules/@stdlib/ndarray-base-order/lib/main.js","../node_modules/@stdlib/ndarray-base-data-buffer/lib/main.js","../node_modules/@stdlib/ndarray-base-ndarraylike2object/lib/main.js","../node_modules/@stdlib/assert-has-property/lib/main.js","../node_modules/@stdlib/array-base-assert-any-is-entry-in/lib/main.js","../node_modules/@stdlib/array-base-resolve-getter/lib/main.js","../node_modules/@stdlib/array-base-zero-to/lib/main.js","../node_modules/@stdlib/array-base-zero-to/lib/assign.js","../node_modules/@stdlib/array-base-take-indexed/lib/main.js","../node_modules/@stdlib/array-base-filled/lib/main.js","../node_modules/@stdlib/array-base-zero-to/lib/index.js","../node_modules/@stdlib/ndarray-base-binary-loop-interchange-order/lib/main.js","../node_modules/@stdlib/ndarray-base-binary-loop-interchange-order/lib/sort2ins.js","../node_modules/@stdlib/ndarray-base-binary-tiling-block-size/lib/defaults.js","../node_modules/@stdlib/ndarray-base-binary-tiling-block-size/lib/main.js","../node_modules/@stdlib/ndarray-base-vind2bind/lib/main.js","../node_modules/@stdlib/ndarray-base-binary/lib/nd_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/nd.js","../node_modules/@stdlib/ndarray-base-binary/lib/main.js","../node_modules/@stdlib/ndarray-base-binary/lib/0d.js","../node_modules/@stdlib/ndarray-base-binary/lib/1d.js","../node_modules/@stdlib/ndarray-base-binary/lib/2d.js","../node_modules/@stdlib/ndarray-base-binary/lib/3d.js","../node_modules/@stdlib/ndarray-base-binary/lib/4d.js","../node_modules/@stdlib/ndarray-base-binary/lib/5d.js","../node_modules/@stdlib/ndarray-base-binary/lib/6d.js","../node_modules/@stdlib/ndarray-base-binary/lib/7d.js","../node_modules/@stdlib/ndarray-base-binary/lib/8d.js","../node_modules/@stdlib/ndarray-base-binary/lib/9d.js","../node_modules/@stdlib/ndarray-base-binary/lib/10d.js","../node_modules/@stdlib/ndarray-base-binary/lib/0d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/1d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/2d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/3d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/4d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/5d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/6d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/7d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/8d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/9d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/10d_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/2d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/3d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/4d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/5d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/6d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/7d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/8d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/9d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/10d_blocked.js","../node_modules/@stdlib/ndarray-base-binary/lib/2d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/3d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/4d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/5d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/6d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/7d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/8d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/9d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-binary/lib/10d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-broadcast-array/lib/main.js","../node_modules/@stdlib/ndarray-base-maybe-broadcast-array/lib/main.js","../node_modules/@stdlib/assert-has-node-buffer-support/lib/buffer.js","../node_modules/@stdlib/buffer-ctor/lib/index.js","../node_modules/@stdlib/buffer-ctor/lib/main.js","../node_modules/@stdlib/assert-has-node-buffer-support/lib/main.js","../node_modules/@stdlib/buffer-ctor/lib/polyfill.js","../node_modules/@stdlib/ndarray-base-buffer-ctors/lib/ctors.js","../node_modules/@stdlib/ndarray-base-buffer-ctors/lib/main.js","../node_modules/@stdlib/buffer-alloc-unsafe/lib/index.js","../node_modules/@stdlib/buffer-alloc-unsafe/lib/has_alloc_unsafe.js","../node_modules/@stdlib/buffer-alloc-unsafe/lib/main.js","../node_modules/@stdlib/buffer-alloc-unsafe/lib/polyfill.js","../node_modules/@stdlib/ndarray-base-broadcast-scalar/node_modules/@stdlib/ndarray-base-buffer/lib/main.js","../node_modules/@stdlib/ndarray-base-broadcast-scalar/node_modules/@stdlib/ndarray-base-buffer/lib/zeros.js","../node_modules/@stdlib/ndarray-base-broadcast-scalar/lib/main.js","../node_modules/@stdlib/array-base-zeros/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-floating-point-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-real-floating-point-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-complex-floating-point-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-integer-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-signed-integer-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-unsigned-integer-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-real-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-numeric-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-boolean-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-integer-index-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-boolean-index-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-mask-index-data-type/lib/main.js","../node_modules/@stdlib/ndarray-base-dtype-enum2str/node_modules/@stdlib/ndarray-dtypes/lib/main.js","../node_modules/@stdlib/ndarray-base-dtype-enum2str/node_modules/@stdlib/ndarray-dtypes/lib/enum.js","../node_modules/@stdlib/ndarray-base-dtype-enum2str/node_modules/@stdlib/ndarray-dtypes/lib/index.js","../node_modules/@stdlib/ndarray-base-dtype-enum2str/node_modules/@stdlib/ndarray-dtypes/lib/assign.js","../node_modules/@stdlib/ndarray-base-dtype-enum2str/lib/main.js","../node_modules/@stdlib/utils-object-inverse/lib/main.js","../node_modules/@stdlib/ndarray-base-dtype-str2enum/node_modules/@stdlib/ndarray-dtypes/lib/main.js","../node_modules/@stdlib/ndarray-base-dtype-str2enum/node_modules/@stdlib/ndarray-dtypes/lib/enum.js","../node_modules/@stdlib/ndarray-base-dtype-str2enum/node_modules/@stdlib/ndarray-dtypes/lib/index.js","../node_modules/@stdlib/ndarray-base-dtype-str2enum/node_modules/@stdlib/ndarray-dtypes/lib/assign.js","../node_modules/@stdlib/ndarray-base-dtype-str2enum/lib/main.js","../node_modules/@stdlib/ndarray-base-dtype-resolve-str/lib/main.js","../node_modules/@stdlib/ndarray-promotion-rules/lib/main.js","../node_modules/@stdlib/ndarray-base-promote-dtypes/lib/main.js","../node_modules/@stdlib/ndarray-defaults/lib/main.js","../node_modules/@stdlib/ndarray-defaults/lib/get.js","../node_modules/@stdlib/ndarray-defaults/lib/index.js","../node_modules/@stdlib/ndarray-base-output-dtype/lib/main.js","../node_modules/@stdlib/ndarray-base-binary-output-dtype/lib/main.js","../node_modules/@stdlib/ndarray-base-buffer/lib/main.js","../node_modules/@stdlib/ndarray-base-buffer/lib/zeros.js","../node_modules/@stdlib/ndarray-shape/lib/main.js","../node_modules/@stdlib/ndarray-dtype/lib/main.js","../node_modules/@stdlib/ndarray-ndims/lib/main.js","../node_modules/@stdlib/ndarray-order/lib/main.js","../node_modules/@stdlib/ndarray-strides/lib/main.js","../node_modules/@stdlib/assert-is-integer-array/lib/index.js","../node_modules/@stdlib/utils-inherit/lib/validate.js","../node_modules/@stdlib/utils-inherit/lib/native.js","../node_modules/@stdlib/utils-inherit/lib/polyfill.js","../node_modules/@stdlib/utils-inherit/lib/detect.js","../node_modules/@stdlib/ndarray-base-clamp-index/lib/main.js","../node_modules/@stdlib/ndarray-base-wrap-index/lib/main.js","../node_modules/@stdlib/ndarray-base-normalize-index/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-index-mode/lib/main.js","../node_modules/@stdlib/ndarray-base-ind/lib/factory.js","../node_modules/@stdlib/ndarray-base-ind/lib/main.js","../node_modules/@stdlib/ndarray-base-ind/lib/index.js","../node_modules/@stdlib/ndarray-ctor/lib/iget.js","../node_modules/@stdlib/ndarray-ctor/lib/iset.js","../node_modules/@stdlib/ndarray-ctor/lib/copy_array.js","../node_modules/@stdlib/ndarray-ctor/lib/main.js","../node_modules/@stdlib/ndarray-base-assert-is-buffer-length-compatible/lib/main.js","../node_modules/@stdlib/ndarray-ctor/lib/validate.js","../node_modules/@stdlib/utils-inherit/lib/main.js","../node_modules/@stdlib/ndarray-ctor/lib/get.js","../node_modules/@stdlib/ndarray-ctor/lib/set.js","../node_modules/@stdlib/random-tools-binary/lib/main.js","../node_modules/@stdlib/ndarray-base-unary-loop-interchange-order/lib/main.js","../node_modules/@stdlib/ndarray-base-unary-loop-interchange-order/lib/sort2ins.js","../node_modules/@stdlib/random-tools-binary/lib/validate.js","../node_modules/@stdlib/ndarray-base-unary-tiling-block-size/lib/defaults.js","../node_modules/@stdlib/ndarray-base-unary-tiling-block-size/lib/main.js","../node_modules/@stdlib/ndarray-base-unary/lib/nd_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/nd.js","../node_modules/@stdlib/ndarray-base-unary/lib/main.js","../node_modules/@stdlib/ndarray-base-unary/lib/0d.js","../node_modules/@stdlib/ndarray-base-unary/lib/1d.js","../node_modules/@stdlib/ndarray-base-unary/lib/2d.js","../node_modules/@stdlib/ndarray-base-unary/lib/3d.js","../node_modules/@stdlib/ndarray-base-unary/lib/4d.js","../node_modules/@stdlib/ndarray-base-unary/lib/5d.js","../node_modules/@stdlib/ndarray-base-unary/lib/6d.js","../node_modules/@stdlib/ndarray-base-unary/lib/7d.js","../node_modules/@stdlib/ndarray-base-unary/lib/8d.js","../node_modules/@stdlib/ndarray-base-unary/lib/9d.js","../node_modules/@stdlib/ndarray-base-unary/lib/10d.js","../node_modules/@stdlib/ndarray-base-unary/lib/0d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/1d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/2d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/3d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/4d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/5d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/6d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/7d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/8d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/9d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/10d_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/2d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/3d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/4d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/5d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/6d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/7d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/8d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/9d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/10d_blocked.js","../node_modules/@stdlib/ndarray-base-unary/lib/2d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/3d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/4d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/5d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/6d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/7d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/8d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/9d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary/lib/10d_blocked_accessors.js","../node_modules/@stdlib/ndarray-base-unary-output-dtype/lib/main.js","../node_modules/@stdlib/random-tools-unary/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-write-accessor/lib/main.js","../node_modules/@stdlib/random-tools-unary-factory/lib/main.js","../node_modules/@stdlib/assert-is-method-in/lib/main.js","../node_modules/@stdlib/utils-constant-function/lib/main.js","../node_modules/@stdlib/random-tools-unary/lib/validate.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e' );\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating whether a value is `NaN`.\n*\n* @private\n* @param {*} value - input value\n* @returns {boolean} boolean indicating whether a value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 4 );\n* // returns false\n*/\nfunction isnan( value ) { // explicitly define a function here instead of `@stdlib/math/base/assert/is-nan` in order to avoid circular dependencies\n\treturn ( value !== value );\n}\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\ttoken.arg = String( token.arg );\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ? String( token.arg ) : fromCharCode( num ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Sym;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasToStringTag() ) {\n\tmain = polyfill;\n} else {\n\tmain = builtin;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isInt from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a nonnegative integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( null );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* import isInteger from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* import { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* import { isObject as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a nonnegative integer.\n*\n* @module @stdlib/assert-is-nonnegative-integer\n*\n* @example\n* import isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* bool = isNonNegativeInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a generic array.\n*\n* @module @stdlib/constants-array-max-array-length\n*\n* @example\n* import MAX_ARRAY_LENGTH from '@stdlib/constants-array-max-array-length';\n* // returns 4294967295\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a generic array.\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar MAX_ARRAY_LENGTH = 4294967295>>>0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MAX_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLike from '@stdlib/assert-is-array-like';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array-like object passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array-like object function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arraylikefcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arraylikefcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array-like object passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array-like object for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArrayLike( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arraylikefcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-array-max-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is array-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is array-like\n*\n* @example\n* var bool = isArrayLike( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLike( {'length':10} );\n* // returns true\n*/\nfunction isArrayLike( value ) {\n\treturn (\n\t\tvalue !== void 0 &&\n\t\tvalue !== null &&\n\t\ttypeof value !== 'function' &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object containing only nonnegative integers.\n*\n* @module @stdlib/assert-is-nonnegative-integer-array\n*\n* @example\n* import isNonNegativeIntegerArray from '@stdlib/assert-is-nonnegative-integer-array';\n*\n* var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] );\n* // returns true\n*\n* bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] );\n* // returns false\n*\n* @example\n* import { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\n*\n* var bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );\n* // returns true\n*\n* bool = isNonNegativeIntegerArray( [ 3.0, new Number(1.0) ] );\n* // returns false\n*\n* @example\n* import { objects as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\n*\n* var bool = isNonNegativeIntegerArray( [ new Number(3.0), new Number(1.0) ] );\n* // returns true\n*\n* bool = isNonNegativeIntegerArray( [ 1.0, 0.0, 10.0 ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-like-function';\n\n\n// VARIABLES //\n\nvar isPrimitiveArray = arrayfun( isNonNegativeInteger.isPrimitive );\nvar isObjectArray = arrayfun( isNonNegativeInteger.isObject );\n\n\n// MAIN //\n\nvar isNonNegativeIntegerArray = arrayfun( isNonNegativeInteger );\nsetReadOnly( isNonNegativeIntegerArray, 'primitives', isPrimitiveArray );\nsetReadOnly( isNonNegativeIntegerArray, 'objects', isObjectArray );\n\n\n// EXPORTS //\n\nexport default isNonNegativeIntegerArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a value is an empty collection.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an empty collection\n*\n* @example\n* var bool = isEmptyCollection( [] );\n* // returns true\n*\n* @example\n* var bool = isEmptyCollection( { 'length': 0 } );\n* // returns true\n*\n* @example\n* var bool = isEmptyCollection( [ 1, 2, 3 ] );\n* // returns false\n*\n* @example\n* var bool = isEmptyCollection( {} );\n* // returns false\n*/\nfunction isEmptyCollection( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.length === 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isEmptyCollection;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean.\n*\n* @name Boolean\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {(boolean|Boolean)} boolean\n*\n* @example\n* var b = Boolean( null );\n* // returns false\n*\n* b = Boolean( [] );\n* // returns true\n*\n* b = Boolean( {} );\n* // returns true\n*\n* @example\n* var b = new Boolean( false );\n* // returns <Boolean>\n*/\nvar Bool = Boolean; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Boolean from '@stdlib/boolean-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import isBoolean from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isObject as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof global === 'object' ) ? global : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof globalThis === 'object' ) ? globalThis : null; // eslint-disable-line no-undef\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/string-format';\nimport getThis from './codegen.js';\nimport Self from './self.js';\nimport Win from './window.js';\nimport Global from './global.js';\nimport GlobalThis from './global_this.js';\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a boolean. Value: `%s`.', codegen ) );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: 2020 revision of ECMAScript standard\n\tif ( GlobalThis ) {\n\t\treturn GlobalThis;\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: Node.js\n\tif ( Global ) {\n\t\treturn Global;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func, stdlib/require-globals\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// VARIABLES //\n\nvar Global = getGlobal();\n\n\n// MAIN //\n\n/**\n* Tests for native `BigInt` support.\n*\n* @returns {boolean} boolean indicating if an environment has `BigInt` support\n*\n* @example\n* var bool = hasBigIntSupport();\n* // returns <boolean>\n*/\nfunction hasBigIntSupport() {\n\treturn (\n\t\ttypeof Global.BigInt === 'function' &&\n\t\ttypeof BigInt === 'function' && // eslint-disable-line stdlib/require-globals\n\t\ttypeof Global.BigInt( '1' ) === 'bigint' &&\n\t\ttypeof BigInt( '1' ) === 'bigint' // eslint-disable-line stdlib/require-globals, no-undef\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasBigIntSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only accessor.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Function} getter - accessor\n*\n* @example\n* function getter() {\n*     return 'bar';\n* }\n*\n* var obj = {};\n*\n* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnlyAccessor( obj, prop, getter ) { // eslint-disable-line id-length\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'get': getter\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnlyAccessor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport BYTES_PER_ELEMENT from './bytes_per_element.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of bytes per element provided an underlying array data type.\n*\n* @param {string} dtype - data type\n* @returns {(NonNegativeInteger|null)} number of bytes per element\n*\n* @example\n* var nbytes = bytesPerElement( 'float64' );\n* // returns 8\n*\n* nbytes = bytesPerElement( 'generic' );\n* // returns null\n*/\nfunction bytesPerElement( dtype ) {\n\treturn BYTES_PER_ELEMENT[ dtype ] || null;\n}\n\n\n// EXPORTS //\n\nexport default bytesPerElement;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns array iteration order.\n*\n* ## Notes\n*\n* -   Return value key:\n*\n*     -   `0`: unordered (i.e., strides of mixed sign; e.g., `[ 9, -3, 1 ]`)\n*     -   `1`: ordered left-to-right (i.e., all nonnegative strides)\n*     -   `-1`: ordered right-to-left (i.e., all negative strides)\n*\n* @param {IntegerArray} strides - stride array\n* @returns {integer} iteration order\n*\n* @example\n* var o = iterationOrder( [ 2, 1 ] );\n* // returns 1\n*\n* o = iterationOrder( [ -2, 1 ] );\n* // returns 0\n*\n* o = iterationOrder( [ -2, -1 ] );\n* // returns -1\n*/\nfunction iterationOrder( strides ) {\n\tvar cnt;\n\tvar i;\n\n\tcnt = 0;\n\tfor ( i = 0; i < strides.length; i++ ) {\n\t\tif ( strides[ i ] < 0 ) {\n\t\t\tcnt += 1;\n\t\t}\n\t}\n\tif ( cnt === 0 ) {\n\t\t// All nonnegative strides:\n\t\treturn 1|0; // asm-type annotation\n\t}\n\tif ( cnt === strides.length ) {\n\t\t// All negative strides:\n\t\treturn -1|0; // asm-type annotation\n\t}\n\t// Strides of mixed signs:\n\treturn 0|0; // asm-type annotation\n}\n\n\n// EXPORTS //\n\nexport default iterationOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Determines the order of a multidimensional array based on a provided stride array.\n*\n* @param {IntegerArray} strides - stride array\n* @returns {integer} order\n*\n* @example\n* import strides2order from '@stdlib/ndarray-base-strides2order';\n*\n* var order = strides2order( [ 2, 1 ] );\n* // returns 1\n*\n* order = strides2order( [ 1, 2 ] );\n* // returns 2\n*\n* order = strides2order( [ 1, 1, 1 ] );\n* // returns 3\n*\n* order = strides2order( [ 2, 3, 1 ] );\n* // returns 0\n*/\nfunction strides2order( strides ) {\n\tvar column;\n\tvar ndims;\n\tvar row;\n\tvar s1;\n\tvar s2;\n\tvar i;\n\n\tndims = strides.length;\n\tif ( ndims === 0 ) {\n\t\treturn 0|0; // 'none'\n\t}\n\tcolumn = true;\n\trow = true;\n\n\ts1 = abs( strides[ 0 ] );\n\tfor ( i = 1; i < ndims; i++ ) {\n\t\ts2 = abs( strides[ i ] );\n\t\tif ( column && s2 < s1 ) {\n\t\t\tcolumn = false;\n\t\t} else if ( row && s2 > s1 ) {\n\t\t\trow = false;\n\t\t}\n\t\tif ( row || column ) {\n\t\t\ts1 = s2;\n\t\t} else {\n\t\t\treturn 0|0; // 'none'\n\t\t}\n\t}\n\tif ( row && column ) {\n\t\treturn 3|0; // 'both'\n\t}\n\tif ( row ) {\n\t\treturn 1|0; // 'row-major'\n\t}\n\treturn 2|0; // 'column-major'\n}\n\n\n// EXPORTS //\n\nexport default strides2order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Determines if an array is column-major contiguous.\n*\n* @private\n* @param {integer} order - **inferred** array order\n* @param {boolean} contiguous - boolean indicating is an array is contiguous\n* @returns {boolean} boolean indicating if an array is column-major contiguous\n*/\nfunction isColumnMajorContiguous( order, contiguous ) {\n\treturn contiguous && ( order === 2 || order === 3 );\n}\n\n\n// EXPORTS //\n\nexport default isColumnMajorContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Determines if an array is row-major contiguous.\n*\n* @private\n* @param {integer} order - **inferred** array order\n* @param {boolean} contiguous - boolean indicating is an array is contiguous\n* @returns {boolean} boolean indicating if an array is row-major contiguous\n*/\nfunction isRowMajorContiguous( order, contiguous ) {\n\treturn contiguous && ( order === 1 || order === 3 );\n}\n\n\n// EXPORTS //\n\nexport default isRowMajorContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {Array} linear indices\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*/\nfunction minmaxViewBufferIndex( shape, strides, offset ) {\n\tvar ndims;\n\tvar min;\n\tvar max;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tmin = offset;\n\tmax = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\treturn [ offset, offset ];\n\t\t}\n\t\ts = strides[ i ];\n\t\tif ( s > 0 ) {\n\t\t\tmax += s * ( shape[i]-1 );\n\t\t} else if ( s < 0 ) {\n\t\t\tmin += s * ( shape[i]-1 ); // decrements min\n\t\t}\n\t}\n\treturn [ min, max ];\n}\n\n\n// EXPORTS //\n\nexport default minmaxViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default real;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' );\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view.\n*\n* @module @stdlib/ndarray-base-minmax-view-buffer-index\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 10, 109 ]\n*\n* @example\n* import minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\n*\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var idx = minmaxViewBufferIndex( shape, strides, offset );\n* // returns [ 0, 99 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the minimum and maximum linear indices in an underlying data buffer which are accessible to an array view and assigns results to a provided output array.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} linear indices\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 10, 1 ];\n* var offset = 10;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 10, 109 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -10, -1 ];\n* var offset = 99;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 0, 99 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ 1, 10 ];\n* var offset = 10;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 10, 109 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*\n* @example\n* var shape = [ 10, 10 ];\n* var strides = [ -1, -10 ];\n* var offset = 99;\n*\n* var out = [ 0, 0 ];\n* var idx = minmaxViewBufferIndex( shape, strides, offset, out );\n* // returns [ 0, 99 ]\n*\n* var bool = ( idx === out );\n* // returns true\n*/\nfunction minmaxViewBufferIndex( shape, strides, offset, out ) {\n\tvar ndims;\n\tvar min;\n\tvar max;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tmin = offset;\n\tmax = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( shape[ i ] === 0 ) {\n\t\t\tout[ 0 ] = offset;\n\t\t\tout[ 1 ] = offset;\n\t\t\treturn out;\n\t\t}\n\t\ts = strides[ i ];\n\t\tif ( s > 0 ) {\n\t\t\tmax += s * ( shape[i]-1 );\n\t\t} else if ( s < 0 ) {\n\t\t\tmin += s * ( shape[i]-1 ); // decrements min\n\t\t}\n\t}\n\tout[ 0 ] = min;\n\tout[ 1 ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxViewBufferIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar valueOf = String.prototype.valueOf; // non-generic\n\n\n// EXPORTS //\n\nexport default valueOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport test from './try2valueof.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a string object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string object\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns false\n*/\nfunction isString( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof String ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object String]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport valueOf from './valueof.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to extract a string value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a string can be extracted\n*/\nfunction test( value ) {\n\ttry {\n\t\tvalueOf.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a string.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a string\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*/\nfunction isString( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a string.\n*\n* @module @stdlib/assert-is-string\n*\n* @example\n* import isString from '@stdlib/assert-is-string';\n*\n* var bool = isString( 'beep' );\n* // returns true\n*\n* bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* bool = isString( 5 );\n* // returns false\n*\n* @example\n* import { isObject as isString } from '@stdlib/assert-is-string';\n*\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* bool = isString( 'beep' );\n* // returns false\n*\n* @example\n* import { isPrimitive as isString } from '@stdlib/assert-is-string';\n*\n* var bool = isString( 'beep' );\n* // returns true\n*\n* bool = isString( new String( 'beep' ) );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar RE_CHARS = /[-\\/\\\\^$*+?.()|[\\]{}]/g; // eslint-disable-line no-useless-escape\n\n\n// MAIN //\n\n/**\n* Escapes a regular expression string.\n*\n* @param {string} str - regular expression string\n* @throws {TypeError} first argument must be a string\n* @returns {string} escaped string\n*\n* @example\n* var str = rescape( '[A-Z]*' );\n* // returns '\\\\[A\\\\-Z\\\\]\\\\*'\n*/\nfunction rescape( str ) {\n\tvar len;\n\tvar s;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a regular expression string. Value: `%s`.', str ) );\n\t}\n\t// Check if the string starts with a forward slash...\n\tif ( str[ 0 ] === '/' ) {\n\t\t// Find the last forward slash...\n\t\tlen = str.length;\n\t\tfor ( i = len-1; i >= 0; i-- ) {\n\t\t\tif ( str[ i ] === '/' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t// If we searched the string to no avail or if the first letter is not `/`, assume that the string is not of the form `/[...]/[guimy]`:\n\tif ( i === void 0 || i <= 0 ) {\n\t\treturn str.replace( RE_CHARS, '\\\\$&' );\n\t}\n\t// We need to de-construct the string...\n\ts = str.substring( 1, i );\n\n\t// Only escape the characters between the `/`:\n\ts = s.replace( RE_CHARS, '\\\\$&' );\n\n\t// Reassemble:\n\tstr = str[ 0 ] + s + str.substring( i );\n\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default rescape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nexport default RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nexport default nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport main from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( main );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* import typeOf from '@stdlib/utils-type-of';\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nimport usePolyfill from './check.js';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : builtin;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE from './fixtures/re.js';\nimport nodeList from './fixtures/nodelist.js';\nimport typedarray from './fixtures/typedarray.js';\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport typeOf from '@stdlib/utils-type-of';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nexport default isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar exec = RegExp.prototype.exec; // non-generic\n\n\n// EXPORTS //\n\nexport default exec;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport test from './try2exec.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a regular expression.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a regular expression\n*\n* @example\n* var bool = isRegExp( /\\.+/ );\n* // returns true\n*\n* @example\n* var bool = isRegExp( {} );\n* // returns false\n*/\nfunction isRegExp( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof RegExp ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object RegExp]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isRegExp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exec from './exec.js';\n\n\n// MAIN //\n\n/**\n* Attempts to call a `RegExp` method.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if able to call a `RegExp` method\n*/\nfunction test( value ) {\n\ttry {\n\t\texec.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Replaces search occurrences with a replacement string.\n*\n* @param {string} str - input string\n* @param {RegExp} search - search expression\n* @param {(string|Function)} newval - replacement value or function\n* @returns {string} new string containing replacement(s)\n*\n* @example\n* var str = 'Hello World';\n* var out = replace( str, /world/i, 'Mr. President' );\n* // returns 'Hello Mr. President'\n*\n* @example\n* import capitalize from '@stdlib/string-base-capitalize';\n*\n* var str = 'Oranges and lemons say the bells of St. Clement\\'s';\n*\n* function replacer( match, p1 ) {\n*     return capitalize( p1 );\n* }\n*\n* var out = replace( str, /([^\\s]*)/gi, replacer );\n* // returns 'Oranges And Lemons Say The Bells Of St. Clement\\'s'\n*/\nfunction replace( str, search, newval ) {\n\treturn str.replace( search, newval );\n}\n\n\n// EXPORTS //\n\nexport default replace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport rescape from '@stdlib/utils-escape-regexp-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isRegExp from '@stdlib/assert-is-regexp';\nimport format from '@stdlib/string-format';\nimport base from '@stdlib/string-base-replace';\n\n\n// MAIN //\n\n/**\n* Replaces search occurrences with a replacement string.\n*\n* @param {string} str - input string\n* @param {(string|RegExp)} search - search expression\n* @param {(string|Function)} newval - replacement value or function\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument argument must be a string or regular expression\n* @throws {TypeError} third argument must be a string or function\n* @returns {string} new string containing replacement(s)\n*\n* @example\n* var str = 'beep';\n* var out = replace( str, 'e', 'o' );\n* // returns 'boop'\n*\n* @example\n* var str = 'Hello World';\n* var out = replace( str, /world/i, 'Mr. President' );\n* // returns 'Hello Mr. President'\n*\n* @example\n* import capitalize from '@stdlib/string-capitalize';\n*\n* var str = 'Oranges and lemons say the bells of St. Clement\\'s';\n*\n* function replacer( match, p1 ) {\n*     return capitalize( p1 );\n* }\n*\n* var out = replace( str, /([^\\s]*)/gi, replacer );\n* // returns 'Oranges And Lemons Say The Bells Of St. Clement\\'s'\n*/\nfunction replace( str, search, newval ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( isString( search ) ) {\n\t\tsearch = new RegExp( rescape( search ), 'g' );\n\t} else if ( !isRegExp( search ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a string or regular expression. Value: `%s`.', search ) );\n\t}\n\tif ( !isString( newval ) && !isFunction( newval ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a string or replacement function. Value: `%s`.', newval ) );\n\t}\n\treturn base( str, search, newval );\n}\n\n\n// EXPORTS //\n\nexport default replace;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-replace';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// VARIABLES //\n\nvar CTORS = {\n\t'int8': 'new Int8Array( [ {{data}} ] )',\n\t'uint8': 'new Uint8Array( [ {{data}} ] )',\n\t'uint8c': 'new Uint8ClampedArray( [ {{data}} ] )',\n\t'int16': 'new Int16Array( [ {{data}} ] )',\n\t'uint16': 'new Uint16Array( [ {{data}} ] )',\n\t'int32': 'new Int32Array( [ {{data}} ] )',\n\t'uint32': 'new Uint32Array( [ {{data}} ] )',\n\t'float32': 'new Float32Array( [ {{data}} ] )',\n\t'float64': 'new Float64Array( [ {{data}} ] )',\n\t'generic': '[ {{data}} ]',\n\t'binary': 'new Buffer( [ {{data}} ] )',\n\t'complex64': 'new Complex64Array( [ {{data}} ] )',\n\t'complex128': 'new Complex128Array( [ {{data}} ] )'\n};\n\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a string.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @private\n* @returns {string} string representation\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar buffer;\n\tvar ndims;\n\tvar ctor;\n\tvar str;\n\tvar dt;\n\tvar v;\n\tvar i;\n\n\tndims = this._shape.length;\n\tdt = this._dtype;\n\n\t// Function to invoke to create an ndarray:\n\tstr = 'ndarray( \\''+dt+'\\', ';\n\n\t// Data buffer parameter...\n\tbuffer = '';\n\tif ( this._length <= 100 ) {\n\t\tif ( dt === 'complex64' || dt === 'complex128' ) {\n\t\t\tfor ( i = 0; i < this._length; i++ ) {\n\t\t\t\tv = this.iget( i );\n\t\t\t\tbuffer += real( v ) + ', ' + imag( v );\n\t\t\t\tif ( i < this._length-1 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < this._length; i++ ) {\n\t\t\t\tbuffer += this.iget( i );\n\t\t\t\tif ( i < this._length-1 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// First three values...\n\t\tif ( dt === 'complex64' || dt === 'complex128' ) {\n\t\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\t\tv = this.iget( i );\n\t\t\t\tbuffer += real( v ) + ', ' + imag( v );\n\t\t\t\tif ( i < 2 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < 3; i++ ) {\n\t\t\t\tbuffer += this.iget( i );\n\t\t\t\tif ( i < 2 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbuffer += ', ..., ';\n\n\t\t// Last three values...\n\t\tif ( dt === 'complex64' || dt === 'complex128' ) {\n\t\t\tfor ( i = 2; i >= 0; i-- ) {\n\t\t\t\tv = this.iget( this._length-1-i );\n\t\t\t\tbuffer += real( v ) + ', ' + imag( v );\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 2; i >= 0; i-- ) {\n\t\t\t\tbuffer += this.iget( this._length-1-i );\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tbuffer += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tctor = CTORS[ this.dtype ];\n\tstr += replace( ctor, '{{data}}', buffer );\n\tstr += ', ';\n\n\t// Array shape...\n\tif ( ndims === 0 ) {\n\t\tstr += '[]';\n\t} else {\n\t\tstr += '[ ' + this._shape.join( ', ' ) + ' ]';\n\t}\n\tstr += ', ';\n\n\t// Stride array...\n\tstr += '[ ';\n\tif ( ndims === 0 ) {\n\t\tstr += '0';\n\t} else {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( this._strides[ i ] < 0 ) {\n\t\t\t\tstr += -this._strides[ i ];\n\t\t\t} else {\n\t\t\t\tstr += this._strides[ i ];\n\t\t\t}\n\t\t\tif ( i < ndims-1 ) {\n\t\t\t\tstr += ', ';\n\t\t\t}\n\t\t}\n\t}\n\tstr += ' ]';\n\tstr += ', ';\n\n\t// Buffer offset:\n\tstr += '0';\n\tstr += ', ';\n\n\t// Order:\n\tstr += '\\'' + this._order + '\\'';\n\n\t// Close the function call:\n\tstr += ' )';\n\treturn str;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants-uint8-max\n* @type {integer32}\n*\n* @example\n* import UINT8_MAX from '@stdlib/constants-uint8-max';\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* import ctor from '@stdlib/array-uint8';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport hasUint8ArraySupport from '@stdlib/assert-has-uint8array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport UINT8_MAX from '@stdlib/constants-uint8-max';\nimport GlobalUint8Array from './uint8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants-uint16-max\n* @type {integer32}\n*\n* @example\n* import UINT16_MAX from '@stdlib/constants-uint16-max';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* import ctor from '@stdlib/array-uint16';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nimport hasUint16ArraySupport from '@stdlib/assert-has-uint16array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint16Array from '@stdlib/assert-is-uint16array';\nimport UINT16_MAX from '@stdlib/constants-uint16-max';\nimport GlobalUint16Array from './uint16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './ctors.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint16Array from '@stdlib/array-uint16';\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasArrayBuffer = ( typeof ArrayBuffer === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an ArrayBuffer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an ArrayBuffer\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var bool = isArrayBuffer( new ArrayBuffer( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isArrayBuffer( [] );\n* // returns false\n*/\nfunction isArrayBuffer( value ) {\n\treturn (\n\t\t( hasArrayBuffer && value instanceof ArrayBuffer ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object ArrayBuffer]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* import ctor from '@stdlib/array-float64';\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nimport hasFloat64ArraySupport from '@stdlib/assert-has-float64array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64Array from '@stdlib/assert-is-float64array';\nimport GlobalFloat64Array from './float64array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof ArrayBuffer === 'function' ) ? ArrayBuffer : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof ArrayBuffer === 'function' ) ? ArrayBuffer : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns an object used to represent a generic, fixed-length raw binary data buffer.\n*\n* @module @stdlib/array-buffer\n*\n* @example\n* import ctor from '@stdlib/array-buffer';\n*\n* var buf = new ctor( 10 );\n* // returns <ArrayBuffer>\n*/\n\n// MODULES //\n\nimport hasArrayBufferSupport from '@stdlib/assert-has-arraybuffer-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasArrayBufferSupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport Float64Array from '@stdlib/array-float64';\nimport GlobalArrayBuffer from './arraybuffer.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `ArrayBuffer` support.\n*\n* @returns {boolean} boolean indicating if an environment has `ArrayBuffer` support\n*\n* @example\n* var bool = hasArrayBufferSupport();\n* // returns <boolean>\n*/\nfunction hasArrayBufferSupport() {\n\tvar bool;\n\tvar view;\n\tvar buf;\n\n\tif ( typeof GlobalArrayBuffer !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tbuf = new GlobalArrayBuffer( 16 );\n\t\tbool = ( isArrayBuffer( buf ) && typeof GlobalArrayBuffer.isView === 'function' );\n\t\tif ( bool ) {\n\t\t\tview = new Float64Array( buf );\n\t\t\tview[ 0 ] = -3.14;\n\t\t\tview[ 1 ] = NaN;\n\t\t\tbool = (\n\t\t\t\tbool &&\n\t\t\t\tGlobalArrayBuffer.isView( view ) &&\n\t\t\t\tbuf.byteLength === 16 &&\n\t\t\t\tview[ 0 ] === -3.14 &&\n\t\t\t\tview[ 1 ] !== view[ 1 ]\n\t\t\t);\n\t\t}\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasArrayBufferSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Constructor which returns an object used to represent a generic, fixed-length raw binary data buffer.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasDataView = ( typeof DataView === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a `DataView`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a DataView\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import DataView from '@stdlib/array-dataview';\n*\n* var bool = isDataView( new DataView( new ArrayBuffer( 10 ) ) );\n* // returns true\n*\n* @example\n* var bool = isDataView( [] );\n* // returns false\n*/\nfunction isDataView( value ) {\n\treturn (\n\t\t( hasDataView && value instanceof DataView ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object DataView]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isDataView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof DataView === 'function' ) ? DataView : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof DataView === 'function' ) ? DataView : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor which returns a data view representing a provided array buffer.\n*\n* @module @stdlib/array-dataview\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n* import DataView from '@stdlib/array-dataview';\n*\n* var buf = new ArrayBuffer( 10 );\n* // returns <ArrayBuffer>\n*\n* var dv = new DataView( buf );\n* // returns <DataView>\n*/\n\n// MODULES //\n\nimport hasDataViewSupport from '@stdlib/assert-has-dataview-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasDataViewSupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDataView from '@stdlib/assert-is-dataview';\nimport ArrayBuffer from '@stdlib/array-buffer';\nimport GlobalDataView from './dataview.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `DataView` support.\n*\n* @returns {boolean} boolean indicating if an environment has `DataView` support\n*\n* @example\n* var bool = hasDataViewSupport();\n* // returns <boolean>\n*/\nfunction hasDataViewSupport() {\n\tvar bool;\n\tvar view;\n\tvar buf;\n\n\tif ( typeof GlobalDataView !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tbuf = new ArrayBuffer( 24 );\n\t\tview = new GlobalDataView( buf, 8 );\n\t\tbool = ( isDataView( view ) && typeof view.getFloat64 === 'function' && typeof view.setFloat64 === 'function' );\n\t\tif ( bool ) {\n\t\t\tview.setFloat64( 0, -3.14 );\n\t\t\tview.setFloat64( 8, NaN );\n\t\t\tbool = (\n\t\t\t\tbool &&\n\t\t\t\tview.buffer === buf &&\n\t\t\t\tview.byteLength === 16 &&\n\t\t\t\tview.byteOffset === 8 &&\n\t\t\t\tview.getFloat64( 0 ) === -3.14 &&\n\t\t\t\tview.getFloat64( 8 ) !== view.getFloat64( 8 )\n\t\t\t);\n\t\t}\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasDataViewSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Constructor which returns a data view representing a provided array buffer.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* global BigInt */\n\n'use strict';\n\n// MAIN //\n\nvar BigInteger = ( typeof BigInt === 'function' ) ? BigInt : void 0; // eslint-disable-line stdlib/require-globals, node/no-unsupported-features/es-builtins\n\n\n// EXPORTS //\n\nexport default BigInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\nimport DTYPES from './dtypes.json';\n\n\n// VARIABLES //\n\nvar RE_SUFFIX = /_and_generic$/;\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types.\n*\n* @param {string} [kind] - data type kind\n* @returns {StringArray} list of ndarray data types\n*\n* @example\n* var list = dtypes();\n* // returns [...]\n*\n* @example\n* var list = dtypes( 'floating_point' );\n* // returns [...]\n*/\nfunction dtypes() {\n\tvar kind;\n\tvar out;\n\tvar FLG;\n\tif ( arguments.length === 0 ) {\n\t\treturn DTYPES.all.slice();\n\t}\n\tFLG = false;\n\tkind = arguments[ 0 ];\n\tif ( RE_SUFFIX.test( kind ) ) {\n\t\tkind = replace( kind, RE_SUFFIX, '' );\n\t\tif ( kind !== 'all' ) {\n\t\t\tFLG = true;\n\t\t}\n\t}\n\tout = DTYPES[ kind ];\n\tout = ( out ) ? out.slice() : [];\n\tif ( FLG && out.length > 0 ) {\n\t\tout.push( 'generic' );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/empty-line-before-comment */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data type strings to enumeration constants.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects. While certain dtypes, such as \"generic\" and \"binary\", have special behavior in JavaScript, they do not have a direct complement in C.\n*\n* @private\n* @returns {Object} object mapping supported dtypes to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the following should match the C `dtypes.h` enumeration!!!!\n\treturn {\n\t\t// Boolean data types:\n\t\t'bool': 0,\n\n\t\t// Integer data types:\n\t\t'int8': 1,\n\t\t'uint8': 2,\n\t\t'uint8c': 3,\n\t\t'int16': 4,\n\t\t'uint16': 5,\n\t\t'int32': 6,\n\t\t'uint32': 7,\n\t\t'int64': 8,\n\t\t'uint64': 9,\n\t\t// 'int128': 10, // uncomment once supported\n\t\t// 'uint128': 11,\n\t\t// 'int256': 12,\n\t\t// 'uint256': 13,\n\n\t\t// Floating-point data types:\n\t\t// 'float16': 14,\n\t\t// 'bfloat16': 15,\n\t\t'float32': 10,\n\t\t'float64': 11,\n\t\t// 'float128': 18, // uncomment once supported\n\n\t\t// Complex floating-point number data types:\n\t\t'complex64': 12,\n\t\t'complex128': 13,\n\n\t\t// Data type for \"binary\" data (i.e., data stored in a Node.js `Buffer` object):\n\t\t'binary': 14,\n\n\t\t// Data type for \"generic\" JavaScript values (objects):\n\t\t'generic': 15,\n\n\t\t// Define a signaling value which is guaranteed not to be a valid type enumeration value:\n\t\t'notype': 17,\n\n\t\t// Indicate the start of user defined type numbers (leaving room for type growth above):\n\t\t'userdefined_type': 256\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.keys()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\treturn Object.keys( Object( value ) );\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof Object.keys !== 'undefined' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// MAIN //\n\n/**\n* Tests whether a value is an `arguments` object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is an `arguments` object\n*\n* @example\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* @example\n* var bool = isArguments( [] );\n* // returns false\n*/\nfunction isArguments( value ) {\n\treturn ( nativeClass( value ) === '[object Arguments]' );\n}\n\n\n// EXPORTS //\n\nexport default isArguments;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArguments from './main.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Detects whether an environment returns the expected internal class of the `arguments` object.\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment behaves as expected\n*\n* @example\n* var bool = detect();\n* // returns <boolean>\n*/\nfunction detect() {\n\treturn isArguments( arguments );\n}\n\n\n// MAIN //\n\nbool = detect();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a `NaN` number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `NaN` number primitive\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value of `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( null );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is `NaN`.\n*\n* @module @stdlib/assert-is-nan\n*\n* @example\n* import isnan from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns false\n*\n* @example\n* import { isObject as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an object's own property is enumerable.\n*\n* @private\n* @name isEnumerableProperty\n* @type {Function}\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object property is enumerable\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );\n* // returns false\n*/\nvar isEnumerableProperty = Object.prototype.propertyIsEnumerable;\n\n\n// EXPORTS //\n\nexport default isEnumerableProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEnum from './native.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Detects whether an environment has a bug where String indices are not detected as \"enumerable\" properties. Observed in Node v0.10.\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment has the bug\n*/\nfunction detect() {\n\treturn !isEnum.call( 'beep', '0' );\n}\n\n\n// MAIN //\n\nbool = detect();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isString from '@stdlib/assert-is-string';\nimport { isPrimitive as isnan } from '@stdlib/assert-is-nan';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isEnum from './native.js';\nimport hasStringEnumBug from './has_string_enumerability_bug.js';\n\n\n// MAIN //\n\n/**\n* Tests if an object's own property is enumerable.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object property is enumerable\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );\n* // returns false\n*/\nfunction isEnumerableProperty( value, property ) {\n\tvar bool;\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\tbool = isEnum.call( value, property );\n\tif ( !bool && hasStringEnumBug && isString( value ) ) {\n\t\t// Note: we only check for indices, as properties attached to a `String` object are properly detected as enumerable above.\n\t\tproperty = +property;\n\t\treturn (\n\t\t\t!isnan( property ) &&\n\t\t\tisInteger( property ) &&\n\t\t\tproperty >= 0 &&\n\t\t\tproperty < value.length\n\t\t);\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default isEnumerableProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants-uint32-max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an `arguments` object.\n*\n* @module @stdlib/assert-is-arguments\n*\n* @example\n* import isArguments from '@stdlib/assert-is-arguments';\n*\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* bool = isArguments( [] );\n* // returns false\n*/\n\n// MODULES //\n\nimport hasArgumentsClass from './detect.js';\nimport main from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar isArguments;\nif ( hasArgumentsClass ) {\n\tisArguments = main;\n} else {\n\tisArguments = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default isArguments;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isEnumerableProperty from '@stdlib/assert-is-enumerable-property';\nimport isArray from '@stdlib/assert-is-array';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-uint32-max';\n\n\n// MAIN //\n\n/**\n* Tests whether a value is an `arguments` object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is an `arguments` object\n*\n* @example\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* @example\n* var bool = isArguments( [] );\n* // returns false\n*/\nfunction isArguments( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\t!isArray( value ) &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH &&\n\t\thasOwnProp( value, 'callee' ) &&\n\t\t!isEnumerableProperty( value, 'callee' )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArguments;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArguments from '@stdlib/assert-is-arguments';\nimport builtin from './builtin.js';\n\n\n// VARIABLES //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\tif ( isArguments( value ) ) {\n\t\treturn builtin( slice.call( value ) );\n\t}\n\treturn builtin( value );\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* No operation.\n*\n* @example\n* noop();\n* // ...does nothing.\n*/\nfunction noop() {\n\t// Empty function...\n}\n\n\n// EXPORTS //\n\nexport default noop;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEnumerableProperty from '@stdlib/assert-is-enumerable-property';\nimport noop from '@stdlib/utils-noop';\n\n\n// MAIN //\n\n// Note: certain environments treat an object's prototype as enumerable, which, as a matter of convention, it shouldn't be...\nvar bool = isEnumerableProperty( noop, 'prototype' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEnumerableProperty from '@stdlib/assert-is-enumerable-property';\n\n\n// VARIABLES //\n\nvar obj = {\n\t'toString': null\n};\n\n\n// MAIN //\n\n// Note: certain environments don't allow enumeration of overwritten properties which are considered non-enumerable...\nvar bool = !isEnumerableProperty( obj, 'toString' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a typed array.\n*\n* @module @stdlib/constants-array-max-typed-array-length\n*\n* @example\n* import MAX_TYPED_ARRAY_LENGTH from '@stdlib/constants-array-max-typed-array-length';\n* // returns 9007199254740991\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a typed array.\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n*/\nvar MAX_TYPED_ARRAY_LENGTH = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default MAX_TYPED_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-array-max-typed-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a collection.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is a collection\n*\n* @example\n* var bool = isCollection( [] );\n* // returns true\n*\n* @example\n* var bool = isCollection( {} );\n* // returns false\n*/\nfunction isCollection( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isCollection;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/assert-is-nan';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the first index at which a given element can be found.\n*\n* @param {ArrayLike} arr - array-like object\n* @param {*} searchElement - element to find\n* @param {integer} [fromIndex] - starting index (if negative, the start index is determined relative to last element)\n* @throws {TypeError} must provide an array-like object\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* var arr = [ 4, 3, 2, 1 ];\n* var idx = indexOf( arr, 3 );\n* // returns 1\n*\n* @example\n* var arr = [ 4, 3, 2, 1 ];\n* var idx = indexOf( arr, 5 );\n* // returns -1\n*\n* @example\n* // Using a `fromIndex`:\n* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n* var idx = indexOf( arr, 2, 3 );\n* // returns 5\n*\n* @example\n* // `fromIndex` which exceeds `array` length:\n* var arr = [ 1, 2, 3, 4, 2, 5 ];\n* var idx = indexOf( arr, 2, 10 );\n* // returns -1\n*\n* @example\n* // Negative `fromIndex`:\n* var arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\n* var idx = indexOf( arr, 2, -4 );\n* // returns 5\n*\n* idx = indexOf( arr, 2, -1 );\n* // returns 7\n*\n* @example\n* // Negative `fromIndex` exceeding input `array` length:\n* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n* var idx = indexOf( arr, 2, -10 );\n* // returns 1\n*\n* @example\n* // Array-like objects:\n* var str = 'bebop';\n* var idx = indexOf( str, 'o' );\n* // returns 3\n*/\nfunction indexOf( arr, searchElement, fromIndex ) {\n\tvar len;\n\tvar i;\n\tif ( !isCollection( arr ) && !isString( arr ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', arr ) );\n\t}\n\tlen = arr.length;\n\tif ( len === 0 ) {\n\t\treturn -1;\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex >= 0 ) {\n\t\t\tif ( fromIndex >= len ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti = fromIndex;\n\t\t} else {\n\t\t\ti = len + fromIndex;\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\ti = 0;\n\t}\n\t// Check for `NaN`...\n\tif ( isnan( searchElement ) ) {\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( isnan( arr[i] ) ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( arr[ i ] === searchElement ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether a value equals the prototype of its constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor\n*/\nfunction isConstructorPrototype( value ) {\n\treturn ( value.constructor && value.constructor.prototype === value );\n}\n\n\n// EXPORTS //\n\nexport default isConstructorPrototype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar w = ( typeof window === 'undefined' ) ? void 0 : window;\n\n\n// EXPORTS //\n\nexport default w;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport indexOf from '@stdlib/utils-index-of';\nimport typeOf from '@stdlib/utils-type-of';\nimport isConstructorPrototype from './is_constructor_prototype.js';\nimport EXCLUDED_KEYS from './excluded_keys.json';\nimport win from './window.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Determines whether an environment throws when comparing to the prototype of a value's constructor (e.g., [IE9][1]).\n*\n* [1]: https://stackoverflow.com/questions/7688070/why-is-comparing-the-constructor-property-of-two-windows-unreliable\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment is buggy\n*/\nfunction check() {\n\tvar k;\n\tif ( typeOf( win ) === 'undefined' ) {\n\t\treturn false;\n\t}\n\tfor ( k in win ) { // eslint-disable-line guard-for-in\n\t\ttry {\n\t\t\tif (\n\t\t\t\tindexOf( EXCLUDED_KEYS, k ) === -1 &&\n\t\t\t\thasOwnProp( win, k ) &&\n\t\t\t\twin[ k ] !== null &&\n\t\t\t\ttypeOf( win[ k ] ) === 'object'\n\t\t\t) {\n\t\t\t\tisConstructorPrototype( win[ k ] );\n\t\t\t}\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\nbool = check();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof window !== 'undefined' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasArgumentsBug from './has_arguments_bug.js';\nimport HAS_BUILTIN from './has_builtin.js';\nimport builtin from './builtin.js';\nimport wrapper from './builtin_wrapper.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @name keys\n* @type {Function}\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nvar keys;\nif ( HAS_BUILTIN ) {\n\tif ( hasArgumentsBug() ) {\n\t\tkeys = wrapper;\n\t} else {\n\t\tkeys = builtin;\n\t}\n} else {\n\tkeys = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport keys from './builtin.js';\n\n\n// FUNCTIONS //\n\n/**\n* Tests the built-in `Object.keys()` implementation when provided `arguments`.\n*\n* @private\n* @returns {boolean} boolean indicating whether the built-in implementation returns the expected number of keys\n*/\nfunction test() {\n\treturn ( keys( arguments ) || '' ).length !== 2;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether the built-in `Object.keys()` implementation supports providing `arguments` as an input value.\n*\n* ## Notes\n*\n* -   Safari 5.0 does **not** support `arguments` as an input value.\n*\n* @private\n* @returns {boolean} boolean indicating whether a built-in implementation supports `arguments`\n*/\nfunction check() {\n\treturn test( 1, 2 );\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isArguments from '@stdlib/assert-is-arguments';\nimport HAS_ENUM_PROTO_BUG from './has_enumerable_prototype_bug.js';\nimport HAS_NON_ENUM_PROPS_BUG from './has_non_enumerable_properties_bug.js';\nimport isConstructorPrototype from './is_constructor_prototype_wrapper.js';\nimport NON_ENUMERABLE from './non_enumerable.json';\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\tvar skipConstructor;\n\tvar skipPrototype;\n\tvar isFcn;\n\tvar out;\n\tvar k;\n\tvar p;\n\tvar i;\n\n\tout = [];\n\tif ( isArguments( value ) ) {\n\t\t// Account for environments which treat `arguments` differently...\n\t\tfor ( i = 0; i < value.length; i++ ) {\n\t\t\tout.push( i.toString() );\n\t\t}\n\t\t// Note: yes, we are precluding the `arguments` array-like object from having other enumerable properties; however, this should (1) be very rare and (2) not be encouraged (e.g., doing something like `arguments.a = 'b'`; in certain engines directly manipulating the `arguments` value results in automatic de-optimization).\n\t\treturn out;\n\t}\n\tif ( typeof value === 'string' ) {\n\t\t// Account for environments which do not treat string character indices as \"own\" properties...\n\t\tif ( value.length > 0 && !hasOwnProp( value, '0' ) ) {\n\t\t\tfor ( i = 0; i < value.length; i++ ) {\n\t\t\t\tout.push( i.toString() );\n\t\t\t}\n\t\t}\n\t} else {\n\t\tisFcn = ( typeof value === 'function' );\n\t\tif ( isFcn === false && !isObjectLike( value ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tskipPrototype = ( HAS_ENUM_PROTO_BUG && isFcn );\n\t}\n\tfor ( k in value ) {\n\t\tif ( !( skipPrototype && k === 'prototype' ) && hasOwnProp( value, k ) ) {\n\t\t\tout.push( String( k ) );\n\t\t}\n\t}\n\tif ( HAS_NON_ENUM_PROPS_BUG ) {\n\t\tskipConstructor = isConstructorPrototype( value );\n\t\tfor ( i = 0; i < NON_ENUMERABLE.length; i++ ) {\n\t\t\tp = NON_ENUMERABLE[ i ];\n\t\t\tif ( !( skipConstructor && p === 'constructor' ) && hasOwnProp( value, p ) ) {\n\t\t\t\tout.push( String( p ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasAutomationEqualityBug from './has_automation_equality_bug.js';\nimport isConstructorPrototype from './is_constructor_prototype.js';\nimport HAS_WINDOW from './has_window.js';\n\n\n// MAIN //\n\n/**\n* Wraps the test for constructor prototype equality to accommodate buggy environments (e.g., environments which throw when testing equality).\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor\n*/\nfunction wrapper( value ) {\n\tif ( HAS_WINDOW === false && !hasAutomationEqualityBug ) {\n\t\treturn isConstructorPrototype( value );\n\t}\n\ttry {\n\t\treturn isConstructorPrototype( value );\n\t} catch ( error ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrapper;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray data types.\n*\n* @module @stdlib/ndarray-dtypes\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n*\n* var list = dtypes();\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport objectKeys from '@stdlib/utils-keys';\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ORDERS from './orders.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray orders.\n*\n* @returns {StringArray} list of ndarray orders\n*\n* @example\n* var list = orders();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\nfunction orders() {\n\treturn ORDERS.slice();\n}\n\n\n// EXPORTS //\n\nexport default orders;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported layouts to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `row-major == 101`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of array objects.\n*\n* @returns {Object} object mapping supported layouts to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `layouts.h` enumeration!!!!\n\treturn {\n\t\t// Row-major (C-style):\n\t\t'row-major': 101,\n\n\t\t// Column-major (Fortran-style):\n\t\t'column-major': 102\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of BLAS memory layouts.\n*\n* @module @stdlib/blas-base-layouts\n*\n* @example\n* import layouts from '@stdlib/blas-base-layouts';\n*\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of BLAS memory layouts.\n*\n* @returns {StringArray} list of memory layouts\n*\n* @example\n* var list = layouts();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\nfunction layouts() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default layouts;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as layouts } from '@stdlib/blas-base-layouts';\n\n\n// VARIABLES //\n\nvar LAYOUTS = layouts();\n\n\n// MAIN //\n\n/**\n* Returns an object mapping supported orders to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `row-major == 1`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @returns {Object} object mapping supported orders to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `orders.h` enumeration!!!!\n\treturn {\n\t\t// Row-major (C-style):\n\t\t'row-major': LAYOUTS[ 'row-major' ],\n\n\t\t// Column-major (Fortran-style):\n\t\t'column-major': LAYOUTS[ 'column-major' ]\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray orders.\n*\n* @module @stdlib/ndarray-orders\n*\n* @example\n* import orders from '@stdlib/ndarray-orders';\n*\n* var list = orders();\n* // e.g., returns [ 'row-major', 'column-major' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MODES from './modes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray index modes.\n*\n* @returns {StringArray} list of ndarray index modes\n*\n* @example\n* var list = modes();\n* // returns [ 'throw', 'normalize', 'clamp', 'wrap' ]\n*/\nfunction modes() {\n\treturn MODES.slice();\n}\n\n\n// EXPORTS //\n\nexport default modes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported index modes to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `throw == 1`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @returns {Object} object mapping supported index modes to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `index_modes.h` enumeration!!!!\n\treturn {\n\t\t'throw': 1,\n\t\t'clamp': 2,\n\t\t'wrap': 3,\n\t\t'normalize': 4\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray index modes.\n*\n* @module @stdlib/ndarray-index-modes\n*\n* @example\n* import modes from '@stdlib/ndarray-index-modes';\n*\n* var list = modes();\n* // returns [ 'throw', 'normalize', 'clamp', 'wrap' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport modes from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( modes, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default modes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport ArrayBuffer from '@stdlib/array-buffer';\nimport DataView from '@stdlib/array-dataview';\nimport BigInt from '@stdlib/bigint-ctor';\nimport { enum as dtypes } from '@stdlib/ndarray-dtypes';\nimport { enum as orders } from '@stdlib/ndarray-orders';\nimport { enum as modes } from '@stdlib/ndarray-index-modes';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar ORDERS = orders();\nvar MODES = modes();\n\n\n// FUNCTIONS //\n\n/**\n* Serializes ndarray meta data to a `DataView`.\n*\n* ## Notes\n*\n* -   This function takes into account ndarray-like objects which may support index modes.\n*\n* -   This function defaults to returning cached serialized meta data. To force serialization, set the private `__meta_dataview__` property to `null`.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Meta data format:\n*\n*     ```text\n*     | endianness (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     which translates to the following `ArrayBuffer` layout:\n*\n*     ```text\n*     ArrayBuffer[\n*         <endianness>[int8],\n*         <dtype>[int16],\n*         <ndims>[int64],\n*         <shape>[ndims*int64],\n*         <strides>[ndims*int64],\n*         <offset>[int64],\n*         <order>[int8],\n*         <mode>[int8],\n*         <nsubmodes>[int64],\n*         <submodes>[nsubmodes*int8],\n*         <flags>[int32]\n*     ]\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Buffer length:\n*\n*     ```text\n*     1 + 2 + 8 + (ndims*8) + (ndims*8) + 8 + 1 + 1 + 8 + (nsubmodes*1) + 4 = 33 + (ndims*16) + nsubmodes\n*     ```\n*\n*     For example, consider a three-dimensional ndarray with one subscript index mode (submode):\n*\n*     ```text\n*     33 + (3*16) + 1 = 82 bytes\n*     ```\n*\n* -   Views:\n*\n*     -   endianness: `Int8Array( buf, 0, 1 )`\n*     -   dtype: `Int16Array( buf, 1, 1 )`\n*     -   ndims: `Int64Array( buf, 3, 1 )`\n*     -   shape: `Int64Array( buf, 11, ndims )`\n*     -   strides: `Int64Array( buf, 11+(ndims*8), ndims )`\n*     -   offset: `Int64Array( buf, 11+(ndims*16), 1 )`\n*     -   order: `Int8Array( buf, 19+(ndims*16), 1 )`\n*     -   mode: `Int8Array( buf, 20+(ndims*16), 1 )`\n*     -   nsubmodes: `Int64Array( buf, 21+(ndims*16), 1 )`\n*     -   submodes: `Int8Array( buf, 29+(ndims*16), nsubmodes )`\n*     -   flags: `Int32Array( buf, 29+(ndims*16)+nsubmodes, 1 )`\n*\n* @private\n* @returns {DataView} serialized meta data\n*/\nfunction meta2dataview() {\n\t/* eslint-disable no-invalid-this */\n\tvar nbytes;\n\tvar flgs;\n\tvar len;\n\tvar dt;\n\tvar sh;\n\tvar st;\n\tvar sm;\n\tvar v;\n\tvar m;\n\tvar o;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar i;\n\n\tm = this._mode || 'throw';\n\tsm = this._submode || [ m ];\n\tN = this._ndims;\n\tM = sm.length;\n\n\t// Compute the amount of memory we need to allocate for storing meta data:\n\tlen = 33 + (N*16) + M;\n\n\t// Check if we've already serialized ndarray meta data and can reuse an already allocated array buffer...\n\tv = this.__meta_dataview__;\n\tif ( v && v.byteLength === len ) { // Note: the byte length check is only a bare minimum sanity check, as cached contents may still be \"stale\" (e.g., shape and/or strides may have changed)\n\t\treturn v;\n\t}\n\t// Allocate raw memory and create a view for interfacing with the allocated memory:\n\tv = new DataView( new ArrayBuffer( len ) );\n\n\t// Retrieve ndarray meta data:\n\tsh = this._shape;\n\tst = this._strides;\n\tdt = this._dtype;\n\tnbytes = this._bytesPerElement;\n\n\t// Endianness: (byteoffset: 0; bytelength: 1)\n\to = 0;\n\tv.setInt8( o, ( IS_LITTLE_ENDIAN ) ? 1 : 0 );\n\n\t// Data type: (byteoffset: 1; bytelength: 2)\n\to += 1;\n\tv.setInt16( o, DTYPES[ dt ], IS_LITTLE_ENDIAN );\n\n\t// Number of dimensions: (byteoffset: 3; bytelength: 8)\n\to += 2;\n\tv.setBigInt64( o, BigInt( N ), IS_LITTLE_ENDIAN );\n\n\t// Shape and strides: (byteoffset: 11 and 11+(ndims*8), respectively; bytelength: ndims*8 for both shape and strides, and, thus, ndims*16 total)\n\ts = N * 8; // stride length between a dimension (shape[i]) and its associated stride\n\to += 8;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv.setBigInt64( o, BigInt( sh[i] ), IS_LITTLE_ENDIAN );\n\t\tv.setBigInt64( o+s, BigInt( st[i]*nbytes ), IS_LITTLE_ENDIAN );\n\t\to += 8;\n\t}\n\t// Offset: (byteoffset: 11+(ndims*16); bytelength: 8)\n\to += s;\n\tv.setBigInt64( o, BigInt( this._offset*nbytes ), IS_LITTLE_ENDIAN );\n\n\t// Order: (byteoffset: 19+(ndims*16); bytelength: 1)\n\to += 8;\n\tv.setInt8( o, ORDERS[ this._order ] );\n\n\t// Mode: (byteoffset: 20+(ndims*16); bytelength: 1)\n\to += 1;\n\tv.setInt8( o, MODES[ m ] );\n\n\t// Number of submodes: (byteoffset: 21+(ndims*16); bytelength: 8)\n\to += 1;\n\tv.setBigInt64( o, BigInt( M ), IS_LITTLE_ENDIAN );\n\n\t// Submodes: (byteoffset: 29+(ndims*16); bytelength: nsubmodes*1)\n\to += 8;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv.setInt8( o, MODES[ sm[i] ] );\n\t\to += 1;\n\t}\n\t// Flags: (byteoffset: 29+(ndims*16)+nsubmodes; bytelength: 4)\n\tflgs = 0|0;\n\tflgs |= ( this._flags.READONLY ) ? 4 : 0; // 00000000 00000000 00000000 00000100\n\tv.setInt32( o, flgs, IS_LITTLE_ENDIAN );\n\n\t// Cache the serialized meta data:\n\tthis.__meta_dataview__ = v;\n\n\treturn v;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default meta2dataview;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport Uint8Array from '@stdlib/array-uint8';\nimport DataView from '@stdlib/array-dataview';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Byte array workspace:\nvar BYTES = new Uint8Array( 8 );\nvar VIEW = new DataView( BYTES.buffer );\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x, out, stride, offset ) {\n\tvar hi;\n\tvar lo;\n\tvar i;\n\n\tif ( x === 0 ) {\n\t\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\t\tout[ offset ] = 0;\n\t\t\toffset += stride;\n\t\t}\n\t\treturn out;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tVIEW.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tVIEW.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tVIEW.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\tfor ( i = 0; i < BYTES.length; i++ ) {\n\t\tout[ offset ] = BYTES[ i ];\n\t\toffset += stride;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* @module @stdlib/number-float64-base-to-int64-bytes\n*\n* @example\n* import float64ToInt64Bytes from '@stdlib/number-float64-base-to-int64-bytes';\n*\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n* import float64ToInt64Bytes from '@stdlib/number-float64-base-to-int64-bytes';\n*\n* var out = new Uint8Array( 8 );\n* var bytes = float64ToInt64Bytes( 1.0, out, 1, 0 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport Uint8Array from '@stdlib/array-uint8';\nimport DataView from '@stdlib/array-dataview';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// 0xFFFFFFFF = 2**32 - 1 => 11111111 11111111 11111111 11111111\nvar LOW_MASK = 0xFFFFFFFF >>> 0;\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n\n// MAIN //\n\n/**\n* Converts an integer-valued double-precision floating-point number to a signed 64-bit integer byte array according to host byte order (endianness).\n*\n* ## Notes\n*\n* -   This function assumes that the input value is less than the maximum safe double-precision floating-point integer plus one (i.e., `2**53`).\n*\n* @param {number} x - input value\n* @returns {Uint8Array} byte array\n*\n* @example\n* var bytes = float64ToInt64Bytes( 1.0 );\n* // returns <Uint8Array>\n*/\nfunction float64ToInt64Bytes( x ) {\n\tvar bytes;\n\tvar view;\n\tvar hi;\n\tvar lo;\n\n\tbytes = new Uint8Array( 8 );\n\tif ( x === 0 ) {\n\t\treturn bytes;\n\t}\n\t// Get the low 32-bit word:\n\tlo = (x&LOW_MASK)>>>0;\n\n\t// Get the high 32-bit word:\n\thi = floor( x/TWO_32 );\n\n\t// Insert the high and low words according to host byte order (endianness):\n\tview = new DataView( bytes.buffer );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tview.setUint32( 0, lo, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, hi, IS_LITTLE_ENDIAN );\n\t} else {\n\t\tview.setUint32( 0, hi, IS_LITTLE_ENDIAN );\n\t\tview.setUint32( 4, lo, IS_LITTLE_ENDIAN );\n\t}\n\treturn bytes;\n}\n\n\n// EXPORTS //\n\nexport default float64ToInt64Bytes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport IS_LITTLE_ENDIAN from '@stdlib/assert-is-little-endian';\nimport ArrayBuffer from '@stdlib/array-buffer';\nimport DataView from '@stdlib/array-dataview';\nimport Uint8Array from '@stdlib/array-uint8';\nimport { enum as dtypes } from '@stdlib/ndarray-dtypes';\nimport { enum as orders } from '@stdlib/ndarray-orders';\nimport { enum as modes } from '@stdlib/ndarray-index-modes';\nimport { assign as float64ToInt64Bytes } from '@stdlib/number-float64-base-to-int64-bytes';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\nvar ORDERS = orders();\nvar MODES = modes();\n\n\n// FUNCTIONS //\n\n/**\n* Serializes ndarray meta data to a `DataView`.\n*\n* ## Notes\n*\n* -   This function takes into account ndarray-like objects which may support index modes.\n*\n* -   This function defaults to returning cached serialized meta data. To force serialization, set the private `__meta_dataview__` property to `null`.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Meta data format:\n*\n*     ```text\n*     | endianness (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     which translates to the following `ArrayBuffer` layout:\n*\n*     ```text\n*     ArrayBuffer[\n*         <endianness>[int8],\n*         <dtype>[int16],\n*         <ndims>[int64],\n*         <shape>[ndims*int64],\n*         <strides>[ndims*int64],\n*         <offset>[int64],\n*         <order>[int8],\n*         <mode>[int8],\n*         <nsubmodes>[int64],\n*         <submodes>[nsubmodes*int8],\n*         <flags>[int32]\n*     ]\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Buffer length:\n*\n*     ```text\n*     1 + 2 + 8 + (ndims*8) + (ndims*8) + 8 + 1 + 1 + 8 + (nsubmodes*1) + 4 = 33 + (ndims*16) + nsubmodes\n*     ```\n*\n*     For example, consider a three-dimensional ndarray with one subscript index mode (submode):\n*\n*     ```text\n*     33 + (3*16) + 1 = 82 bytes\n*     ```\n*\n* -   Views:\n*\n*     -   endianness: `Int8Array( buf, 0, 1 )`\n*     -   dtype: `Int16Array( buf, 1, 1 )`\n*     -   ndims: `Int64Array( buf, 3, 1 )`\n*     -   shape: `Int64Array( buf, 11, ndims )`\n*     -   strides: `Int64Array( buf, 11+(ndims*8), ndims )`\n*     -   offset: `Int64Array( buf, 11+(ndims*16), 1 )`\n*     -   order: `Int8Array( buf, 19+(ndims*16), 1 )`\n*     -   mode: `Int8Array( buf, 20+(ndims*16), 1 )`\n*     -   nsubmodes: `Int64Array( buf, 21+(ndims*16), 1 )`\n*     -   submodes: `Int8Array( buf, 29+(ndims*16), nsubmodes )`\n*     -   flags: `Int32Array( buf, 29+(ndims*16)+nsubmodes, 1 )`\n*\n* @private\n* @returns {DataView} serialized meta data\n*/\nfunction meta2dataview() {\n\t/* eslint-disable no-invalid-this */\n\tvar nbytes;\n\tvar bytes;\n\tvar flgs;\n\tvar len;\n\tvar dt;\n\tvar sh;\n\tvar st;\n\tvar sm;\n\tvar v;\n\tvar m;\n\tvar o;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar i;\n\n\tm = this._mode || 'throw';\n\tsm = this._submode || [ m ];\n\tN = this._ndims;\n\tM = sm.length;\n\n\t// Compute the amount of memory we need to allocate for storing meta data:\n\tlen = 33 + (N*16) + M;\n\n\t// Check if we've already serialized ndarray meta data and can reuse an already allocated array buffer...\n\tv = this.__meta_dataview__;\n\tif ( v && v.byteLength === len ) { // Note: the byte length check is only a bare minimum sanity check, as cached contents may still be \"stale\" (e.g., shape and/or strides may have changed)\n\t\treturn v;\n\t}\n\t// Allocate raw memory and create views for interfacing with the allocated memory:\n\tv = new DataView( new ArrayBuffer( len ) );\n\tbytes = new Uint8Array( v.buffer );\n\n\t// Retrieve ndarray meta data:\n\tsh = this._shape;\n\tst = this._strides;\n\tdt = this._dtype;\n\tnbytes = this._bytesPerElement;\n\n\t// Endianness: (byteoffset: 0; bytelength: 1)\n\to = 0;\n\tv.setInt8( o, ( IS_LITTLE_ENDIAN ) ? 1 : 0 );\n\n\t// Data type: (byteoffset: 1; bytelength: 2)\n\to += 1;\n\tv.setInt16( o, DTYPES[ dt ], IS_LITTLE_ENDIAN );\n\n\t// Number of dimensions: (byteoffset: 3; bytelength: 8)\n\to += 2;\n\tfloat64ToInt64Bytes( N, bytes, 1, o );\n\n\t// Shape and strides: (byteoffset: 11 and 11+(ndims*8), respectively; bytelength: ndims*8 for both shape and strides, and, thus, ndims*16 total)\n\ts = N * 8; // stride length between a dimension (shape[i]) and its associated stride\n\to += 8;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tfloat64ToInt64Bytes( sh[i], bytes, 1, o );\n\t\tfloat64ToInt64Bytes( st[i]*nbytes, bytes, 1, o+s );\n\t\to += 8;\n\t}\n\t// Offset: (byteoffset: 11+(ndims*16); bytelength: 8)\n\to += s;\n\tfloat64ToInt64Bytes( this._offset*nbytes, bytes, 1, o );\n\n\t// Order: (byteoffset: 19+(ndims*16); bytelength: 1)\n\to += 8;\n\tv.setInt8( o, ORDERS[ this._order ] );\n\n\t// Mode: (byteoffset: 20+(ndims*16); bytelength: 1)\n\to += 1;\n\tv.setInt8( o, MODES[ m ] );\n\n\t// Number of submodes: (byteoffset: 21+(ndims*16); bytelength: 8)\n\to += 1;\n\tfloat64ToInt64Bytes( M, bytes, 1, o );\n\n\t// Submodes: (byteoffset: 29+(ndims*16); bytelength: nsubmodes*1)\n\to += 8;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tv.setInt8( o, MODES[ sm[i] ] );\n\t\to += 1;\n\t}\n\t// Flags: (byteoffset: 29+(ndims*16)+nsubmodes; bytelength: 4)\n\tflgs = 0|0;\n\tflgs |= ( this._flags.READONLY ) ? 4 : 0; // 00000000 00000000 00000000 00000100\n\tv.setInt32( o, flgs, IS_LITTLE_ENDIAN );\n\n\t// Cache the serialized meta data:\n\tthis.__meta_dataview__ = v;\n\n\treturn v;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default meta2dataview;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport hasBigIntSupport from '@stdlib/assert-has-bigint-support';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport Boolean from '@stdlib/boolean-ctor';\nimport isColumnMajorContiguous from './is_column_major_contiguous.js';\nimport isRowMajorContiguous from './is_row_major_contiguous.js';\nimport isContiguous from './is_contiguous.js';\nimport copyFlags from './copy_flags.js';\nimport igetValue from './iget.js';\nimport isetValue from './iset.js';\nimport setValue from './set.js';\nimport getValue from './get.js';\nimport toJSON from './tojson.js';\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\nimport meta2dataview from './meta2dataview.js';\nimport meta2dataviewPolyfill from './meta2dataview.polyfill.js';\n\n\n// MAIN //\n\n/**\n* ndarray constructor.\n*\n* ## Notes\n*\n* -   To create a zero-dimensional array,\n*\n*     ```javascript\n*     var buffer = [ 1 ];\n*     var shape = [];\n*     var strides = [ 0 ];\n*     var offset = 0;\n*\n*     var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*     ```\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {(ArrayLikeObject|TypedArray|Buffer)} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ndarray( dtype, buffer, shape, strides, offset, order ) {\n\tvar contiguous;\n\tvar nbytes;\n\tvar ord;\n\tvar len;\n\tvar i;\n\tif ( !(this instanceof ndarray) ) {\n\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order );\n\t}\n\t// Compute the number of elements...\n\tlen = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\t// Compute the number of bytes...\n\tif ( buffer.BYTES_PER_ELEMENT ) {\n\t\tnbytes = buffer.BYTES_PER_ELEMENT * len;\n\t} else {\n\t\tnbytes = null;\n\t}\n\t// Set private properties...\n\tthis._byteLength = nbytes;\n\tthis._bytesPerElement = bytesPerElement( dtype );\n\tthis._buffer = buffer;\n\tthis._dtype = dtype;\n\tthis._length = len;\n\tthis._ndims = shape.length;\n\tthis._offset = offset;\n\tthis._order = order;\n\tthis._shape = shape;\n\tthis._strides = strides;\n\tthis._accessors = Boolean( buffer.get && buffer.set );\n\n\tthis._iterationOrder = iterationOrder( strides );\n\n\t// Determine if the array can be stored contiguously:\n\tcontiguous = isContiguous( len, shape, strides, offset, this._iterationOrder ); // eslint-disable-line max-len\n\n\t// Infer the array \"order\" from the stride array (this is supplementary to the `order` parameter):\n\tord = strides2order( strides );\n\n\tthis._flags = {\n\t\t'ROW_MAJOR_CONTIGUOUS': isRowMajorContiguous( ord, contiguous ),\n\t\t'COLUMN_MAJOR_CONTIGUOUS': isColumnMajorContiguous( ord, contiguous ),\n\t\t'READONLY': false\n\t};\n\n\t// Initialize a property for caching serialized meta data:\n\tthis.__meta_dataview__ = null;\n\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof ndarray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = ndarray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( ndarray, 'name', 'ndarray' );\n\n/**\n* Size (in bytes) of the array (if known).\n*\n* @name byteLength\n* @memberof ndarray.prototype\n* @type {(NonNegativeInteger|null)}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'float64', buffer, shape, strides, offset, 'row-major' );\n*\n* var byteLength = x.byteLength;\n* // returns 48\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'byteLength', function get() {\n\treturn this._byteLength;\n});\n\n/**\n* Size (in bytes) of each array element (if known).\n*\n* @name BYTES_PER_ELEMENT\n* @memberof ndarray.prototype\n* @type {(PositiveInteger|null)}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var buffer = new Float64Array( [ 1, 2, 3, 4, 5, 6 ] );\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'float64', buffer, shape, strides, offset, 'row-major' );\n*\n* var nbytes = x.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'BYTES_PER_ELEMENT', function get() {\n\treturn this._bytesPerElement;\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name data\n* @memberof ndarray.prototype\n* @type {(Array|TypedArray|Buffer)}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var data = x.data;\n* // returns [ 1, 2, 3, 4, 5, 6 ]\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'data', function get() {\n\treturn this._buffer;\n});\n\n/**\n* Underlying data type.\n*\n* @name dtype\n* @memberof ndarray.prototype\n* @type {string}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var dtype = x.dtype;\n* // returns 'generic'\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'dtype', function get() {\n\treturn this._dtype;\n});\n\n/**\n* Meta information, such as information concerning the memory layout of the array.\n*\n* @name flags\n* @memberof ndarray.prototype\n* @type {Object}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var flgs = x.flags;\n* // returns <Object>\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'flags', function get() {\n\treturn copyFlags( this._flags );\n});\n\n/**\n* Length of the array.\n*\n* @name length\n* @memberof ndarray.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var len = x.length;\n* // returns 6\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Number of dimensions.\n*\n* @name ndims\n* @memberof ndarray.prototype\n* @type {PositiveInteger}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var ndims = x.ndims;\n* // returns 2\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'ndims', function get() {\n\treturn this._ndims;\n});\n\n/**\n* Index offset which specifies the buffer index at which to start iterating over array elements.\n*\n* @name offset\n* @memberof ndarray.prototype\n* @type {NonNegativeInteger}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var o = x.offset;\n* // returns 0\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'offset', function get() {\n\treturn this._offset;\n});\n\n/**\n* Array order.\n*\n* ## Notes\n*\n* -   The array order is either row-major (C-style) or column-major (Fortran-style).\n*\n* @name order\n* @memberof ndarray.prototype\n* @type {string}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var order = x.order;\n* // returns 'row-major'\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'order', function get() {\n\treturn this._order;\n});\n\n/**\n* Shape of the array.\n*\n* @name shape\n* @memberof ndarray.prototype\n* @type {NonNegativeIntegerArray}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var s = x.shape;\n* // returns [ 3, 2 ]\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'shape', function get() {\n\treturn this._shape.slice();\n});\n\n/**\n* Index strides which specify how to access data along corresponding array dimensions.\n*\n* @name strides\n* @memberof ndarray.prototype\n* @type {IntegerArray}\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var s = x.strides;\n* // returns [ 2, 1 ]\n*/\nsetReadOnlyAccessor( ndarray.prototype, 'strides', function get() {\n\treturn this._strides.slice();\n});\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name get\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'get', getValue );\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @name iget\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'iget', igetValue );\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name set\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*\n* x.set( 1, 1, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.get( 1, 1 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'set', setValue );\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @name iset\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*\n* x.iset( 3, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.iget( 3 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'iset', isetValue );\n\n/**\n* Serializes an ndarray as a string.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @name toString\n* @memberof ndarray.prototype\n* @type {Function}\n* @returns {string} serialized ndarray\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var str = x.toString();\n* // returns \"ndarray( 'generic', [ 3, 4, 5, 6, 7, 8 ], [ 3, 2 ], [ 2, 1 ], 0, 'row-major' )\"\n*/\nsetReadOnly( ndarray.prototype, 'toString', toString );\n\n/**\n* Serializes an ndarray as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying an `ndarray` instance.\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @name toJSON\n* @memberof ndarray.prototype\n* @type {Function}\n* @returns {Object} serialized ndarray\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var o = x.toJSON();\n* // e.g., returns { 'type': 'ndarray', 'dtype': 'generic', 'flags': {...}, 'offset': 0, 'order': 'row-major', 'shape': [ 3, 2 ], 'strides': [ 2, 1 ], 'data': [ 3, 4, 5, 6, 7, 8 ] }\n*/\nsetReadOnly( ndarray.prototype, 'toJSON', toJSON );\n\n/**\n* Serializes ndarray meta data to a `DataView`.\n*\n* ## Notes\n*\n* -   Meta data format:\n*\n*     ```text\n*     | <endianness> (1 byte) | <dtype> (2 bytes) | <ndims> (8 bytes) | <shape> (ndims*8 bytes) | <strides> (ndims*8 bytes) | <offset> (8 bytes) | <order> (1 byte) | <mode> (1 byte) | <nsubmodes> (8 bytes) | <submodes> (nsubmodes*1 bytes) | <flags> (4 bytes) |\n*     ```\n*\n*     where `strides` and `offset` are in units of bytes.\n*\n* -   If the endianness is `1`, the byte order is little endian. If the endianness is `0`, the byte order is big endian.\n*\n* -   Serialization is performed according to host byte order (endianness).\n*\n* -   Consumers of this method should treat the returned `DataView` as **immutable**. Otherwise, mutation can invalidate meta data and potentially affect other consumers.\n*\n* @private\n* @name __array_meta_dataview__\n* @memberof ndarray.prototype\n* @type {Function}\n* @returns {DataView} serialized meta data\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6, 7, 8 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var dv = x.__array_meta_dataview__();\n* // returns <DataView>\n*/\nsetReadOnly( ndarray.prototype, '__array_meta_dataview__', ( hasBigIntSupport() ) ? meta2dataview : meta2dataviewPolyfill );\n\n\n// EXPORTS //\n\nexport default ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\n\n\n// MAIN //\n\n/**\n* Determines if an array is contiguous.\n*\n* @private\n* @param {NonNegativeInteger} len - array length\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @param {integer} iterationOrder - iteration order\n* @returns {boolean} boolean indicating if an array is contiguous\n*/\nfunction isContiguous( len, shape, strides, offset, iterationOrder ) {\n\tvar buf;\n\n\t// If an array does not contain any elements, then no data to store, and, if the array is unordered, adjacent array elements are not guaranteed to be stored next to each other.\n\tif ( len === 0 || iterationOrder === 0 ) {\n\t\treturn false;\n\t}\n\t// Ensure that the array is compatible with a single memory segment:\n\tbuf = minmaxViewBufferIndex( shape, strides, offset );\n\treturn ( len === ( buf[1]-buf[0]+1 ) );\n}\n\n\n// EXPORTS //\n\nexport default isContiguous;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray from '@stdlib/ndarray-base-ctor';\n\n\n// MAIN //\n\n/**\n* Tests if a value is ndarray-like.\n*\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating if a value is ndarray-like\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var arr = ndarray( 'generic', [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n*\n* var bool = isndarrayLike( arr );\n* // returns true\n*\n* bool = isndarrayLike( [] );\n* // returns false\n*/\nfunction isndarrayLike( v ) {\n\treturn (\n\t\tv instanceof ndarray ||\n\t\t(\n\t\t\tv !== null &&\n\t\t\ttypeof v === 'object' &&\n\t\t\ttypeof v.data === 'object' &&\n\t\t\ttypeof v.shape === 'object' &&\n\t\t\ttypeof v.strides === 'object' &&\n\t\t\ttypeof v.offset === 'number' &&\n\t\t\ttypeof v.order === 'string' &&\n\t\t\ttypeof v.ndims === 'number' &&\n\t\t\ttypeof v.dtype === 'string' &&\n\t\t\ttypeof v.length === 'number' &&\n\t\t\ttypeof v.flags === 'object' &&\n\t\t\ttypeof v.get === 'function' &&\n\t\t\ttypeof v.set === 'function'\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isndarrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies ndarray flags.\n*\n* @private\n* @param {Object} flags - flags\n* @returns {Object} copy of input object\n*/\nfunction copyFlags( flags ) {\n\treturn {\n\t\t'ROW_MAJOR_CONTIGUOUS': flags.ROW_MAJOR_CONTIGUOUS,\n\t\t'COLUMN_MAJOR_CONTIGUOUS': flags.COLUMN_MAJOR_CONTIGUOUS,\n\t\t'READONLY': flags.READONLY\n\t};\n}\n\n\n// EXPORTS //\n\nexport default copyFlags;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} idx - indices\n* @returns {*} array element\n*/\nfunction get() {\n\t/* eslint-disable no-invalid-this */\n\tvar idx;\n\tvar i;\n\n\tidx = this._offset;\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tidx += this._strides[ i ] * arguments[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( idx );\n\t}\n\treturn this._buffer[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array element located a specified linear view index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @returns {*} array element\n*/\nfunction iget( idx ) {\n\t/* eslint-disable no-invalid-this */\n\tvar strides;\n\tvar shape;\n\tvar ndims;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\tndims = this._ndims;\n\tif ( ndims === 0 ) {\n\t\tif ( this._accessors ) {\n\t\t\treturn this._buffer.get( this._offset );\n\t\t}\n\t\treturn this._buffer[ this._offset ];\n\t}\n\tif ( this._flags.ROW_MAJOR_CONTIGUOUS || this._flags.COLUMN_MAJOR_CONTIGUOUS ) { // eslint-disable-line max-len\n\t\t// Trivial case where we have all positive strides...\n\t\tif ( this._iterationOrder === 1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\treturn this._buffer.get( this._offset+idx );\n\t\t\t}\n\t\t\treturn this._buffer[ this._offset+idx ];\n\t\t}\n\t\t// Trivial case where we have all negative strides...\n\t\tif ( this._iterationOrder === -1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\treturn this._buffer.get( this.offset-idx );\n\t\t\t}\n\t\t\treturn this._buffer[ this._offset-idx ];\n\t\t}\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tshape = this._shape;\n\tstrides = this._strides;\n\tind = this._offset;\n\tif ( this._order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\tif ( this._accessors ) {\n\t\t\treturn this._buffer.get( ind );\n\t\t}\n\t\treturn this._buffer[ ind ];\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( ind );\n\t}\n\treturn this._buffer[ ind ];\n}\n\n\n// EXPORTS //\n\nexport default iget;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*/\nfunction set() {\n\t/* eslint-disable no-invalid-this */\n\tvar idx;\n\tvar i;\n\n\tidx = this._offset;\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\tidx += this._strides[ i ] * arguments[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( arguments[ i ], idx );\n\t} else {\n\t\tthis._buffer[ idx ] = arguments[ i ];\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default set;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets an array element located a specified linear view index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*/\nfunction iset( idx, v ) {\n\t/* eslint-disable no-invalid-this */\n\tvar strides;\n\tvar shape;\n\tvar ndims;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\tndims = this._ndims;\n\tif ( ndims === 0 ) {\n\t\tif ( this._accessors ) {\n\t\t\tthis._buffer.set( idx, this._offset );\n\t\t} else {\n\t\t\tthis._buffer[ this._offset ] = idx;\n\t\t}\n\t\treturn this;\n\t}\n\tif ( this._flags.ROW_MAJOR_CONTIGUOUS || this._flags.COLUMN_MAJOR_CONTIGUOUS ) { // eslint-disable-line max-len\n\t\t// Trivial case where we have all positive strides...\n\t\tif ( this._iterationOrder === 1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\tthis._buffer.set( v, this._offset+idx );\n\t\t\t} else {\n\t\t\t\tthis._buffer[ this._offset+idx ] = v;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\t// Trivial case where we have all negative strides...\n\t\tif ( this._iterationOrder === -1 ) {\n\t\t\tif ( this._accessors ) {\n\t\t\t\tthis._buffer.set( v, this._offset-idx );\n\t\t\t} else {\n\t\t\t\tthis._buffer[ this._offset-idx ] = v;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tshape = this._shape;\n\tstrides = this._strides;\n\tind = this._offset;\n\tif ( this._order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\tif ( this._accessors ) {\n\t\t\tthis._buffer.set( v, ind );\n\t\t} else {\n\t\t\tthis._buffer[ ind ] = v;\n\t\t}\n\t\treturn this;\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( v, ind );\n\t} else {\n\t\tthis._buffer[ ind ] = v;\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default iset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// MAIN //\n\n/**\n* Serializes an ndarray as a JSON object.\n*\n* ## Notes\n*\n* -   The method does **not** serialize data outside of the buffer region defined by the array configuration.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out;\n\tvar len;\n\tvar v;\n\tvar i;\n\n\tlen = this._length;\n\n\t// Build an object containing all ndarray properties needed to revive a serialized ndarray...\n\tout = {};\n\tout.type = 'ndarray';\n\tout.dtype = this.dtype;\n\tout.flags = {\n\t\t'READONLY': this._flags.READONLY\n\t};\n\tout.order = this._order;\n\tout.shape = this._shape.slice();\n\tout.strides = this._strides.slice();\n\n\t// Flip the signs of negative strides:\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( out.strides[ i ] < 0 ) {\n\t\t\tout.strides[ i ] *= -1;\n\t\t}\n\t}\n\t// Cast data to generic array...\n\tout.data = [];\n\tif ( out.dtype === 'complex64' || out.dtype === 'complex128' ) {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tv = this.iget( i );\n\t\t\tout.data.push( real( v ), imag( v ) );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tout.data.push( this.iget( i ) );\n\t\t}\n\t}\n\treturn out;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default fround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat32Array = ( typeof Float32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float32Array\n*\n* @example\n* var bool = isFloat32Array( new Float32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat32Array( [] );\n* // returns false\n*/\nfunction isFloat32Array( value ) {\n\treturn (\n\t\t( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float32Array === 'function' ) ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float32\n*\n* @example\n* import ctor from '@stdlib/array-float32';\n*\n* var arr = new ctor( 10 );\n* // returns <Float32Array>\n*/\n\n// MODULES //\n\nimport hasFloat32ArraySupport from '@stdlib/assert-has-float32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32Array from '@stdlib/assert-is-float32array';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport GlobalFloat32Array from './float32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float32Array` support\n*\n* @example\n* var bool = hasFloat32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat32Array( [ 1.0, 3.14, -3.14, 5.0e40 ] );\n\t\tbool = (\n\t\t\tisFloat32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.140000104904175 &&\n\t\t\tarr[ 2 ] === -3.140000104904175 &&\n\t\t\tarr[ 3 ] === PINF\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-to-float32\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport Complex64 from '@stdlib/complex-float32-ctor';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a complex number-like object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex number-like object.\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n*\n* var x = new Complex128( 4.0, 2.0 );\n* var bool = isComplexLike( x );\n* // returns true\n*\n* x = new Complex64( 4.0, 2.0 );\n* bool = isComplexLike( x );\n* // returns true\n*/\nfunction isComplexLike( value ) {\n\tif ( value instanceof Complex128 || value instanceof Complex64 ) {\n\t\treturn true;\n\t}\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.re === 'number' &&\n\t\ttypeof value.im === 'number'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isComplexLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an object; e.g., `{}`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an object\n*\n* @example\n* var bool = isObject( {} );\n* // returns true\n*\n* @example\n* var bool = isObject( null );\n* // returns false\n*/\nfunction isObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t!isArray( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object.\n*\n* @name Object\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {Object} object\n*\n* @example\n* var o = new Object( null );\n* // returns {}\n*\n* @example\n* var o = new Object( 5.0 );\n* // returns <Number>\n*\n* @example\n* var o = new Object( 'beep' );\n* // returns <String>\n*\n* @example\n* var o1 = {};\n*\n* var o2 = new Object( o1 );\n* // returns {}\n*\n* var bool = ( o1 === o2 );\n* // returns true\n*/\nvar Obj = Object; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport builtin from './native.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar getProto;\nif ( isFunction( Object.getPrototypeOf ) ) {\n\tgetProto = builtin;\n} else {\n\tgetProto = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar getProto = Object.getPrototypeOf;\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport getProto from './proto.js';\n\n\n// MAIN //\n\n/**\n* Returns the prototype of a provided object.\n*\n* @private\n* @param {Object} obj - input object\n* @returns {(Object|null)} prototype\n*/\nfunction getPrototypeOf( obj ) {\n\tvar proto = getProto( obj );\n\tif ( proto || proto === null ) {\n\t\treturn proto;\n\t}\n\tif ( nativeClass( obj.constructor ) === '[object Function]' ) {\n\t\t// May break if the constructor has been tampered with...\n\t\treturn obj.constructor.prototype;\n\t}\n\tif ( obj instanceof Object ) {\n\t\treturn Object.prototype;\n\t}\n\t// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default getPrototypeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the value of the `__proto__` property.\n*\n* @private\n* @param {Object} obj - input object\n* @returns {*} value of `__proto__` property\n*/\nfunction getProto( obj ) {\n\t// eslint-disable-next-line no-proto\n\treturn obj.__proto__;\n}\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport getPrototypeOf from '@stdlib/utils-get-prototype-of';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar objectPrototype = Object.prototype;\n\n\n// FUNCTIONS //\n\n/**\n* Tests that an object only has own properties.\n*\n* @private\n* @param {Object} obj - value to test\n* @returns {boolean} boolean indicating if an object only has own properties\n*/\nfunction ownProps( obj ) {\n\tvar key;\n\n\t// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).\n\tfor ( key in obj ) {\n\t\tif ( !hasOwnProp( obj, key ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests if a value is a plain object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a plain object\n*\n* @example\n* var bool = isPlainObject( {} );\n* // returns true\n*\n* @example\n* var bool = isPlainObject( null );\n* // returns false\n*/\nfunction isPlainObject( value ) {\n\tvar proto;\n\n\t// Screen for obvious non-objects...\n\tif ( !isObject( value ) ) {\n\t\treturn false;\n\t}\n\t// Objects with no prototype (e.g., `Object.create( null )`) are plain...\n\tproto = getPrototypeOf( value );\n\tif ( !proto ) {\n\t\treturn true;\n\t}\n\t// Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...\n\treturn (\n\t\t// Cannot have own `constructor` property:\n\t\t!hasOwnProp( value, 'constructor' ) &&\n\n\t\t// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):\n\t\thasOwnProp( proto, 'constructor' ) &&\n\t\tisFunction( proto.constructor ) &&\n\t\tnativeClass( proto.constructor ) === '[object Function]' &&\n\n\t\t// Test for object-specific method:\n\t\thasOwnProp( proto, 'isPrototypeOf' ) &&\n\t\tisFunction( proto.isPrototypeOf ) &&\n\n\t\t(\n\t\t\t// Test if the prototype matches the global `Object` prototype (same realm):\n\t\t\tproto === objectPrototype ||\n\n\t\t\t// Test that all properties are own properties (cross-realm; *most* likely a plain object):\n\t\t\townProps( value )\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPlainObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Object from '@stdlib/object-ctor';\nimport getProto from './detect.js';\n\n\n// MAIN //\n\n/**\n* Returns the prototype of a provided object.\n*\n* @param {*} value - input value\n* @returns {(Object|null)} prototype\n*\n* @example\n* var proto = getPrototypeOf( {} );\n* // returns {}\n*/\nfunction getPrototypeOf( value ) {\n\tif (\n\t\tvalue === null ||\n\t\tvalue === void 0\n\t) {\n\t\treturn null;\n\t}\n\t// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:\n\tvalue = Object( value );\n\n\treturn getProto( value );\n}\n\n\n// EXPORTS //\n\nexport default getPrototypeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar TYPE = 'function';\n\n\n// MAIN //\n\n/**\n* Tests if an array-like object supports the accessor (get/set) protocol.\n*\n* @param {Object} value - value to test\n* @returns {boolean} boolean indicating whether a value is an accessor array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n*\n* var bool = isAccessorArray( new Complex128Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isAccessorArray( [] );\n* // returns false\n*/\nfunction isAccessorArray( value ) {\n\treturn ( typeof value.get === TYPE && typeof value.set === TYPE ); // eslint-disable-line valid-typeof\n}\n\n\n// EXPORTS //\n\nexport default isAccessorArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar GETTERS = {\n\t'complex128': getComplex128,\n\t'complex64': getComplex64,\n\t'default': getArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns an element from a `Complex128Array`.\n*\n* @private\n* @param {Complex128Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var arr = new Complex128Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getComplex128( arr, 1 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 3.0\n*\n* var im = imag( v );\n* // returns 4.0\n*/\nfunction getComplex128( arr, idx ) {\n\treturn arr.get( idx );\n}\n\n/**\n* Returns an element from a `Complex64Array`.\n*\n* @private\n* @param {Complex64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getComplex64( arr, 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 3.0\n*\n* var im = imagf( v );\n* // returns 4.0\n*/\nfunction getComplex64( arr, idx ) {\n\treturn arr.get( idx );\n}\n\n/**\n* Returns an element from an array-like object supporting the get/set protocol.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element value\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* function get( idx ) {\n*    return arr[ idx ];\n* }\n*\n* function set( value, idx ) {\n*    arr[ idx ] = value;\n* }\n*\n* arr.get = get;\n* arr.set = set;\n*\n* var v = getArrayLike( arr, 2 );\n* // returns 3\n*/\nfunction getArrayLike( arr, idx ) {\n\treturn arr.get( idx );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for retrieving an element from an array-like object supporting the get/set protocol.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* var get = getter( dtype( arr ) );\n* var v = get( arr, 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 3.0\n*\n* var im = imagf( v );\n* // returns 4.0\n*/\nfunction getter( dtype ) {\n\tvar f = GETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn GETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar GETTERS = {\n\t'float64': getFloat64,\n\t'float32': getFloat32,\n\t'int32': getInt32,\n\t'int16': getInt16,\n\t'int8': getInt8,\n\t'uint32': getUint32,\n\t'uint16': getUint16,\n\t'uint8': getUint8,\n\t'uint8c': getUint8c,\n\t'generic': getGeneric,\n\t'default': getArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns an element from a `Float64Array`.\n*\n* @private\n* @param {Float64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var arr = new Float64Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getFloat64( arr, 2 );\n* // returns 3.0\n*/\nfunction getFloat64( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Float32Array`.\n*\n* @private\n* @param {Float32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var arr = new Float32Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getFloat32( arr, 2 );\n* // returns 3.0\n*/\nfunction getFloat32( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an `Int32Array`.\n*\n* @private\n* @param {Int32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n*\n* var arr = new Int32Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getInt32( arr, 2 );\n* // returns 3\n*/\nfunction getInt32( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an `Int16Array`.\n*\n* @private\n* @param {Int16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Int16Array from '@stdlib/array-int16';\n*\n* var arr = new Int16Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getInt16( arr, 2 );\n* // returns 3\n*/\nfunction getInt16( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an `Int8Array`.\n*\n* @private\n* @param {Int8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Int8Array from '@stdlib/array-int8';\n*\n* var arr = new Int8Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getInt8( arr, 2 );\n* // returns 3\n*/\nfunction getInt8( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint32Array`.\n*\n* @private\n* @param {Uint32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var arr = new Uint32Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint32( arr, 2 );\n* // returns 3\n*/\nfunction getUint32( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint16Array`.\n*\n* @private\n* @param {Uint16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint16Array from '@stdlib/array-uint16';\n*\n* var arr = new Uint16Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint16( arr, 2 );\n* // returns 3\n*/\nfunction getUint16( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint8Array`.\n*\n* @private\n* @param {Uint8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var arr = new Uint8Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint8( arr, 2 );\n* // returns 3\n*/\nfunction getUint8( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint8ClampedArray`.\n*\n* @private\n* @param {Uint8ClampedArray} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint8ClampedArray from '@stdlib/array-uint8c';\n*\n* var arr = new Uint8ClampedArray( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint8c( arr, 2 );\n* // returns 3\n*/\nfunction getUint8c( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a generic `Array`.\n*\n* @private\n* @param {Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element value\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var v = getGeneric( arr, 2 );\n* // returns 3\n*/\nfunction getGeneric( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an indexed array-like object.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element value\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var v = getArrayLike( arr, 2 );\n* // returns 3\n*/\nfunction getArrayLike( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for retrieving an element from an indexed array-like object.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var get = getter( dtype( arr ) );\n* var v = get( arr, 2 );\n* // returns 3\n*/\nfunction getter( dtype ) {\n\tvar f = GETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn GETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Mapping from array constructors to data types...\nvar ctor2dtypes = {\n\t'Float32Array': 'float32',\n\t'Float64Array': 'float64',\n\t'Array': 'generic',\n\t'Int16Array': 'int16',\n\t'Int32Array': 'int32',\n\t'Int8Array': 'int8',\n\t'Uint16Array': 'uint16',\n\t'Uint32Array': 'uint32',\n\t'Uint8Array': 'uint8',\n\t'Uint8ClampedArray': 'uint8c',\n\t'Complex64Array': 'complex64',\n\t'Complex128Array': 'complex128'\n};\n\n\n// EXPORTS //\n\nexport default ctor2dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport UINT32_MAX from '@stdlib/constants-uint32-max';\nimport GlobalUint32Array from './uint32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasInt32Array = ( typeof Int32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an Int32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an Int32Array\n*\n* @example\n* var bool = isInt32Array( new Int32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isInt32Array( [] );\n* // returns false\n*/\nfunction isInt32Array( value ) {\n\treturn (\n\t\t( hasInt32Array && value instanceof Int32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Int32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInt32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 32-bit integer.\n*\n* @module @stdlib/constants-int32-max\n* @type {integer32}\n*\n* @example\n* import INT32_MAX from '@stdlib/constants-int32-max';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{31} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 2147483647\n*/\nvar INT32_MAX = 2147483647|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Int32Array === 'function' ) ? Int32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Int32Array === 'function' ) ? Int32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of twos-complement 32-bit signed integers in the platform byte order.\n*\n* @module @stdlib/array-int32\n*\n* @example\n* import ctor from '@stdlib/array-int32';\n*\n* var arr = new ctor( 10 );\n* // returns <Int32Array>\n*/\n\n// MODULES //\n\nimport hasInt32ArraySupport from '@stdlib/assert-has-int32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasInt32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInt32Array from '@stdlib/assert-is-int32array';\nimport INT32_MAX from '@stdlib/constants-int32-max';\nimport INT32_MIN from '@stdlib/constants-int32-min';\nimport GlobalInt32Array from './int32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Int32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Int32Array` support\n*\n* @example\n* var bool = hasInt32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasInt32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalInt32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalInt32Array( [ 1, 3.14, -3.14, INT32_MAX+1 ] );\n\t\tbool = (\n\t\t\tisInt32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&      // truncation\n\t\t\tarr[ 2 ] === -3 &&     // truncation\n\t\t\tarr[ 3 ] === INT32_MIN // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasInt32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 32-bit integer.\n*\n* @module @stdlib/constants-int32-min\n* @type {integer32}\n*\n* @example\n* import INT32_MIN from '@stdlib/constants-int32-min';\n* // returns -2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{31})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -2147483648\n*/\nvar INT32_MIN = -2147483648|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of twos-complement 32-bit signed integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasInt16Array = ( typeof Int16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an Int16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an Int16Array\n*\n* @example\n* var bool = isInt16Array( new Int16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isInt16Array( [] );\n* // returns false\n*/\nfunction isInt16Array( value ) {\n\treturn (\n\t\t( hasInt16Array && value instanceof Int16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Int16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInt16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 16-bit integer.\n*\n* @module @stdlib/constants-int16-max\n* @type {integer32}\n*\n* @example\n* import INT16_MAX from '@stdlib/constants-int16-max';\n* // returns 32767\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{15} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 32767\n*/\nvar INT16_MAX = 32767|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Int16Array === 'function' ) ? Int16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Int16Array === 'function' ) ? Int16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of twos-complement 16-bit signed integers in the platform byte order.\n*\n* @module @stdlib/array-int16\n*\n* @example\n* import ctor from '@stdlib/array-int16';\n*\n* var arr = new ctor( 10 );\n* // returns <Int16Array>\n*/\n\n// MODULES //\n\nimport hasInt16ArraySupport from '@stdlib/assert-has-int16array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasInt16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInt16Array from '@stdlib/assert-is-int16array';\nimport INT16_MAX from '@stdlib/constants-int16-max';\nimport INT16_MIN from '@stdlib/constants-int16-min';\nimport GlobalInt16Array from './int16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Int16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Int16Array` support\n*\n* @example\n* var bool = hasInt16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasInt16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalInt16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalInt16Array( [ 1, 3.14, -3.14, INT16_MAX+1 ] );\n\t\tbool = (\n\t\t\tisInt16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&      // truncation\n\t\t\tarr[ 2 ] === -3 &&     // truncation\n\t\t\tarr[ 3 ] === INT16_MIN // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasInt16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 16-bit integer.\n*\n* @module @stdlib/constants-int16-min\n* @type {integer32}\n*\n* @example\n* import INT16_MIN from '@stdlib/constants-int16-min';\n* // returns -32768\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{15})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 1000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -32768\n*/\nvar INT16_MIN = -32768|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT16_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of twos-complement 16-bit signed integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8ClampedArray = ( typeof Uint8ClampedArray === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8ClampedArray.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8ClampedArray\n*\n* @example\n* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8ClampedArray( [] );\n* // returns false\n*/\nfunction isUint8ClampedArray( value ) {\n\treturn (\n\t\t( hasUint8ClampedArray && value instanceof Uint8ClampedArray ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8ClampedArray]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8ClampedArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8ClampedArray === 'function' ) ? Uint8ClampedArray : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8ClampedArray === 'function' ) ? Uint8ClampedArray : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n*\n* @module @stdlib/array-uint8c\n*\n* @example\n* import ctor from '@stdlib/array-uint8c';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8ClampedArray>\n*/\n\n// MODULES //\n\nimport hasUint8ClampedArraySupport from '@stdlib/assert-has-uint8clampedarray-support'; // eslint-disable-line id-length\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ClampedArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8ClampedArray from '@stdlib/assert-is-uint8clampedarray';\nimport GlobalUint8ClampedArray from './uint8clampedarray.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8ClampedArray` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8ClampedArray` support\n*\n* @example\n* var bool = hasUint8ClampedArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ClampedArraySupport() { // eslint-disable-line id-length\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8ClampedArray !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalUint8ClampedArray( [ -1, 0, 1, 3.14, 4.99, 255, 256 ] );\n\t\tbool = (\n\t\t\tisUint8ClampedArray( arr ) &&\n\t\t\tarr[ 0 ] === 0 &&   // clamped\n\t\t\tarr[ 1 ] === 0 &&\n\t\t\tarr[ 2 ] === 1 &&\n\t\t\tarr[ 3 ] === 3 &&   // round to nearest\n\t\t\tarr[ 4 ] === 5 &&   // round to nearest\n\t\t\tarr[ 5 ] === 255 &&\n\t\t\tarr[ 6 ] === 255    // clamped\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ClampedArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasInt8Array = ( typeof Int8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an Int8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an Int8Array\n*\n* @example\n* var bool = isInt8Array( new Int8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isInt8Array( [] );\n* // returns false\n*/\nfunction isInt8Array( value ) {\n\treturn (\n\t\t( hasInt8Array && value instanceof Int8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Int8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInt8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 8-bit integer.\n*\n* @module @stdlib/constants-int8-max\n* @type {integer32}\n*\n* @example\n* import INT8_MAX from '@stdlib/constants-int8-max';\n* // returns 127\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* 2^{7} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 127\n*/\nvar INT8_MAX = 127|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Int8Array === 'function' ) ? Int8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Int8Array === 'function' ) ? Int8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of twos-complement 8-bit signed integers in the platform byte order.\n*\n* @module @stdlib/array-int8\n*\n* @example\n* import ctor from '@stdlib/array-int8';\n*\n* var arr = new ctor( 10 );\n* // returns <Int8Array>\n*/\n\n// MODULES //\n\nimport hasInt8ArraySupport from '@stdlib/assert-has-int8array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasInt8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInt8Array from '@stdlib/assert-is-int8array';\nimport INT8_MAX from '@stdlib/constants-int8-max';\nimport INT8_MIN from '@stdlib/constants-int8-min';\nimport GlobalInt8Array from './int8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Int8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Int8Array` support\n*\n* @example\n* var bool = hasInt8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasInt8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalInt8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalInt8Array( [ 1, 3.14, -3.14, INT8_MAX+1 ] );\n\t\tbool = (\n\t\t\tisInt8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&     // truncation\n\t\t\tarr[ 2 ] === -3 &&    // truncation\n\t\t\tarr[ 3 ] === INT8_MIN // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasInt8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 8-bit integer.\n*\n* @module @stdlib/constants-int8-min\n* @type {integer32}\n*\n* @example\n* import INT8_MIN from '@stdlib/constants-int8-min';\n* // returns -128\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* -(2^{7})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -128\n*/\nvar INT8_MIN = -128|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT8_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of twos-complement 8-bit signed integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-array-max-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an array-like object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is an array-like object\n*\n* @example\n* var bool = isArrayLikeObject( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( { 'length':10 } );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( 'beep' );\n* // returns false\n*/\nfunction isArrayLikeObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayLikeObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an even number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an even number\n*\n* @example\n* var bool = isEven( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( NaN );\n* // returns false\n*/\nfunction isEven( x ) {\n\treturn isInteger( x/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = 8; // 4 bytes per float32 x (1 real + 1 imag component)\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a value is a `Complex64Array`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `Complex64Array`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var bool = isComplex64Array( new Complex64Array( 10 ) );\n* // returns true\n*\n* bool = isComplex64Array( [] );\n* // returns false\n*/\nfunction isComplex64Array( value ) {\n\t// Note: the following is not robust and that is intentional. In this case, we are seeking a lower cost way to reasonably determine whether an input value is a `Complex64Array` in order to avoid walking the prototype chain and resolving constructors, which is necessary for robust identification of cross-realm instances. For more robust validation, see `@stdlib/assert/is-complex64array`.\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'Complex64Array' &&\n\t\tvalue.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isComplex64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = 16; // 8 bytes per float64 x (1 real + 1 imag component)\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a value is a `Complex128Array`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `Complex128Array`\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n*\n* var bool = isComplex128Array( new Complex128Array( 10 ) );\n* // returns true\n*\n* bool = isComplex128Array( [] );\n* // returns false\n*/\nfunction isComplex128Array( value ) {\n\t// Note: the following is not robust and that is intentional. In this case, we are seeking a lower cost way to reasonably determine whether an input value is a `Complex128Array` in order to avoid walking the prototype chain and resolving constructors, which is necessary for robust identification of cross-realm instances. For more robust validation, see `@stdlib/assert/is-complex128array`.\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'Complex128Array' &&\n\t\tvalue.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isComplex128Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\n/**\n* Tests for native `Symbol.iterator` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support\n*\n* @example\n* var bool = hasIteratorSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasIteratorSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol' &&\n\t\thasOwnProp( Symbol, 'iterator' ) &&\n\t\ttypeof Symbol.iterator === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasIteratorSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\n\n\n// MAIN //\n\n/**\n* Iterator symbol.\n*\n* @name IteratorSymbol\n* @constant\n* @type {(symbol|null)}\n*\n* @example\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\nvar IteratorSymbol = ( hasIteratorSymbolSupport() ) ? Symbol.iterator : null;\n\n\n// EXPORTS //\n\nexport default IteratorSymbol;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var re = realf( z );\n* // returns 5.0\n*/\nfunction realf( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default realf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\nfunction imagf( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imagf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\n\n\n// MAIN //\n\n/**\n* Reinterprets a `Complex64Array` as a `Float32Array`.\n*\n* @param {Complex64Array} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} `Float32Array` view\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var x = new Complex64Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float32Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction reinterpret( x, offset ) {\n\treturn new Float32Array( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), 2*(x.length-offset) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default reinterpret;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Reinterprets a `Complex128Array` as a `Float64Array`.\n*\n* @param {Complex128Array} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} `Float64Array` view\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n*\n* var x = new Complex128Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float64Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction reinterpret( x, offset ) {\n\treturn new Float64Array( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), 2*(x.length-offset) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default reinterpret;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tz = v.value;\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( realf( z ), imagf( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/* eslint-disable no-restricted-syntax, max-lines, no-invalid-this */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isObject from '@stdlib/assert-is-object';\nimport isArray from '@stdlib/assert-is-array';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isComplex64Array from '@stdlib/array-base-assert-is-complex64array';\nimport isComplex128Array from '@stdlib/array-base-assert-is-complex128array';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport Float32Array from '@stdlib/array-float32';\nimport Complex64 from '@stdlib/complex-float32';\nimport format from '@stdlib/string-format';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport floor from '@stdlib/math-base-special-floor';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport getter from '@stdlib/array-base-getter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\nimport fromArray from './from_array.js';\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = Float32Array.BYTES_PER_ELEMENT * 2;\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a complex typed array.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array\n*/\nfunction isComplexArray( value ) {\n\treturn (\n\t\tvalue instanceof Complex64Array ||\n\t\t(\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue !== null &&\n\t\t\t(\n\t\t\t\tvalue.constructor.name === 'Complex64Array' ||\n\t\t\t\tvalue.constructor.name === 'Complex128Array'\n\t\t\t) &&\n\t\t\ttypeof value._length === 'number' && // eslint-disable-line no-underscore-dangle\n\n\t\t\t// NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...\n\t\t\ttypeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle\n\t\t)\n\t);\n}\n\n/**\n* Returns a boolean indicating if a value is a complex typed array constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array constructor\n*/\nfunction isComplexArrayConstructor( value ) {\n\treturn (\n\t\tvalue === Complex64Array ||\n\n\t\t// NOTE: weaker test in order to avoid a circular dependency with Complex128Array...\n\t\tvalue.name === 'Complex128Array'\n\t);\n}\n\n/**\n* Retrieves a complex number from a complex number array buffer.\n*\n* @private\n* @param {Float32Array} buf - array buffer\n* @param {NonNegativeInteger} idx - element index\n* @returns {Complex64} complex number\n*/\nfunction getComplex64( buf, idx ) {\n\tidx *= 2;\n\treturn new Complex64( buf[ idx ], buf[ idx+1 ] );\n}\n\n\n// MAIN //\n\n/**\n* 64-bit complex number array constructor.\n*\n* @constructor\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {RangeError} ArrayBuffer byte length must be a multiple of `8`\n* @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two\n* @throws {TypeError} if provided only a single argument, must provide a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} byte offset must be a multiple of `8`\n* @throws {TypeError} view length must be a positive multiple of `8`\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex64Array} complex number array\n*\n* @example\n* var arr = new Complex64Array();\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Complex64Array( 2 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Complex64Array( [ 1.0, -1.0 ] );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Complex64Array( buf );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Complex64Array( buf, 8 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex64Array( buf, 8, 2 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction Complex64Array() {\n\tvar byteOffset;\n\tvar nargs;\n\tvar buf;\n\tvar len;\n\n\tnargs = arguments.length;\n\tif ( !(this instanceof Complex64Array) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new Complex64Array();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new Complex64Array( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new Complex64Array( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new Complex64Array( arguments[0], arguments[1], arguments[2] );\n\t}\n\t// Create the underlying data buffer...\n\tif ( nargs === 0 ) {\n\t\tbuf = new Float32Array( 0 ); // backward-compatibility\n\t} else if ( nargs === 1 ) {\n\t\tif ( isNonNegativeInteger( arguments[0] ) ) {\n\t\t\tbuf = new Float32Array( arguments[0]*2 );\n\t\t} else if ( isCollection( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tlen = buf.length;\n\n\t\t\t// If provided a \"generic\" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to \"normal\" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...\n\t\t\tif ( len && isArray( buf ) && isComplexLike( buf[0] ) ) {\n\t\t\t\tbuf = fromArray( new Float32Array( len*2 ), buf );\n\t\t\t\tif ( buf === null ) {\n\t\t\t\t\t// We failed and we are now forced to allocate a new array :-(\n\t\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t\t}\n\t\t\t\t\t// We failed, so fall back to directly setting values...\n\t\t\t\t\tbuf = new Float32Array( arguments[0] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( isComplex64Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret64( buf, 0 );\n\t\t\t\t} else if ( isComplex128Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret128( buf, 0 );\n\t\t\t\t} else if ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t}\n\t\t\t\tbuf = new Float32Array( buf );\n\t\t\t}\n\t\t} else if ( isArrayBuffer( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( !isInteger( buf.byteLength/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.', BYTES_PER_ELEMENT, buf.byteLength ) );\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf );\n\t\t} else if ( isObject( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tif ( !isFunction( buf[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tbuf = buf[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) ); // FIXME: `buf` is what is returned from above, NOT the original value\n\t\t\t}\n\t\t\tbuf = fromIterator( buf );\n\t\t\tif ( buf instanceof Error ) {\n\t\t\t\tthrow buf;\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arguments[0] ) );\n\t\t}\n\t} else {\n\t\tbuf = arguments[ 0 ];\n\t\tif ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tbyteOffset = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( !isInteger( byteOffset/BYTES_PER_ELEMENT ) ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Byte offset must be a multiple of %u. Value: `%u`.', BYTES_PER_ELEMENT, byteOffset ) );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\tlen = buf.byteLength - byteOffset;\n\t\t\tif ( !isInteger( len/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.', BYTES_PER_ELEMENT, len ) );\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf, byteOffset );\n\t\t} else {\n\t\t\tlen = arguments[ 2 ];\n\t\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t\t}\n\t\t\tif ( (len*BYTES_PER_ELEMENT) > (buf.byteLength-byteOffset) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len*BYTES_PER_ELEMENT ) );\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf, byteOffset, len*2 );\n\t\t}\n\t}\n\tsetReadOnly( this, '_buffer', buf );\n\tsetReadOnly( this, '_length', buf.length/2 );\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64Array\n* @readonly\n* @type {PositiveInteger}\n* @default 8\n*\n* @example\n* var nbytes = Complex64Array.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex64Array, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Complex64Array\n* @readonly\n* @type {string}\n* @default 'Complex64Array'\n*\n* @example\n* var str = Complex64Array.name;\n* // returns 'Complex64Array'\n*/\nsetReadOnly( Complex64Array, 'name', 'Complex64Array' );\n\n/**\n* Creates a new 64-bit complex number array from an array-like object or an iterable.\n*\n* @name from\n* @memberof Complex64Array\n* @type {Function}\n* @param {(Collection|Iterable)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex64Array} 64-bit complex number array\n*\n* @example\n* var arr = Complex64Array.from( [ 1.0, -1.0 ] );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = Complex64Array.from( [ new Complex64( 1.0, 1.0 ) ] );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function clbk( v ) {\n*     return new Complex64( realf(v)*2.0, imagf(v)*2.0 );\n* }\n*\n* var arr = Complex64Array.from( [ new Complex64( 1.0, 1.0 ) ], clbk );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*/\nsetReadOnly( Complex64Array, 'from', function from( src ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar out;\n\tvar buf;\n\tvar tmp;\n\tvar get;\n\tvar len;\n\tvar flg;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isComplexArray( src ) ) {\n\t\tlen = src.length;\n\t\tif ( clbk ) {\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, src.get( i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = realf( v );\n\t\t\t\t\tbuf[ j+1 ] = imagf( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isCollection( src ) ) {\n\t\tif ( clbk ) {\n\t\t\t// Note: array contents affect how we iterate over a provided data source. If only complex number objects, we can extract real and imaginary components. Otherwise, for non-complex number arrays (e.g., `Float64Array`, etc), we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.\n\n\t\t\tlen = src.length;\n\t\t\tif ( src.get && src.set ) {\n\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t} else {\n\t\t\t\tget = getter( 'default' );\n\t\t\t}\n\t\t\t// Detect whether we've been provided an array which returns complex number objects...\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( !isComplexLike( get( src, i ) ) ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If an array does not contain only complex number objects, then we assume interleaved real and imaginary components...\n\t\t\tif ( flg ) {\n\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. First argument must have a length which is a multiple of %u. Length: `%u`.', 2, len ) );\n\t\t\t\t}\n\t\t\t\tout = new this( len/2 );\n\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tbuf[ i ] = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// If an array contains only complex number objects, then we need to extract real and imaginary components...\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = realf( v );\n\t\t\t\t\tbuf[ j+1 ] = imagf( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( buf.next ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIterator( buf );\n\t\t}\n\t\tif ( tmp instanceof Error ) {\n\t\t\tthrow tmp;\n\t\t}\n\t\tlen = tmp.length / 2;\n\t\tout = new this( len );\n\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tbuf[ i ] = tmp[ i ];\n\t\t}\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n});\n\n/**\n* Creates a new 64-bit complex number array from a variable number of arguments.\n*\n* @name of\n* @memberof Complex64Array\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} 64-bit complex number array\n*\n* @example\n* var arr = Complex64Array.of( 1.0, 1.0, 1.0, 1.0 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nsetReadOnly( Complex64Array, 'of', function of() {\n\tvar args;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn new this( args );\n});\n\n/**\n* Returns an array element with support for both nonnegative and negative integer indices.\n*\n* @name at\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide an integer\n* @returns {(Complex64|void)} array element\n*\n* @example\n* var arr = new Complex64Array( 10 );\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = arr.at( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 0.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 9.0, -9.0 ], 9 );\n*\n* z = arr.at( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns -1.0\n*\n* z = arr.at( -1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 9.0\n*\n* im = imagf( z );\n* // returns -9.0\n*\n* z = arr.at( 100 );\n* // returns undefined\n*\n* z = arr.at( -100 );\n* // returns undefined\n*/\nsetReadOnly( Complex64Array.prototype, 'at', function at( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx < 0 ) {\n\t\tidx += this._length;\n\t}\n\tif ( idx < 0 || idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex64( this._buffer, idx );\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name buffer\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {ArrayBuffer}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var buf = arr.buffer;\n* // returns <ArrayBuffer>\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'buffer', function get() {\n\treturn this._buffer.buffer;\n});\n\n/**\n* Size (in bytes) of the array.\n*\n* @name byteLength\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var byteLength = arr.byteLength;\n* // returns 80\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'byteLength', function get() {\n\treturn this._buffer.byteLength;\n});\n\n/**\n* Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.\n*\n* @name byteOffset\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var byteOffset = arr.byteOffset;\n* // returns 0\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'byteOffset', function get() {\n\treturn this._buffer.byteOffset;\n});\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {PositiveInteger}\n* @default 8\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var nbytes = arr.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex64Array.prototype, 'BYTES_PER_ELEMENT', Complex64Array.BYTES_PER_ELEMENT );\n\n/**\n* Copies a sequence of elements within the array to the position starting at `target`.\n*\n* @name copyWithin\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} target - index at which to start copying elements\n* @param {integer} start - source index at which to copy elements from\n* @param {integer} [end] - source index at which to stop copying elements from\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} modified array\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 4 );\n*\n* // Set the array elements:\n* arr.set( new Complex64( 1.0, 1.0 ), 0 );\n* arr.set( new Complex64( 2.0, 2.0 ), 1 );\n* arr.set( new Complex64( 3.0, 3.0 ), 2 );\n* arr.set( new Complex64( 4.0, 4.0 ), 3 );\n*\n* // Copy the first two elements to the last two elements:\n* arr.copyWithin( 2, 0, 2 );\n*\n* // Get the last array element:\n* var z = arr.get( 3 );\n*\n* var re = realf( z );\n* // returns 2.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex64Array.prototype, 'copyWithin', function copyWithin( target, start ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\t// FIXME: prefer a functional `copyWithin` implementation which addresses lack of universal browser support (e.g., IE11 and Safari) or ensure that typed arrays are polyfilled\n\tif ( arguments.length === 2 ) {\n\t\tthis._buffer.copyWithin( target*2, start*2 );\n\t} else {\n\t\tthis._buffer.copyWithin( target*2, start*2, arguments[2]*2 );\n\t}\n\treturn this;\n});\n\n/**\n* Returns an iterator for iterating over array key-value pairs.\n*\n* @name entries\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Iterator} iterator\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = [\n*     new Complex64( 1.0, 1.0 ),\n*     new Complex64( 2.0, 2.0 ),\n*     new Complex64( 3.0, 3.0 )\n* ];\n* arr = new Complex64Array( arr );\n*\n* // Create an iterator:\n* var it = arr.entries();\n*\n* // Iterate over the key-value pairs...\n* var v = it.next().value;\n* // returns [ 0, <Complex64> ]\n*\n* v = it.next().value;\n* // returns [ 1, <Complex64> ]\n*\n* v = it.next().value;\n* // returns [ 2, <Complex64> ]\n*\n* var bool = it.next().done;\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'entries', function entries() {\n\tvar buffer;\n\tvar self;\n\tvar iter;\n\tvar len;\n\tvar FLG;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tself = this;\n\tbuffer = this._buffer;\n\tlen = this._length;\n\n\t// Initialize the iteration indices:\n\ti = -1;\n\tj = -2;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( ITERATOR_SYMBOL ) {\n\t\tsetReadOnly( iter, ITERATOR_SYMBOL, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar z;\n\t\ti += 1;\n\t\tif ( FLG || i >= len ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tj += 2;\n\t\tz = new Complex64( buffer[ j ], buffer[ j+1 ] );\n\t\treturn {\n\t\t\t'value': [ i, z ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn self.entries();\n\t}\n});\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @name every\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var bool = arr.every( predicate );\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'every', function every( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( !predicate.call( thisArg, getComplex64( buf, i ), i, this ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\n/**\n* Returns a modified typed array filled with a fill value.\n*\n* @name fill\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} value - fill value\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.fill( new Complex64( 1.0, 1.0 ), 1 );\n*\n* var z = arr.get( 1 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 1.0\n*\n* z = arr.get( 1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'fill', function fill( value, start, end ) {\n\tvar buf;\n\tvar len;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t} else {\n\t\t\tend = len;\n\t\t}\n\t} else {\n\t\tstart = 0;\n\t\tend = len;\n\t}\n\tre = realf( value );\n\tim = imagf( value );\n\tfor ( i = start; i < end; i++ ) {\n\t\tidx = 2*i;\n\t\tbuf[ idx ] = re;\n\t\tbuf[ idx+1 ] = im;\n\t}\n\treturn this;\n});\n\n/**\n* Returns a new array containing the elements of an array which pass a test implemented by a predicate function.\n*\n* @name filter\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex64Array} complex number array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.filter( predicate );\n* // returns <Complex64Array>\n*\n* var len = out.length;\n* // returns 1\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 2.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex64Array.prototype, 'filter', function filter( predicate, thisArg ) {\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tout = [];\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\tout.push( z );\n\t\t}\n\t}\n\treturn new this.constructor( out );\n});\n\n/**\n* Returns the first element in an array for which a predicate function returns a truthy value.\n*\n* @name find\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex64|void)} array element or undefined\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import Complex64 from '@stdlib/complex-float32';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.find( predicate );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'find', function find( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the first element in an array for which a predicate function returns a truthy value.\n*\n* @name findIndex\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var idx = arr.findIndex( predicate );\n* // returns 2\n*/\nsetReadOnly( Complex64Array.prototype, 'findIndex', function findIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLast\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex64|void)} array element or undefined\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import Complex64 from '@stdlib/complex-float32';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.findLast( predicate );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 3.0\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\nsetReadOnly( Complex64Array.prototype, 'findLast', function findLast( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLastIndex\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var idx = arr.findLastIndex( predicate );\n* // returns 1\n*/\nsetReadOnly( Complex64Array.prototype, 'findLastIndex', function findLastIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Invokes a function once for each array element.\n*\n* @name forEach\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - function invocation context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* function log( v, i ) {\n*     console.log( '%s: %s', i, v.toString() );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* arr.forEach( log );\n*/\nsetReadOnly( Complex64Array.prototype, 'forEach', function forEach( fcn, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tfcn.call( thisArg, z, i, this );\n\t}\n});\n\n/**\n* Returns an array element.\n*\n* @name get\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {NonNegativeInteger} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {(Complex64|void)} array element\n*\n* @example\n* var arr = new Complex64Array( 10 );\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = arr.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 0.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns -1.0\n*\n* z = arr.get( 100 );\n* // returns undefined\n*/\nsetReadOnly( Complex64Array.prototype, 'get', function get( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isNonNegativeInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex64( this._buffer, idx );\n});\n\n/**\n* Returns a boolean indicating whether an array includes a provided value.\n*\n* @name includes\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - search element\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {boolean} boolean indicating whether an array includes a provided value\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var bool = arr.includes( new Complex64( 3.0, -3.0 ) );\n* // returns true\n*\n* bool = arr.includes( new Complex64( 3.0, -3.0 ), 3 );\n* // returns false\n*\n* bool = arr.includes( new Complex64( 4.0, -4.0 ), -3 );\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'includes', function includes( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = realf( searchElement );\n\tim = imagf( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Returns the first index at which a given element can be found.\n*\n* @name indexOf\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 10 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var idx = arr.indexOf( new Complex64( 3.0, -3.0 ) );\n* // returns 2\n*\n* idx = arr.indexOf( new Complex64( 3.0, -3.0 ), 3 );\n* // returns -1\n*\n* idx = arr.indexOf( new Complex64( 4.0, -4.0 ), -3 );\n* // returns -1\n*/\nsetReadOnly( Complex64Array.prototype, 'indexOf', function indexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = realf( searchElement );\n\tim = imagf( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns a new string by concatenating all array elements.\n*\n* @name join\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {string} [separator=','] - element separator\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a string\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex64Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.join();\n* // returns '1 + 1i,2 + 2i'\n*\n* str = arr.join( '/' );\n* // returns '1 + 1i/2 + 2i'\n*/\nsetReadOnly( Complex64Array.prototype, 'join', function join( separator ) {\n\tvar out;\n\tvar buf;\n\tvar sep;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( arguments.length === 0 ) {\n\t\tsep = ',';\n\t} else if ( isString( separator ) ) {\n\t\tsep = separator;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', separator ) );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex64( buf, i ).toString() );\n\t}\n\treturn out.join( sep );\n});\n\n/**\n* Returns the last index at which a given element can be found.\n*\n* @name lastIndexOf\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex] - index at which to start searching backward (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 3.0, -3.0 ], 4 );\n*\n* var idx = arr.lastIndexOf( new Complex64( 3.0, -3.0 ) );\n* // returns 4\n*\n* idx = arr.lastIndexOf( new Complex64( 3.0, -3.0 ), 3 );\n* // returns 2\n*\n* idx = arr.lastIndexOf( new Complex64( 5.0, -5.0 ), 3 );\n* // returns -1\n*\n* idx = arr.lastIndexOf( new Complex64( 2.0, -2.0 ), -3 );\n* // returns 1\n*/\nsetReadOnly( Complex64Array.prototype, 'lastIndexOf', function lastIndexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex >= this._length ) {\n\t\t\tfromIndex = this._length - 1;\n\t\t} else if ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t}\n\t} else {\n\t\tfromIndex = this._length - 1;\n\t}\n\tre = realf( searchElement );\n\tim = imagf( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Number of array elements.\n*\n* @name length\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var len = arr.length;\n* // returns 10\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Returns a new array with each element being the result of a provided callback function.\n*\n* @name map\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex64Array} complex number array\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( v, i ) {\n*     return new Complex64( 2.0*realf( v ), 2.0*imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.map( scale );\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 2\n*\n* var im = imagf( z );\n* // returns -2\n*/\nsetReadOnly( Complex64Array.prototype, 'map', function map( fcn, thisArg ) {\n\tvar outbuf;\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar v;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tout = new this.constructor( this._length );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tv = fcn.call( thisArg, getComplex64( buf, i ), i, this );\n\t\tif ( isComplexLike( v ) ) {\n\t\t\toutbuf[ 2*i ] = realf( v );\n\t\t\toutbuf[ (2*i)+1 ] = imagf( v );\n\t\t} else if ( isArrayLikeObject( v ) && v.length === 2 ) {\n\t\t\toutbuf[ 2*i ] = v[ 0 ];\n\t\t\toutbuf[ (2*i)+1 ] = v[ 1 ];\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t}\n\t}\n\treturn out;\n});\n\n/**\n* Applies a provided callback function to each element of the array, in order, passing in the return value from the calculation on the preceding element and returning the accumulated result upon completion.\n*\n* @name reduce\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} reducer - callback function\n* @param {*} [initialValue] - initial value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @throws {Error} if not provided an initial value, the array must have at least one element\n* @returns {*} accumulated result\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import caddf from '@stdlib/math-base-ops-caddf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.reduce( caddf );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 6.0\n*\n* var im = imagf( z );\n* // returns 6.0\n*/\nsetReadOnly( Complex64Array.prototype, 'reduce', function reduce( reducer, initialValue ) {\n\tvar buf;\n\tvar acc;\n\tvar len;\n\tvar v;\n\tvar i;\n\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( reducer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', reducer ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tacc = initialValue;\n\t\ti = 0;\n\t} else {\n\t\tif ( len === 0 ) {\n\t\t\tthrow new Error( 'invalid operation. If not provided an initial value, an array must contain at least one element.' );\n\t\t}\n\t\tacc = getComplex64( buf, 0 );\n\t\ti = 1;\n\t}\n\tfor ( ; i < len; i++ ) {\n\t\tv = getComplex64( buf, i );\n\t\tacc = reducer( acc, v, i, this );\n\t}\n\treturn acc;\n});\n\n/**\n* Reverses an array in-place.\n*\n* @name reverse\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} reversed array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.reverse();\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 3.0\n*\n* var im = imagf( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'reverse', function reverse() {\n\tvar buf;\n\tvar tmp;\n\tvar len;\n\tvar N;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tbuf = this._buffer;\n\tN = floor( len / 2 );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tj = len - i - 1;\n\t\ttmp = buf[ (2*i) ];\n\t\tbuf[ (2*i) ] = buf[ (2*j) ];\n\t\tbuf[ (2*j) ] = tmp;\n\t\ttmp = buf[ (2*i)+1 ];\n\t\tbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t\tbuf[ (2*j)+1 ] = tmp;\n\t}\n\treturn this;\n});\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:\n*\n*     ```text\n*     buf:                ---------------------\n*     src: ---------------------\n*     ```\n*\n*     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.\n*\n*     In the other overlapping scenario,\n*\n*     ```text\n*     buf: ---------------------\n*     src:                ---------------------\n*     ```\n*\n*     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values, as intended.\n*\n* @name set\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n* @param {NonNegativeInteger} [i=0] - element index at which to start writing values\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {RangeError} target array lacks sufficient storage to accommodate source values\n* @returns {void}\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 10 );\n*\n* var z = arr.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 0.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns -1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'set', function set( value ) {\n\t/* eslint-disable no-underscore-dangle */\n\tvar sbuf;\n\tvar idx;\n\tvar buf;\n\tvar tmp;\n\tvar flg;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tif ( arguments.length > 1 ) {\n\t\tidx = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx ) );\n\t\t}\n\t} else {\n\t\tidx = 0;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\tif ( idx >= this._length ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx ) );\n\t\t}\n\t\tidx *= 2;\n\t\tbuf[ idx ] = realf( value );\n\t\tbuf[ idx+1 ] = imagf( value );\n\t\treturn;\n\t}\n\tif ( isComplexArray( value ) ) {\n\t\tN = value._length;\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tsbuf = value._buffer;\n\n\t\t// Check for overlapping memory...\n\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\tif (\n\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t(\n\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t)\n\t\t) {\n\t\t\t// We need to copy source values...\n\t\t\ttmp = new Float32Array( sbuf.length );\n\t\t\tfor ( i = 0; i < sbuf.length; i++ ) {\n\t\t\t\ttmp[ i ] = sbuf[ i ];\n\t\t\t}\n\t\t\tsbuf = tmp;\n\t\t}\n\t\tidx *= 2;\n\t\tj = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\tidx += 2; // stride\n\t\t\tj += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tif ( isCollection( value ) ) {\n\t\t// Detect whether we've been provided an array of complex numbers...\n\t\tN = value.length;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( !isComplexLike( value[ i ] ) ) {\n\t\t\t\tflg = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...\n\t\tif ( flg ) {\n\t\t\tif ( !isEven( N ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', N ) );\n\t\t\t}\n\t\t\tif ( idx+(N/2) > this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t}\n\t\t\tsbuf = value;\n\n\t\t\t// Check for overlapping memory...\n\t\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\t\tif (\n\t\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t\t(\n\t\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// We need to copy source values...\n\t\t\t\ttmp = new Float32Array( N );\n\t\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\t\ttmp[ i ] = sbuf[ i ]; // TODO: handle accessor arrays\n\t\t\t\t}\n\t\t\t\tsbuf = tmp;\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tN /= 2;\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\t\tidx += 2; // stride\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t// If an array contains only complex numbers, then we need to extract real and imaginary components...\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tidx *= 2;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = value[ i ];\n\t\t\tbuf[ idx ] = realf( v );\n\t\t\tbuf[ idx+1 ] = imagf( v );\n\t\t\tidx += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.', value ) );\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Copies a portion of a typed array to a new typed array.\n*\n* @name slice\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex64Array} complex number array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var out = arr.slice();\n* // returns <Complex64Array>\n*\n* var len = out.length;\n* // returns 5\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -1.0\n*\n* z = out.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 5.0\n*\n* im = imagf( z );\n* // returns -5.0\n*\n* out = arr.slice( 1, -2 );\n* // returns <Complex64Array>\n*\n* len = out.length;\n* // returns 2\n*\n* z = out.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns -2.0\n*\n* z = out.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 3.0\n*\n* im = imagf( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex64Array.prototype, 'slice', function slice( start, end ) {\n\tvar outlen;\n\tvar outbuf;\n\tvar out;\n\tvar idx;\n\tvar buf;\n\tvar len;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tstart = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( start < end ) {\n\t\toutlen = end - start;\n\t} else {\n\t\toutlen = 0;\n\t}\n\tout = new this.constructor( outlen );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < outlen; i++ ) {\n\t\tidx = 2*(i+start);\n\t\toutbuf[ 2*i ] = buf[ idx ];\n\t\toutbuf[ (2*i)+1 ] = buf[ idx+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Tests whether at least one element in an array passes a test implemented by a predicate function.\n*\n* @name some\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether at least one element passes a test\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var bool = arr.some( predicate );\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'some', function some( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( predicate.call( thisArg, getComplex64( buf, i ), i, this ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Creates a new typed array view over the same underlying `ArrayBuffer` and with the same underlying data type as the host array.\n*\n* @name subarray\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex64Array} subarray\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var subarr = arr.subarray();\n* // returns <Complex64Array>\n*\n* var len = subarr.length;\n* // returns 5\n*\n* var z = subarr.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -1.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 5.0\n*\n* im = imagf( z );\n* // returns -5.0\n*\n* subarr = arr.subarray( 1, -2 );\n* // returns <Complex64Array>\n*\n* len = subarr.length;\n* // returns 2\n*\n* z = subarr.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns -2.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 3.0\n*\n* im = imagf( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex64Array.prototype, 'subarray', function subarray( begin, end ) {\n\tvar offset;\n\tvar buf;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tbegin = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( begin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', begin ) );\n\t\t}\n\t\tif ( begin < 0 ) {\n\t\t\tbegin += len;\n\t\t\tif ( begin < 0 ) {\n\t\t\t\tbegin = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( begin >= len ) {\n\t\tlen = 0;\n\t\toffset = buf.byteLength;\n\t} else if ( begin >= end ) {\n\t\tlen = 0;\n\t\toffset = buf.byteOffset + (begin*BYTES_PER_ELEMENT);\n\t} else {\n\t\tlen = end - begin;\n\t\toffset = buf.byteOffset + ( begin*BYTES_PER_ELEMENT );\n\t}\n\treturn new this.constructor( buf.buffer, offset, ( len < 0 ) ? 0 : len );\n});\n\n/**\n* Returns a new typed array containing the elements in reversed order.\n*\n* @name toReversed\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} reversed array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.toReversed();\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 3.0\n*\n* var im = imagf( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'toReversed', function toReversed() {\n\tvar outbuf;\n\tvar out;\n\tvar len;\n\tvar buf;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tout = new this.constructor( len );\n\tbuf = this._buffer;\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < len; i++ ) {\n\t\tj = len - i - 1;\n\t\toutbuf[ (2*i) ] = buf[ (2*j) ];\n\t\toutbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Serializes an array as a string.\n*\n* @name toString\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex64Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.toString();\n* // returns '1 + 1i,2 + 2i'\n*/\nsetReadOnly( Complex64Array.prototype, 'toString', function toString() {\n\tvar out;\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex64( buf, i ).toString() );\n\t}\n\treturn out.join( ',' );\n});\n\n/**\n* Returns a new typed array with the element at a provided index replaced with a provided value.\n*\n* @name with\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} index - element index\n* @param {ComplexLike} value - new value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {TypeError} second argument must be a complex number\n* @returns {Complex64Array} new typed array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.with( 0, new Complex64( 4.0, 4.0 ) );\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 4.0\n*\n* var im = imagf( z );\n* // returns 4.0\n*/\nsetReadOnly( Complex64Array.prototype, 'with', function copyWith( index, value ) {\n\tvar buf;\n\tvar out;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( index ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', index ) );\n\t}\n\tlen = this._length;\n\tif ( index < 0 ) {\n\t\tindex += len;\n\t}\n\tif ( index < 0 || index >= len ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%s`.', index ) );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tout = new this.constructor( this._buffer );\n\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tbuf[ 2*index ] = realf( value );\n\tbuf[ (2*index)+1 ] = imagf( value );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Complex64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Returns a strided array of real and imaginary components.\n*\n* @private\n* @param {Float32Array} buf - output array\n* @param {Array} arr - array containing complex numbers\n* @returns {(Float32Array|null)} output array or null\n*/\nfunction fromArray( buf, arr ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tlen = arr.length;\n\tj = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arr[ i ];\n\t\tif ( !isComplexLike( v ) ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf[ j ] = realf( v );\n\t\tbuf[ j+1 ] = imagf( v );\n\t\tj += 2; // stride\n\t}\n\treturn buf;\n}\n\n\n// EXPORTS //\n\nexport default fromArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default real;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport format from '@stdlib/string-format';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tz = v.value;\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( real( z ), imag( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tz = clbk.call( thisArg, v.value, i );\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( realf( z ), imagf( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/* eslint-disable no-restricted-syntax, max-lines, no-invalid-this */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isObject from '@stdlib/assert-is-object';\nimport isArray from '@stdlib/assert-is-array';\nimport isString from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isComplex64Array from '@stdlib/array-base-assert-is-complex64array';\nimport isComplex128Array from '@stdlib/array-base-assert-is-complex128array';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport Float64Array from '@stdlib/array-float64';\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport floor from '@stdlib/math-base-special-floor';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport getter from '@stdlib/array-base-getter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport format from '@stdlib/string-format';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\nimport fromArray from './from_array.js';\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = Float64Array.BYTES_PER_ELEMENT * 2;\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a complex typed array.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array\n*/\nfunction isComplexArray( value ) {\n\treturn (\n\t\tvalue instanceof Complex128Array ||\n\t\t(\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue !== null &&\n\t\t\t(\n\t\t\t\tvalue.constructor.name === 'Complex64Array' ||\n\t\t\t\tvalue.constructor.name === 'Complex128Array'\n\t\t\t) &&\n\t\t\ttypeof value._length === 'number' && // eslint-disable-line no-underscore-dangle\n\n\t\t\t// NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...\n\t\t\ttypeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle\n\t\t)\n\t);\n}\n\n/**\n* Returns a boolean indicating if a value is a complex typed array constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array constructor\n*/\nfunction isComplexArrayConstructor( value ) {\n\treturn (\n\t\tvalue === Complex128Array ||\n\n\t\t// NOTE: weaker test in order to avoid a circular dependency with Complex64Array...\n\t\tvalue.name === 'Complex64Array'\n\t);\n}\n\n/**\n* Retrieves a complex number from a complex number array buffer.\n*\n* @private\n* @param {Float64Array} buf - array buffer\n* @param {NonNegativeInteger} idx - element index\n* @returns {Complex128} complex number\n*/\nfunction getComplex128( buf, idx ) {\n\tidx *= 2;\n\treturn new Complex128( buf[ idx ], buf[ idx+1 ] );\n}\n\n\n// MAIN //\n\n/**\n* 128-bit complex number array constructor.\n*\n* @constructor\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {RangeError} ArrayBuffer byte length must be a multiple of `16`\n* @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two\n* @throws {TypeError} if provided only a single argument, must provide a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} byte offset must be a multiple of `16`\n* @throws {TypeError} view length must be a positive multiple of `16`\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex128Array} complex number array\n*\n* @example\n* var arr = new Complex128Array();\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Complex128Array( 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Complex128Array( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf, 16 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = new Complex128Array( buf, 16, 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction Complex128Array() {\n\tvar byteOffset;\n\tvar nargs;\n\tvar buf;\n\tvar len;\n\n\tnargs = arguments.length;\n\tif ( !(this instanceof Complex128Array) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new Complex128Array();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new Complex128Array( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new Complex128Array( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new Complex128Array( arguments[0], arguments[1], arguments[2] );\n\t}\n\t// Create the underlying data buffer...\n\tif ( nargs === 0 ) {\n\t\tbuf = new Float64Array( 0 ); // backward-compatibility\n\t} else if ( nargs === 1 ) {\n\t\tif ( isNonNegativeInteger( arguments[0] ) ) {\n\t\t\tbuf = new Float64Array( arguments[0]*2 );\n\t\t} else if ( isCollection( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tlen = buf.length;\n\n\t\t\t// If provided a \"generic\" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to \"normal\" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...\n\t\t\tif ( len && isArray( buf ) && isComplexLike( buf[0] ) ) {\n\t\t\t\tbuf = fromArray( new Float64Array( len*2 ), buf );\n\t\t\t\tif ( buf === null ) {\n\t\t\t\t\t// We failed and we are now forced to allocate a new array :-(\n\t\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t\t}\n\t\t\t\t\t// We failed, so fall back to directly setting values...\n\t\t\t\t\tbuf = new Float64Array( arguments[0] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( isComplex64Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret64( buf, 0 );\n\t\t\t\t} else if ( isComplex128Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret128( buf, 0 );\n\t\t\t\t} else if ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t}\n\t\t\t\tbuf = new Float64Array( buf );\n\t\t\t}\n\t\t} else if ( isArrayBuffer( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( !isInteger( buf.byteLength/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.', BYTES_PER_ELEMENT, buf.byteLength ) );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf );\n\t\t} else if ( isObject( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tif ( !isFunction( buf[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tbuf = buf[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tbuf = fromIterator( buf );\n\t\t\tif ( buf instanceof Error ) {\n\t\t\t\tthrow buf;\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arguments[0] ) );\n\t\t}\n\t} else {\n\t\tbuf = arguments[ 0 ];\n\t\tif ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tbyteOffset = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( !isInteger( byteOffset/BYTES_PER_ELEMENT ) ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Byte offset must be a multiple of %u. Value: `%u`.', BYTES_PER_ELEMENT, byteOffset ) );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\tlen = buf.byteLength - byteOffset;\n\t\t\tif ( !isInteger( len/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.', BYTES_PER_ELEMENT, len ) );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf, byteOffset );\n\t\t} else {\n\t\t\tlen = arguments[ 2 ];\n\t\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t\t}\n\t\t\tif ( (len*BYTES_PER_ELEMENT) > (buf.byteLength-byteOffset) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len*BYTES_PER_ELEMENT ) );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf, byteOffset, len*2 );\n\t\t}\n\t}\n\tsetReadOnly( this, '_buffer', buf );\n\tsetReadOnly( this, '_length', buf.length/2 );\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128Array\n* @readonly\n* @type {PositiveInteger}\n* @default 16\n*\n* @example\n* var nbytes = Complex128Array.BYTES_PER_ELEMENT;\n* // returns 16\n*/\nsetReadOnly( Complex128Array, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Complex128Array\n* @readonly\n* @type {string}\n* @default 'Complex128Array'\n*\n* @example\n* var name = Complex128Array.name;\n* // returns 'Complex128Array'\n*/\nsetReadOnly( Complex128Array, 'name', 'Complex128Array' );\n\n/**\n* Creates a new 128-bit complex number array from an array-like object or an iterable.\n*\n* @name from\n* @memberof Complex128Array\n* @type {Function}\n* @param {(Collection|Object)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex128Array} 128-bit complex number array\n*\n* @example\n* var arr = Complex128Array.from( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function clbk( v ) {\n*     return new Complex128( real(v)*2.0, imag(v)*2.0 );\n* }\n*\n* var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ], clbk );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*/\nsetReadOnly( Complex128Array, 'from', function from( src ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar out;\n\tvar buf;\n\tvar tmp;\n\tvar get;\n\tvar len;\n\tvar flg;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isComplexArray( src ) ) {\n\t\tlen = src.length;\n\t\tif ( clbk ) {\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, src.get( i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = real( v );\n\t\t\t\t\tbuf[ j+1 ] = imag( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isCollection( src ) ) {\n\t\tif ( clbk ) {\n\t\t\t// Note: array contents affect how we iterate over a provided data source. If only complex number objects, we can extract real and imaginary components. Otherwise, for non-complex number arrays (e.g., `Float64Array`, etc), we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.\n\n\t\t\tlen = src.length;\n\t\t\tif ( src.get && src.set ) {\n\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t} else {\n\t\t\t\tget = getter( 'default' );\n\t\t\t}\n\t\t\t// Detect whether we've been provided an array which returns complex number objects...\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( !isComplexLike( get( src, i ) ) ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If an array does not contain only complex number objects, then we assume interleaved real and imaginary components...\n\t\t\tif ( flg ) {\n\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. First argument must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t}\n\t\t\t\tout = new this( len/2 );\n\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tbuf[ i ] = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// If an array contains only complex number objects, then we need to extract real and imaginary components...\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = real( v );\n\t\t\t\t\tbuf[ j+1 ] = imag( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( buf.next ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIterator( buf );\n\t\t}\n\t\tif ( tmp instanceof Error ) {\n\t\t\tthrow tmp;\n\t\t}\n\t\tlen = tmp.length / 2;\n\t\tout = new this( len );\n\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tbuf[ i ] = tmp[ i ];\n\t\t}\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n});\n\n/**\n* Creates a new 128-bit complex number array from a variable number of arguments.\n*\n* @name of\n* @memberof Complex128Array\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} 128-bit complex number array\n*\n* @example\n* var arr = Complex128Array.of( 1.0, 1.0, 1.0, 1.0 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nsetReadOnly( Complex128Array, 'of', function of() {\n\tvar args;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn new this( args );\n});\n\n/**\n* Returns an array element with support for both nonnegative and negative integer indices.\n*\n* @name at\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide an integer\n* @returns {(Complex128|void)} array element\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 10 );\n*\n* var z = arr.at( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 9.0, -9.0 ], 9 );\n*\n* z = arr.at( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*\n* z = arr.at( -1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 9.0\n*\n* im = imag( z );\n* // returns -9.0\n*\n* z = arr.at( 100 );\n* // returns undefined\n*\n* z = arr.at( -100 );\n* // returns undefined\n*/\nsetReadOnly( Complex128Array.prototype, 'at', function at( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx < 0 ) {\n\t\tidx += this._length;\n\t}\n\tif ( idx < 0 || idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex128( this._buffer, idx );\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name buffer\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {ArrayBuffer}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var buf = arr.buffer;\n* // returns <ArrayBuffer>\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'buffer', function get() {\n\treturn this._buffer.buffer;\n});\n\n/**\n* Size (in bytes) of the array.\n*\n* @name byteLength\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var byteLength = arr.byteLength;\n* // returns 160\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'byteLength', function get() {\n\treturn this._buffer.byteLength;\n});\n\n/**\n* Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.\n*\n* @name byteOffset\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var byteOffset = arr.byteOffset;\n* // returns 0\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'byteOffset', function get() {\n\treturn this._buffer.byteOffset;\n});\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {PositiveInteger}\n* @default 16\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var nbytes = arr.BYTES_PER_ELEMENT;\n* // returns 16\n*/\nsetReadOnly( Complex128Array.prototype, 'BYTES_PER_ELEMENT', Complex128Array.BYTES_PER_ELEMENT );\n\n/**\n* Copies a sequence of elements within the array to the position starting at `target`.\n*\n* @name copyWithin\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} target - index at which to start copying elements\n* @param {integer} start - source index at which to copy elements from\n* @param {integer} [end] - source index at which to stop copying elements from\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} modified array\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 4 );\n*\n* // Set the array elements:\n* arr.set( new Complex128( 1.0, 1.0 ), 0 );\n* arr.set( new Complex128( 2.0, 2.0 ), 1 );\n* arr.set( new Complex128( 3.0, 3.0 ), 2 );\n* arr.set( new Complex128( 4.0, 4.0 ), 3 );\n*\n* // Copy the first two elements to the last two elements:\n* arr.copyWithin( 2, 0, 2 );\n*\n* // Get the last array element:\n* var z = arr.get( 3 );\n*\n* var re = real( z );\n* // returns 2.0\n*\n* var im = imag( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex128Array.prototype, 'copyWithin', function copyWithin( target, start ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\t// FIXME: prefer a functional `copyWithin` implementation which addresses lack of universal browser support (e.g., IE11 and Safari) or ensure that typed arrays are polyfilled\n\tif ( arguments.length === 2 ) {\n\t\tthis._buffer.copyWithin( target*2, start*2 );\n\t} else {\n\t\tthis._buffer.copyWithin( target*2, start*2, arguments[2]*2 );\n\t}\n\treturn this;\n});\n\n/**\n* Returns an iterator for iterating over array key-value pairs.\n*\n* @name entries\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Iterator} iterator\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = [\n*     new Complex128( 1.0, 1.0 ),\n*     new Complex128( 2.0, 2.0 ),\n*     new Complex128( 3.0, 3.0 )\n* ];\n* arr = new Complex128Array( arr );\n*\n* // Create an iterator:\n* var it = arr.entries();\n*\n* // Iterate over the key-value pairs...\n* var v = it.next().value;\n* // returns [ 0, <Complex128> ]\n*\n* v = it.next().value;\n* // returns [ 1, <Complex128> ]\n*\n* v = it.next().value;\n* // returns [ 2, <Complex128> ]\n*\n* var bool = it.next().done;\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'entries', function entries() {\n\tvar buffer;\n\tvar self;\n\tvar iter;\n\tvar len;\n\tvar FLG;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tself = this;\n\tbuffer = this._buffer;\n\tlen = this._length;\n\n\t// Initialize the iteration indices:\n\ti = -1;\n\tj = -2;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( ITERATOR_SYMBOL ) {\n\t\tsetReadOnly( iter, ITERATOR_SYMBOL, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar z;\n\t\ti += 1;\n\t\tif ( FLG || i >= len ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tj += 2;\n\t\tz = new Complex128( buffer[ j ], buffer[ j+1 ] );\n\t\treturn {\n\t\t\t'value': [ i, z ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn self.entries();\n\t}\n});\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @name every\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var bool = arr.every( predicate );\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'every', function every( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( !predicate.call( thisArg, getComplex128( buf, i ), i, this ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\n/**\n* Returns a modified typed array filled with a fill value.\n*\n* @name fill\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} value - fill value\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.fill( new Complex128( 1.0, 1.0 ), 1 );\n*\n* var z = arr.get( 1 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 1.0\n*\n* z = arr.get( 1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'fill', function fill( value, start, end ) {\n\tvar buf;\n\tvar len;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t} else {\n\t\t\tend = len;\n\t\t}\n\t} else {\n\t\tstart = 0;\n\t\tend = len;\n\t}\n\tre = real( value );\n\tim = imag( value );\n\tfor ( i = start; i < end; i++ ) {\n\t\tidx = 2*i;\n\t\tbuf[ idx ] = re;\n\t\tbuf[ idx+1 ] = im;\n\t}\n\treturn this;\n});\n\n/**\n* Returns a new array containing the elements of an array which pass a test implemented by a predicate function.\n*\n* @name filter\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex128Array} complex number array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.filter( predicate );\n* // returns <Complex128Array>\n*\n* var len = out.length;\n* // returns 1\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 2.0\n*\n* var im = imag( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex128Array.prototype, 'filter', function filter( predicate, thisArg ) {\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tout = [];\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\tout.push( z );\n\t\t}\n\t}\n\treturn new this.constructor( out );\n});\n\n/**\n* Returns the first element in an array for which a predicate function returns a truthy value.\n*\n* @name find\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex128|void)} array element or undefined\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.find( predicate );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'find', function find( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the first element in an array for which a predicate function returns a truthy value.\n*\n* @name findIndex\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var idx = arr.findIndex( predicate );\n* // returns 2\n*/\nsetReadOnly( Complex128Array.prototype, 'findIndex', function findIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLast\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex128|void)} array element or undefined\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.findLast( predicate );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 3.0\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nsetReadOnly( Complex128Array.prototype, 'findLast', function findLast( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLastIndex\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var idx = arr.findLastIndex( predicate );\n* // returns 1\n*/\nsetReadOnly( Complex128Array.prototype, 'findLastIndex', function findLastIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Invokes a function once for each array element.\n*\n* @name forEach\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - function invocation context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* function log( v, i ) {\n*     console.log( '%s: %s', i, v.toString() );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* arr.forEach( log );\n*/\nsetReadOnly( Complex128Array.prototype, 'forEach', function forEach( fcn, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tfcn.call( thisArg, z, i, this );\n\t}\n});\n\n/**\n* Returns an array element.\n*\n* @name get\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {NonNegativeInteger} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {(Complex128|void)} array element\n*\n* @example\n* var arr = new Complex128Array( 10 );\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = arr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*\n* z = arr.get( 100 );\n* // returns undefined\n*/\nsetReadOnly( Complex128Array.prototype, 'get', function get( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isNonNegativeInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex128( this._buffer, idx );\n});\n\n/**\n* Number of array elements.\n*\n* @name length\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var len = arr.length;\n* // returns 10\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Returns a boolean indicating whether an array includes a provided value.\n*\n* @name includes\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - search element\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {boolean} boolean indicating whether an array includes a provided value\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var bool = arr.includes( new Complex128( 3.0, -3.0 ) );\n* // returns true\n*\n* bool = arr.includes( new Complex128( 3.0, -3.0 ), 3 );\n* // returns false\n*\n* bool = arr.includes( new Complex128( 4.0, -4.0 ), -3 );\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'includes', function includes( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Returns the first index at which a given element can be found.\n*\n* @name indexOf\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var idx = arr.indexOf( new Complex128( 3.0, -3.0 ) );\n* // returns 2\n*\n* idx = arr.indexOf( new Complex128( 3.0, -3.0 ), 3 );\n* // returns -1\n*\n* idx = arr.indexOf( new Complex128( 4.0, -4.0 ), -3 );\n* // returns 3\n*/\nsetReadOnly( Complex128Array.prototype, 'indexOf', function indexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns a new string by concatenating all array elements.\n*\n* @name join\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {string} [separator=','] - element separator\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a string\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex128Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.join();\n* // returns '1 + 1i,2 + 2i'\n*\n* str = arr.join( '/' );\n* // returns '1 + 1i/2 + 2i'\n*/\nsetReadOnly( Complex128Array.prototype, 'join', function join( separator ) {\n\tvar out;\n\tvar buf;\n\tvar sep;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( arguments.length === 0 ) {\n\t\tsep = ',';\n\t} else if ( isString( separator ) ) {\n\t\tsep = separator;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', separator ) );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex128( buf, i ).toString() );\n\t}\n\treturn out.join( sep );\n});\n\n/**\n* Returns the last index at which a given element can be found.\n*\n* @name lastIndexOf\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex] - index at which to start searching backward (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 3.0, -3.0 ], 4 );\n*\n* var idx = arr.lastIndexOf( new Complex128( 3.0, -3.0 ) );\n* // returns 4\n*\n* idx = arr.lastIndexOf( new Complex128( 3.0, -3.0 ), 3 );\n* // returns 2\n*\n* idx = arr.lastIndexOf( new Complex128( 5.0, -5.0 ), 3 );\n* // returns -1\n*\n* idx = arr.lastIndexOf( new Complex128( 2.0, -2.0 ), -3 );\n* // returns 1\n*/\nsetReadOnly( Complex128Array.prototype, 'lastIndexOf', function lastIndexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex >= this._length ) {\n\t\t\tfromIndex = this._length - 1;\n\t\t} else if ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t}\n\t} else {\n\t\tfromIndex = this._length - 1;\n\t}\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns a new array with each element being the result of a provided callback function.\n*\n* @name map\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex128Array} complex number array\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function scale( v, i ) {\n*     return new Complex128( 2.0*real( v ), 2.0*imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.map( scale );\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 2.0\n*\n* var im = imag( z );\n* // returns -2.0\n*/\nsetReadOnly( Complex128Array.prototype, 'map', function map( fcn, thisArg ) {\n\tvar outbuf;\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar v;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tout = new this.constructor( this._length );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tv = fcn.call( thisArg, getComplex128( buf, i ), i, this );\n\t\tif ( isComplexLike( v ) ) {\n\t\t\toutbuf[ 2*i ] = real( v );\n\t\t\toutbuf[ (2*i)+1 ] = imag( v );\n\t\t} else if ( isArrayLikeObject( v ) && v.length === 2 ) {\n\t\t\toutbuf[ 2*i ] = v[ 0 ];\n\t\t\toutbuf[ (2*i)+1 ] = v[ 1 ];\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t}\n\t}\n\treturn out;\n});\n\n/**\n* Applies a provided callback function to each element of the array, in order, passing in the return value from the calculation on the preceding element and returning the accumulated result upon completion.\n*\n* @name reduce\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} reducer - callback function\n* @param {*} [initialValue] - initial value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @throws {Error} if not provided an initial value, the array must have at least one element\n* @returns {*} accumulated result\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import cadd from '@stdlib/math-base-ops-cadd';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.reduce( cadd );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 6.0\n*\n* var im = imag( z );\n* // returns 6.0\n*/\nsetReadOnly( Complex128Array.prototype, 'reduce', function reduce( reducer, initialValue ) {\n\tvar buf;\n\tvar acc;\n\tvar len;\n\tvar v;\n\tvar i;\n\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( reducer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', reducer ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tacc = initialValue;\n\t\ti = 0;\n\t} else {\n\t\tif ( len === 0 ) {\n\t\t\tthrow new Error( 'invalid operation. If not provided an initial value, an array must contain at least one element.' );\n\t\t}\n\t\tacc = getComplex128( buf, 0 );\n\t\ti = 1;\n\t}\n\tfor ( ; i < len; i++ ) {\n\t\tv = getComplex128( buf, i );\n\t\tacc = reducer( acc, v, i, this );\n\t}\n\treturn acc;\n});\n\n/**\n* Reverses an array in-place.\n*\n* @name reverse\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} reversed array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.reverse();\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 3.0\n*\n* var im = imag( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'reverse', function reverse() {\n\tvar buf;\n\tvar tmp;\n\tvar len;\n\tvar N;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tbuf = this._buffer;\n\tN = floor( len / 2 );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tj = len - i - 1;\n\t\ttmp = buf[ (2*i) ];\n\t\tbuf[ (2*i) ] = buf[ (2*j) ];\n\t\tbuf[ (2*j) ] = tmp;\n\t\ttmp = buf[ (2*i)+1 ];\n\t\tbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t\tbuf[ (2*j)+1 ] = tmp;\n\t}\n\treturn this;\n});\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:\n*\n*     ```text\n*     buf:                ---------------------\n*     src: ---------------------\n*     ```\n*\n*     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.\n*\n*     In the other overlapping scenario,\n*\n*     ```text\n*     buf: ---------------------\n*     src:                ---------------------\n*     ```\n*\n*     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values as intended.\n*\n* @name set\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n* @param {NonNegativeInteger} [i=0] - element index at which to start writing values\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {RangeError} target array lacks sufficient storage to accommodate source values\n* @returns {void}\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 10 );\n*\n* var z = arr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'set', function set( value ) {\n\t/* eslint-disable no-underscore-dangle */\n\tvar sbuf;\n\tvar idx;\n\tvar buf;\n\tvar tmp;\n\tvar flg;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tif ( arguments.length > 1 ) {\n\t\tidx = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx ) );\n\t\t}\n\t} else {\n\t\tidx = 0;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\tif ( idx >= this._length ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx ) );\n\t\t}\n\t\tidx *= 2;\n\t\tbuf[ idx ] = real( value );\n\t\tbuf[ idx+1 ] = imag( value );\n\t\treturn;\n\t}\n\tif ( isComplexArray( value ) ) {\n\t\tN = value._length;\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tsbuf = value._buffer;\n\n\t\t// Check for overlapping memory...\n\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\tif (\n\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t(\n\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t)\n\t\t) {\n\t\t\t// We need to copy source values...\n\t\t\ttmp = new Float64Array( sbuf.length );\n\t\t\tfor ( i = 0; i < sbuf.length; i++ ) {\n\t\t\t\ttmp[ i ] = sbuf[ i ];\n\t\t\t}\n\t\t\tsbuf = tmp;\n\t\t}\n\t\tidx *= 2;\n\t\tj = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\tidx += 2; // stride\n\t\t\tj += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tif ( isCollection( value ) ) {\n\t\t// Detect whether we've been provided an array of complex numbers...\n\t\tN = value.length;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( !isComplexLike( value[ i ] ) ) {\n\t\t\t\tflg = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...\n\t\tif ( flg ) {\n\t\t\tif ( !isEven( N ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', N ) );\n\t\t\t}\n\t\t\tif ( idx+(N/2) > this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t}\n\t\t\tsbuf = value;\n\n\t\t\t// Check for overlapping memory...\n\t\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\t\tif (\n\t\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t\t(\n\t\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// We need to copy source values...\n\t\t\t\ttmp = new Float64Array( N );\n\t\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\t\ttmp[ i ] = sbuf[ i ];\n\t\t\t\t}\n\t\t\t\tsbuf = tmp;\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tN /= 2;\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\t\tidx += 2; // stride\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t// If an array contains only complex numbers, then we need to extract real and imaginary components...\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tidx *= 2;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = value[ i ];\n\t\t\tbuf[ idx ] = real( v );\n\t\t\tbuf[ idx+1 ] = imag( v );\n\t\t\tidx += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.', value ) );\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Copies a portion of a typed array to a new typed array.\n*\n* @name slice\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex128Array} complex number array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var out = arr.slice();\n* // returns <Complex128Array>\n*\n* var len = out.length;\n* // returns 5\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns -1.0\n*\n* z = out.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 5.0\n*\n* im = imag( z );\n* // returns -5.0\n*\n* out = arr.slice( 1, -2 );\n* // returns <Complex128Array>\n*\n* len = out.length;\n* // returns 2\n*\n* z = out.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns -2.0\n*\n* z = out.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 3.0\n*\n* im = imag( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex128Array.prototype, 'slice', function slice( start, end ) {\n\tvar outlen;\n\tvar outbuf;\n\tvar out;\n\tvar idx;\n\tvar buf;\n\tvar len;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tstart = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( start < end ) {\n\t\toutlen = end - start;\n\t} else {\n\t\toutlen = 0;\n\t}\n\tout = new this.constructor( outlen );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < outlen; i++ ) {\n\t\tidx = 2*(i+start);\n\t\toutbuf[ 2*i ] = buf[ idx ];\n\t\toutbuf[ (2*i)+1 ] = buf[ idx+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Tests whether at least one element in an array passes a test implemented by a predicate function.\n*\n* @name some\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether at least one element passes a test\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var bool = arr.some( predicate );\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'some', function some( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( predicate.call( thisArg, getComplex128( buf, i ), i, this ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Creates a new typed array view over the same underlying `ArrayBuffer` and with the same underlying data type as the host array.\n*\n* @name subarray\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex64Array} subarray\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var subarr = arr.subarray();\n* // returns <Complex128Array>\n*\n* var len = subarr.length;\n* // returns 5\n*\n* var z = subarr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns -1.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 5.0\n*\n* im = imag( z );\n* // returns -5.0\n*\n* subarr = arr.subarray( 1, -2 );\n* // returns <Complex128Array>\n*\n* len = subarr.length;\n* // returns 2\n*\n* z = subarr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns -2.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 3.0\n*\n* im = imag( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex128Array.prototype, 'subarray', function subarray( begin, end ) {\n\tvar offset;\n\tvar buf;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tbegin = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( begin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', begin ) );\n\t\t}\n\t\tif ( begin < 0 ) {\n\t\t\tbegin += len;\n\t\t\tif ( begin < 0 ) {\n\t\t\t\tbegin = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( begin >= len ) {\n\t\tlen = 0;\n\t\toffset = buf.byteLength;\n\t} else if ( begin >= end ) {\n\t\tlen = 0;\n\t\toffset = buf.byteOffset + ( begin*BYTES_PER_ELEMENT );\n\t} else {\n\t\tlen = end - begin;\n\t\toffset = buf.byteOffset + ( begin*BYTES_PER_ELEMENT );\n\t}\n\treturn new this.constructor( buf.buffer, offset, ( len < 0 ) ? 0 : len );\n});\n\n/**\n* Returns a new typed array containing the elements in reversed order.\n*\n* @name toReversed\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} reversed array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.toReversed();\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 3.0\n*\n* var im = imag( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'toReversed', function toReversed() {\n\tvar outbuf;\n\tvar out;\n\tvar len;\n\tvar buf;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tout = new this.constructor( len );\n\tbuf = this._buffer;\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < len; i++ ) {\n\t\tj = len - i - 1;\n\t\toutbuf[ (2*i) ] = buf[ (2*j) ];\n\t\toutbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Serializes an array as a string.\n*\n* @name toString\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex128Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.toString();\n* // returns '1 + 1i,2 + 2i'\n*/\nsetReadOnly( Complex128Array.prototype, 'toString', function toString() {\n\tvar out;\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex128( buf, i ).toString() );\n\t}\n\treturn out.join( ',' );\n});\n\n/**\n* Returns a new typed array with the element at a provided index replaced with a provided value.\n*\n* @name with\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} index - element index\n* @param {ComplexLike} value - new value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {TypeError} second argument must be a complex number\n* @returns {Complex128Array} new typed array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.with( 0, new Complex128( 4.0, 4.0 ) );\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 4.0\n*\n* var im = imag( z );\n* // returns 4.0\n*/\nsetReadOnly( Complex128Array.prototype, 'with', function copyWith( index, value ) {\n\tvar buf;\n\tvar out;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( index ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', index ) );\n\t}\n\tlen = this._length;\n\tif ( index < 0 ) {\n\t\tindex += len;\n\t}\n\tif ( index < 0 || index >= len ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%s`.', index ) );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tout = new this.constructor( this._buffer );\n\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tbuf[ 2*index ] = real( value );\n\tbuf[ (2*index)+1 ] = imag( value );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Complex128Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns a strided array of real and imaginary components.\n*\n* @private\n* @param {Float64Array} buf - output array\n* @param {Array} arr - array containing complex numbers\n* @returns {(Float64Array|null)} output array or null\n*/\nfunction fromArray( buf, arr ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tlen = arr.length;\n\tj = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arr[ i ];\n\t\tif ( !isComplexLike( v ) ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf[ j ] = real( v );\n\t\tbuf[ j+1 ] = imag( v );\n\t\tj += 2; // stride\n\t}\n\treturn buf;\n}\n\n\n// EXPORTS //\n\nexport default fromArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport format from '@stdlib/string-format';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tz = clbk.call( thisArg, v.value, i );\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( real( z ), imag( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\nimport Int32Array from '@stdlib/array-int32';\nimport Uint16Array from '@stdlib/array-uint16';\nimport Int16Array from '@stdlib/array-int16';\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint8ClampedArray from '@stdlib/array-uint8c';\nimport Int8Array from '@stdlib/array-int8';\nimport Complex64Array from '@stdlib/array-complex64';\nimport Complex128Array from '@stdlib/array-complex128';\n\n\n// MAIN //\n\n// Note: order should match `dtypes` order\nvar CTORS = [\n\tFloat64Array,\n\tFloat32Array,\n\tInt32Array,\n\tUint32Array,\n\tInt16Array,\n\tUint16Array,\n\tInt8Array,\n\tUint8Array,\n\tUint8ClampedArray,\n\tComplex64Array,\n\tComplex128Array\n];\n\n\n// EXPORTS //\n\nexport default CTORS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Note: order should match `ctors` order\nvar DTYPES = [\n\t'float64',\n\t'float32',\n\t'int32',\n\t'uint32',\n\t'int16',\n\t'uint16',\n\t'int8',\n\t'uint8',\n\t'uint8c',\n\t'complex64',\n\t'complex128'\n];\n\n\n// EXPORTS //\n\nexport default DTYPES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport isArray from '@stdlib/assert-is-array';\nimport constructorName from '@stdlib/utils-constructor-name';\nimport ctor2dtype from './ctor2dtype.js';\nimport CTORS from './ctors.js';\nimport DTYPES from './dtypes.js';\n\n\n// VARIABLES //\n\nvar NTYPES = DTYPES.length;\n\n\n// MAIN //\n\n/**\n* Returns the data type of an array.\n*\n* @param {*} value - input value\n* @returns {(string|null)} data type\n*\n* @example\n* var dt = dtype( [ 1, 2, 3 ] );\n* // returns 'generic'\n*\n* var dt = dtype( 'beep' );\n* // returns null\n*/\nfunction dtype( value ) {\n\tvar i;\n\tif ( isArray( value ) ) {\n\t\treturn 'generic';\n\t}\n\tif ( isBuffer( value ) ) {\n\t\treturn null;\n\t}\n\tfor ( i = 0; i < NTYPES; i++ ) {\n\t\tif ( value instanceof CTORS[ i ] ) {\n\t\t\treturn DTYPES[ i ];\n\t\t}\n\t}\n\t// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:\n\treturn ctor2dtype[ constructorName( value ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport getter from '@stdlib/array-base-getter';\nimport dtype from '@stdlib/array-dtype';\n\n\n// MAIN //\n\n/**\n* Tests if an array contains a provided search value.\n*\n* @param {Collection} x - input array\n* @param {*} value - search value\n* @returns {boolean} boolean indicating if an array contains a search value\n*\n* @example\n* var out = contains( [ 1, 2, 3 ], 2 );\n* // returns true\n*/\nfunction contains( x, value ) {\n\tvar len;\n\tvar get;\n\tvar dt;\n\tvar i;\n\n\t// Resolve the input array data type:\n\tdt = dtype( x );\n\n\t// Resolve an accessor for retrieving input array elements:\n\tif ( isAccessorArray( x ) ) {\n\t\tget = accessorGetter( dt );\n\t} else {\n\t\tget = getter( dt );\n\t}\n\t// Get the number of elements over which to iterate:\n\tlen = x.length;\n\n\t// Loop over the elements...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( get( x, i ) === value ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default contains;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport dtype from '@stdlib/array-dtype';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function to tests if an array contains a provided search value.\n*\n* @param {Collection} x - input array\n* @throws {TypeError} must provide an array-like object\n* @returns {Function} function to test if an array contains a search value\n*\n* @example\n* var contains = factory( [ 1, 2, 3 ] );\n* // returns <Function>\n*\n* var bool = contains( 2 );\n* // returns true\n*/\nfunction factory( x ) {\n\tvar get;\n\tvar len;\n\tvar dt;\n\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array-like object. Value: `%s`.', x ) );\n\t}\n\t// Resolve the input array data type:\n\tdt = dtype( x );\n\n\t// Resolve an accessor for retrieving input array elements:\n\tif ( isAccessorArray( x ) ) {\n\t\tget = accessorGetter( dt );\n\t}\n\t// Get the number of elements over which to iterate:\n\tlen = x.length;\n\n\treturn ( get === void 0 ) ? contains : accessors;\n\t/**\n\t* Tests if an array contains a provided search value.\n\t*\n\t* @private\n\t* @param {*} value - search value\n\t* @returns {boolean} boolean indicating if an array contains a search value\n\t*\n\t* @example\n\t* var out = contains( [ 1, 2, 3 ], 2 );\n\t* // returns true\n\t*/\n\tfunction contains( value ) {\n\t\tvar i;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( x[ i ] === value ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t* Tests if an array contains a provided search value.\n\t*\n\t* @private\n\t* @param {*} value - search value\n\t* @returns {boolean} boolean indicating if an array contains a search value\n\t*/\n\tfunction accessors( value ) {\n\t\tvar i;\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( get( x, i ) === value ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if an array contains a provided search value.\n*\n* @module @stdlib/array-base-assert-contains\n*\n* @example\n* import contains from '@stdlib/array-base-assert-contains';\n*\n* var out = contains( [ 1, 2, 3 ], 2 );\n* // returns true\n*/\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray data type.\n*\n* @name isDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray data type\n*\n* @example\n* var bool = isDataType( 'binary' );\n* // returns true\n*\n* bool = isDataType( 'float32' );\n* // returns true\n*\n* bool = isDataType( 'float64' );\n* // returns true\n*\n* bool = isDataType( 'generic' );\n* // returns true\n*\n* bool = isDataType( 'int16' );\n* // returns true\n*\n* bool = isDataType( 'int32' );\n* // returns true\n*\n* bool = isDataType( 'int8' );\n* // returns true\n*\n* bool = isDataType( 'uint16' );\n* // returns true\n*\n* bool = isDataType( 'uint32' );\n* // returns true\n*\n* bool = isDataType( 'uint8' );\n* // returns true\n*\n* bool = isDataType( 'uint8c' );\n* // returns true\n*\n* bool = isDataType( 'foo' );\n* // returns false\n*/\nvar isDataType = contains( dtypes() );\n\n\n// EXPORTS //\n\nexport default isDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport POLICIES from './policies.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of output ndarray data type policies.\n*\n* @returns {StringArray} list of ndarray data type policies\n*\n* @example\n* var list = policies();\n* // returns [...]\n*/\nfunction policies() {\n\treturn POLICIES.slice();\n}\n\n\n// EXPORTS //\n\nexport default policies;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data type policy strings to enumeration constants.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `SAME == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects.\n*\n* @private\n* @returns {Object} object mapping supported dtype policies to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the following should match the C `output_dtype_policies.h` enumeration!!!!\n\treturn {\n\t\t'same': 0,\n\t\t'promoted': 1,\n\t\t'bool': 2,\n\t\t'signed_integer': 3,\n\t\t'unsigned_integer': 4,\n\t\t'integer': 5,\n\t\t'floating_point': 6,\n\t\t'real_floating_point': 7,\n\t\t'complex_floating_point': 8,\n\t\t'real': 9,\n\t\t'numeric': 10,\n\t\t'default': 11\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of output ndarray data type policies.\n*\n* @module @stdlib/ndarray-output-dtype-policies\n*\n* @example\n* import policies from '@stdlib/ndarray-output-dtype-policies';\n*\n* var list = policies();\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport objectKeys from '@stdlib/utils-keys';\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport policies from '@stdlib/ndarray-output-dtype-policies';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray output data type policy.\n*\n* @name isOutputDataTypePolicy\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray output data type policy\n*\n* @example\n* var bool = isOutputDataTypePolicy( 'boolean' );\n* // returns true\n*\n* bool = isOutputDataTypePolicy( 'real' );\n* // returns true\n*\n* bool = isOutputDataTypePolicy( 'numeric' );\n* // returns true\n*\n* bool = isOutputDataTypePolicy( 'foo' );\n* // returns false\n*/\nvar isOutputDataTypePolicy = contains( policies() );\n\n\n// EXPORTS //\n\nexport default isOutputDataTypePolicy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\n\n\n// MAIN //\n\nvar bool = isFunction( Object.assign ); // eslint-disable-line node/no-unsupported-features/es-builtins\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies own enumerable properties from source objects to a target object.\n*\n* ## Notes\n*\n* -   If a property key is present in multiple sources, the property from the last source that defines the key prevails.\n* -   The target object is mutated.\n*\n* @name assign\n* @type {Function}\n* @param {Object} target - target object\n* @param {...Object} source - source object(s)\n* @throws {TypeError} first argument must not be null or undefined\n* @returns {Object} target object\n*\n* @example\n* var obj1 = {\n*     'a': 'beep'\n* };\n* var obj2 = {\n*     'b': 'boop'\n* };\n*\n* var out = assign( obj1, obj2 );\n* // returns { 'a': 'beep', 'b': 'boop' }\n*/\nvar assign = Object.assign; // eslint-disable-line node/no-unsupported-features/es-builtins\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof Object.getOwnPropertySymbols !== 'undefined' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Object from '@stdlib/object-ctor';\n\n\n// VARIABLES //\n\nvar propertySymbols = Object.getOwnPropertySymbols;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own symbol properties.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertySymbols()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own symbol properties\n*\n* @example\n* var symbols = getOwnPropertySymbols( {} );\n*/\nfunction getOwnPropertySymbols( value ) {\n\treturn propertySymbols( Object( value ) );\n}\n\n\n// EXPORTS //\n\nexport default getOwnPropertySymbols;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an array of an object's own symbol properties.\n*\n* @module @stdlib/utils-property-symbols\n*\n* @example\n* import getOwnPropertySymbols from '@stdlib/utils-property-symbols';\n*\n* var symbols = getOwnPropertySymbols( {} );\n*/\n\n// MODULES //\n\nimport HAS_BUILTIN from './has_builtin.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( HAS_BUILTIN ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Copy enumerable own properties from one or more source objects to a target object.\n*\n* @module @stdlib/object-assign\n*\n* @example\n* import assign from '@stdlib/object-assign';\n*\n* var out = assign( {}, { 'foo': 'bar' }, { 'baz': 'beep' } );\n* // returns { 'foo': 'bar', 'baz': 'beep' }\n*/\n\n// MODULES //\n\nimport hasObjectAssign from './has_object_assign.js';\nimport main from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar assign;\nif ( hasObjectAssign ) {\n\tassign = main;\n} else {\n\tassign = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of an object's own symbol properties.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertySymbols()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {EmptyArray} a list of own symbol properties\n*\n* @example\n* var symbols = getOwnPropertySymbols( {} );\n* // returns []\n*/\nfunction getOwnPropertySymbols() {\n\treturn [];\n}\n\n\n// EXPORTS //\n\nexport default getOwnPropertySymbols;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport keys from '@stdlib/utils-keys';\nimport propertySymbols from '@stdlib/utils-property-symbols';\nimport isEnumerable from '@stdlib/assert-is-enumerable-property';\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names and symbols.\n*\n* @param {*} value - input object\n* @returns {Array} a list of own property enumerable names and symbols\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var props = enumerableProperties( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction enumerableProperties( value ) {\n\tvar out;\n\tvar tmp;\n\tvar i;\n\n\tout = keys( value );\n\ttmp = propertySymbols( value );\n\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\tif ( isEnumerable( value, tmp[ i ] ) ) {\n\t\t\tout.push( tmp[ i ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default enumerableProperties;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enumerableProperties from '@stdlib/utils-enumerable-properties';\nimport Object from '@stdlib/object-ctor';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Copies own enumerable properties from source objects to a target object.\n*\n* ## Notes\n*\n* -   If a property key is present in multiple sources, the property from the last source that defines the key prevails.\n* -   The target object is mutated.\n*\n* @param {Object} target - target object\n* @param {...Object} source - source object(s)\n* @throws {TypeError} first argument must not be null or undefined\n* @returns {Object} target object\n*\n* @example\n* var obj1 = {\n*     'a': 'beep'\n* };\n* var obj2 = {\n*     'b': 'boop'\n* };\n*\n* var out = assign( obj1, obj2 );\n* // returns { 'a': 'beep', 'b': 'boop' }\n*/\nfunction assign( target ) {\n\tvar source;\n\tvar keys;\n\tvar key;\n\tvar len;\n\tvar to;\n\tvar i;\n\tvar j;\n\tif ( target === void 0 || target === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a non-null object. Value: `%s`.', target ) );\n\t}\n\tto = Object( target );\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\tsource = arguments[ i ];\n\t\tif ( source === void 0 || source === null ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tkeys = enumerableProperties( Object( source ) );\n\t\tlen = keys.length;\n\t\tfor ( j = 0; j < len; j++ ) {\n\t\t\tkey = keys[ j ];\n\t\t\tto[ key ] = source[ key ];\n\t\t}\n\t}\n\treturn to;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport flags from '@stdlib/ndarray-base-flags';\n\n\n// MAIN //\n\n/**\n* Returns a specified flag for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {(string|symbol)} name - flag name\n* @returns {*} flag value\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = flag( zeros( [ 3, 3, 3 ] ), 'READONLY' );\n* // returns <boolean>\n*/\nfunction flag( x, name ) {\n\treturn flags( x, false )[ name ];\n}\n\n\n// EXPORTS //\n\nexport default flag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from '@stdlib/object-assign';\n\n\n// MAIN //\n\n/**\n* Returns the flags of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `flags` property\n* @returns {Object} flags\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = flags( zeros( [ 3, 3, 3 ] ), false );\n* // returns {...}\n*/\nfunction flags( x, copy ) {\n\tvar f = x.flags;\n\tif ( typeof f !== 'object' || f === null ) {\n\t\treturn {};\n\t}\n\tif ( copy ) {\n\t\treturn assign( {}, f );\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\n\nexport default flags;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport flag from '@stdlib/ndarray-base-flag';\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray is read-only.\n*\n* @param {ndarray} arr - input ndarray\n* @returns {boolean} boolean indicating whether an ndarray is read-only\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ 1, 2, 3, 4 ], {\n*     'readonly': true\n* });\n* var bool = isReadOnly( x );\n* // returns true\n*\n* x = array( [ 1, 2, 3, 4 ] );\n* bool = isReadOnly( x );\n* // returns false\n*/\nfunction isReadOnly( arr ) {\n\treturn ( flag( arr, 'READONLY' ) === true );\n}\n\n\n// EXPORTS //\n\nexport default isReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport orders from '@stdlib/ndarray-orders';\n\n\n// VARIABLES //\n\nvar ORDERS = orders();\nvar len = ORDERS.length;\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is an ndarray order.\n*\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is an ndarray order\n*\n* @example\n* var bool = isOrder( 'row-major' );\n* // returns true\n*\n* bool = isOrder( 'column-major' );\n* // returns true\n*\n* bool = isOrder( 'foo' );\n* // returns false\n*/\nfunction isOrder( v ) {\n\tvar i;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( v === ORDERS[ i ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a filled \"generic\" array according to a provided callback function.\n*\n* @param {NonNegativeInteger} len - array length\n* @param {Callback} clbk - callback function\n* @param {*} [thisArg] - callback function execution context\n* @returns {Array} filled array\n*\n* @example\n* import constantFunction from '@stdlib/utils-constant-function';\n*\n* var out = filledBy( 3, constantFunction( 'beep' ) );\n* // returns [ 'beep', 'beep', 'beep' ]\n*/\nfunction filledBy( len, clbk, thisArg ) {\n\tvar arr;\n\tvar i;\n\n\t// Manually push elements in order to ensure \"fast\" elements...\n\tarr = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tarr.push( clbk.call( thisArg, i ) );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default filledBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SETTERS = {\n\t'float64': setFloat64,\n\t'float32': setFloat32,\n\t'int32': setInt32,\n\t'int16': setInt16,\n\t'int8': setInt8,\n\t'uint32': setUint32,\n\t'uint16': setUint16,\n\t'uint8': setUint8,\n\t'uint8c': setUint8c,\n\t'generic': setGeneric,\n\t'default': setArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Sets an element in a `Float64Array`.\n*\n* @private\n* @param {Float64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var arr = new Float64Array( 4 );\n*\n* setFloat64( arr, 2, 3.0 );\n*\n* var v = arr[ 2 ];\n* // returns 3.0\n*/\nfunction setFloat64( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Float32Array`.\n*\n* @private\n* @param {Float32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var arr = new Float32Array( 4 );\n*\n* setFloat32( arr, 2, 3.0 );\n*\n* var v = arr[ 2 ];\n* // returns 3.0\n*/\nfunction setFloat32( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an `Int32Array`.\n*\n* @private\n* @param {Int32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n*\n* var arr = new Int32Array( 4 );\n*\n* setInt32( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setInt32( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an `Int16Array`.\n*\n* @private\n* @param {Int16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Int16Array from '@stdlib/array-int16';\n*\n* var arr = new Int16Array( 4 );\n*\n* setInt16( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setInt16( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an `Int8Array`.\n*\n* @private\n* @param {Int8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Int8Array from '@stdlib/array-int8';\n*\n* var arr = new Int8Array( 4 );\n*\n* setInt8( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setInt8( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint32Array`.\n*\n* @private\n* @param {Uint32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var arr = new Uint32Array( 4 );\n*\n* setUint32( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint32( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint16Array`.\n*\n* @private\n* @param {Uint16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint16Array from '@stdlib/array-uint16';\n*\n* var arr = new Uint16Array( 4 );\n*\n* setUint16( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint16( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint8Array`.\n*\n* @private\n* @param {Uint8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var arr = new Uint8Array( 4 );\n*\n* setUint8( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint8( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint8ClampedArray`.\n*\n* @private\n* @param {Uint8ClampedArray} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint8ClampedArray from '@stdlib/array-uint8c';\n*\n* var arr = new Uint8ClampedArray( 4 );\n*\n* setUint8c( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint8c( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a generic `Array`.\n*\n* @private\n* @param {Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* setGeneric( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setGeneric( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an indexed array-like object.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* setArrayLike( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setArrayLike( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for setting an element in an indexed array-like object.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var set = setter( dtype( arr ) );\n* set( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setter( dtype ) {\n\tvar f = SETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn SETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SETTERS = {\n\t'complex128': setComplex128,\n\t'complex64': setComplex64,\n\t'default': setArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Sets an element in a `Complex128Array`.\n*\n* @private\n* @param {Complex128Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var arr = new Complex128Array( [ 1, 2, 3, 4 ] );\n*\n* setComplex128( arr, 1, new Complex128( 10.0, 11.0 ) );\n* var v = arr.get( 1 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 11.0\n*/\nfunction setComplex128( arr, idx, value ) {\n\tarr.set( value, idx );\n}\n\n/**\n* Sets an element in a `Complex64Array`.\n*\n* @private\n* @param {Complex64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* setComplex64( arr, 1, new Complex64( 10.0, 11.0 ) );\n* var v = arr.get( 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 11.0\n*/\nfunction setComplex64( arr, idx, value ) {\n\tarr.set( value, idx );\n}\n\n/**\n* Sets an element in an array-like object supporting the get/set protocol.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* function get( idx ) {\n*    return arr[ idx ];\n* }\n*\n* function set( value, idx ) {\n*    arr[ idx ] = value;\n* }\n*\n* arr.get = get;\n* arr.set = set;\n*\n* setArrayLike( arr, 2, 10 );\n*\n* var v = arr[ 2 ];\n* // returns 10\n*/\nfunction setArrayLike( arr, idx, value ) {\n\tarr.set( value, idx );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for setting an element in an array-like object supporting the get/set protocol.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* var set = setter( dtype( arr ) );\n* set( arr, 1, new Complex64( 10.0, 11.0 ) );\n*\n* var v = arr.get( 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 11.0\n*/\nfunction setter( dtype ) {\n\tvar f = SETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn SETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport getter from '@stdlib/array-base-getter';\nimport setter from '@stdlib/array-base-setter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport dtype from '@stdlib/array-dtype';\n\n\n// MAIN //\n\n/**\n* Converts an array-like to an object likely to have the same \"shape\".\n*\n* ## Notes\n*\n* -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different \"hidden\" classes. If a function is provided many objects having different \"shapes\", some JavaScript VMs (e.g., V8) will consider the function \"megamorphic\" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the \"shape\" of the object holding array meta data to ensure that internal functions operating on arrays are provided consistent argument \"shapes\".\n*\n* -   The returned object has the following properties:\n*\n*     -   **data**: reference to the input array.\n*     -   **dtype**: array data type.\n*     -   **accessorProtocol**: `boolean` indicating whether the input array uses accessors for getting and setting elements.\n*     -   **accessors**: a two-element array whose first element is an accessor for retrieving an array element and whose second element is an accessor for setting an array element.\n*\n* @param {Collection} x - array-like object\n* @returns {Object} object containing array meta data\n*\n* @example\n* var obj = arraylike2object( [ 1, 2, 3, 4 ] );\n* // returns {...}\n*/\nfunction arraylike2object( x ) {\n\tvar dt = dtype( x );\n\tif ( isAccessorArray( x ) ) {\n\t\treturn {\n\t\t\t'data': x,\n\t\t\t'dtype': dt,\n\t\t\t'accessorProtocol': true,\n\t\t\t'accessors': [\n\t\t\t\taccessorGetter( dt ),\n\t\t\t\taccessorSetter( dt )\n\t\t\t]\n\t\t};\n\t}\n\treturn {\n\t\t'data': x,\n\t\t'dtype': dt,\n\t\t'accessorProtocol': false,\n\t\t'accessors': [\n\t\t\tgetter( dt ),\n\t\t\tsetter( dt )\n\t\t]\n\t};\n}\n\n\n// EXPORTS //\n\nexport default arraylike2object;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'every' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = internal( x, isPositive );\n* // returns true\n*/\nfunction internal( x, predicate, thisArg ) {\n\tvar i;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = arraylike2object( toAccessorArray( [ 1, 2, 3, 4 ] ) );\n*\n* var out = accessors( x, isPositive );\n* // returns true\n*/\nfunction accessors( x, predicate, thisArg ) {\n\tvar data;\n\tvar get;\n\tvar i;\n\n\tdata = x.data;\n\tget = x.accessors[ 0 ];\n\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tif ( !predicate.call( thisArg, get( data, i ), i, data ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = everyBy( x, isPositive );\n* // returns true\n*/\nfunction everyBy( x, predicate, thisArg ) {\n\tvar obj;\n\tif ( hasMethod( x, 'every' ) ) {\n\t\treturn x.every( predicate, thisArg );\n\t}\n\tobj = arraylike2object( x );\n\tif ( obj.accessorProtocol ) {\n\t\treturn accessors( obj, predicate, thisArg );\n\t}\n\treturn internal( x, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default everyBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is `undefined` or `null`.\n*\n* ## Notes\n*\n* -   In older browsers, `undefined` is a global which can be overridden. `void`, however, is an operator which **cannot** be overridden. Consequently, better to use `void` to check for `undefined`. See [Stack Overflow][1].\n*\n* [1]: http://stackoverflow.com/a/19369078/2225624\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is undefined\n*\n* @example\n* var bool = isUndefinedOrNull( undefined );\n* // returns true\n*\n* bool = isUndefinedOrNull( null );\n* // returns true\n*\n* bool = isUndefinedOrNull( false );\n* // returns false\n*/\nfunction isUndefinedOrNull( value ) {\n\treturn ( value === void 0 || value === null );\n}\n\n\n// EXPORTS //\n\nexport default isUndefinedOrNull;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isUndefinedOrNull from '@stdlib/assert-is-undefined-or-null';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an object has a specified method.\n*\n* @private\n* @param {Object} obj - input object\n* @param {string} method - method name\n* @returns {boolean} boolean indicating whether an object has a specified method\n*\n* @example\n* var bool = hasMethod( [], 'join' );\n* // returns true\n*\n* @example\n* var bool = hasMethod( [], 'beep' );\n* // returns false\n*/\nfunction hasMethod( obj, method ) {\n\treturn ( typeof obj[ method ] === 'function' );\n}\n\n/**\n* Returns a string created by joining elements in an accessor array using a specified separator.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} separator - separator\n* @returns {string} output string\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = arraylike2object( toAccessorArray( [ 1, 2, 3, 4 ] ) );\n*\n* var out = accessors( x, ',' );\n* // returns '1,2,3,4'\n*/\nfunction accessors( x, separator ) {\n\tvar data;\n\tvar out;\n\tvar get;\n\tvar N;\n\tvar v;\n\tvar i;\n\n\tdata = x.data;\n\tget = x.accessors[ 0 ];\n\n\tN = data.length - 1;\n\tout = '';\n\tfor ( i = 0; i <= N; i++ ) {\n\t\tv = get( data, i );\n\t\tif ( !isUndefinedOrNull( v ) ) {\n\t\t\tout += String( v );\n\t\t}\n\t\tif ( i < N ) {\n\t\t\tout += separator;\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Returns a string created by manually joining array elements using a specified separator.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} separator - separator\n* @returns {string} output string\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = indexed( x, ',' );\n* // returns '1,2,3,4'\n*/\nfunction indexed( x, separator ) {\n\tvar out;\n\tvar N;\n\tvar v;\n\tvar i;\n\n\tN = x.length - 1;\n\tout = '';\n\tfor ( i = 0; i <= N; i++ ) {\n\t\tv = x[ i ];\n\t\tif ( !isUndefinedOrNull( v ) ) {\n\t\t\tout += String( v );\n\t\t}\n\t\tif ( i < N ) {\n\t\t\tout += separator;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns a string created by joining array elements using a specified separator.\n*\n* @param {Collection} x - input array\n* @param {integer} separator - separator\n* @returns {string} output string\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var out = join( x, ',' );\n* // returns '1,2,3,4'\n*\n* @example\n* var x = [ 1, 2, 3, null, undefined, 4 ];\n*\n* var out = join( x, '-' );\n* // returns '1-2-3---4'\n*/\nfunction join( x, separator ) {\n\tvar obj;\n\tif ( hasMethod( x, 'join' ) ) {\n\t\treturn x.join( separator );\n\t}\n\tobj = arraylike2object( x );\n\tif ( obj.accessorProtocol ) {\n\t\treturn accessors( obj, separator );\n\t}\n\treturn indexed( x, separator );\n}\n\n\n// EXPORTS //\n\nexport default join;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the index offset which specifies the location of the first indexed value in a strided array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {integer} stride - index increment\n* @returns {NonNegativeInteger} offset - offset\n*\n* @example\n* var offset = stride2offset( 10, -10 );\n* // returns 90\n*/\nfunction stride2offset( N, stride ) {\n\tif ( stride > 0 ) {\n\t\treturn 0;\n\t}\n\treturn ( 1 - N ) * stride;\n}\n\n\n// EXPORTS //\n\nexport default stride2offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting index (i.e., index offset) for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n* var offsets = [ 0 ];\n*\n* nullary( [ x ], shape, strides, offsets, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\nfunction nullary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar ix;\n\tvar x;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tsx = strides[ 0 ];\n\tx = arrays[ 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = fcn();\n\t\tix += sx;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the output array\n* @param {Array<Function>} accessors - array-like object containing accessors for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value * 2.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n* var offsets = [ 0 ];\n*\n* nullary( [ x ], shape, strides, offsets, [ set ], fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 6.0, 6.0, 6.0, 6.0, 6.0 ]\n*/\nfunction nullary( arrays, shape, strides, offsets, accessors, fcn ) {\n\tvar xset;\n\tvar sx;\n\tvar ix;\n\tvar x;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tsx = strides[ 0 ];\n\tx = arrays[ 0 ];\n\txset = accessors[ 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\txset( x, ix, fcn() );\n\t\tix += sx;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport dtype from '@stdlib/array-dtype';\nimport strided from './nullary.js';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n*\n* nullary( [ x ], shape, strides, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\nfunction nullary( arrays, shape, strides, fcn ) {\n\tvar xset;\n\tvar x;\n\n\tx = arrays[ 0 ];\n\tif ( isAccessorArray( x ) ) {\n\t\txset = accessorSetter( dtype( x ) );\n\t}\n\tif ( xset ) {\n\t\txset = xset || setter( dtype( x ) );\n\t\treturn accessors( arrays, shape, strides, [ xset ], fcn );\n\t}\n\treturn strided( arrays, shape, strides, fcn );\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './accessors.ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {Array<Function>} accessors - array-like object containing accessors for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value * 2.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n*\n* nullary( [ x ], shape, strides, [ set ], fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 6.0, 6.0, 6.0, 6.0, 6.0 ]\n*/\nfunction nullary( arrays, shape, strides, accessors, fcn ) {\n\tvar offsets = [ stride2offset( shape[ 0 ], strides[ 0 ] ) ];\n\treturn ndarray( arrays, shape, strides, offsets, accessors, fcn );\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './nullary.ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n*\n* nullary( [ x ], shape, strides, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\nfunction nullary( arrays, shape, strides, fcn ) {\n\tvar offsets = [ stride2offset( shape[ 0 ], strides[ 0 ] ) ];\n\treturn ndarray( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the number of elements in an array.\n*\n* @param {(NonNegativeIntegerArray|EmptyArray)} shape - array shape\n* @returns {NonNegativeInteger} number of elements\n*\n* @example\n* var n = numel( [ 3, 3, 3 ] );\n* // returns 27\n*/\nfunction numel( shape ) {\n\tvar ndims;\n\tvar n;\n\tvar i;\n\n\tndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\treturn 0;\n\t}\n\tn = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tn *= shape[ i ];\n\t}\n\treturn n;\n}\n\n\n// EXPORTS //\n\nexport default numel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the data type of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {string} data type\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var dt = dtype( x );\n* // returns 'float64'\n*/\nfunction dtype( x ) {\n\treturn x.dtype;\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies the elements of an indexed array-like object to a new \"generic\" array.\n*\n* @param {Collection} x - input array\n* @returns {Array} output array\n*\n* @example\n* var out = copy( [ 1, 2, 3 ] );\n* // returns [ 1, 2, 3 ]\n*/\nfunction copy( x ) {\n\tvar out;\n\tvar len;\n\tvar i;\n\n\tlen = x.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( x[ i ] ); // use `Array#push` to ensure \"fast\" elements\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default copy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\n\n\n// MAIN //\n\n/**\n* Returns the shape of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `shape` property\n* @returns {NonNegativeIntegerArray} shape\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = shape( zeros( [ 3, 3, 3 ] ), false );\n* // returns [ 3, 3, 3 ]\n*/\nfunction shape( x, copy ) {\n\tvar sh = x.shape;\n\tif ( copy ) {\n\t\treturn copyIndexed( sh );\n\t}\n\treturn sh;\n}\n\n\n// EXPORTS //\n\nexport default shape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Generates a stride array from an array shape (row-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {Array} array strides\n*/\nfunction rowmajor( shape ) {\n\tvar ndims;\n\tvar out;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tout = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( 0 );\n\t}\n\ts = 1;\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Generates a stride array from an array shape (column-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {Array} array strides\n*/\nfunction columnmajor( shape ) {\n\tvar out;\n\tvar s;\n\tvar i;\n\n\tout = [];\n\ts = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tout.push( s );\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a stride array from an array shape.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {Array} array strides\n*\n* @example\n* var s = shape2strides( [ 3, 2 ], 'row-major' );\n* // returns [ 2, 1 ]\n*\n* s = shape2strides( [ 3, 2 ], 'column-major' );\n* // returns [ 1, 3 ]\n*/\nfunction shape2strides( shape, order ) {\n\tif ( order === 'column-major' ) {\n\t\treturn columnmajor( shape );\n\t}\n\treturn rowmajor( shape );\n}\n\n\n// EXPORTS //\n\nexport default shape2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a nullary callback and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided-base-nullary\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import nullary from '@stdlib/strided-base-nullary';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n*\n* nullary( [ x ], shape, strides, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import nullary from '@stdlib/strided-base-nullary';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n* var offsets = [ 0 ];\n*\n* nullary.ndarray( [ x ], shape, strides, offsets, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport dtype from '@stdlib/array-dtype';\nimport strided from './nullary.ndarray.js';\nimport accessors from './accessors.ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a nullary callback and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride length for the output array\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the output array\n* @param {Callback} fcn - nullary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fill() {\n*     return 3.0;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* var shape = [ x.length ];\n* var strides = [ 1 ];\n* var offsets = [ 0 ];\n*\n* nullary( [ x ], shape, strides, offsets, fill );\n*\n* console.log( x );\n* // => <Float64Array>[ 3.0, 3.0, 3.0, 3.0, 3.0 ]\n*/\nfunction nullary( arrays, shape, strides, offsets, fcn ) {\n\tvar xset;\n\tvar x;\n\n\tx = arrays[ 0 ];\n\tif ( isAccessorArray( x ) ) {\n\t\txset = accessorSetter( dtype( x ) );\n\t}\n\tif ( xset ) {\n\t\txset = xset || setter( dtype( x ) );\n\t\treturn accessors( arrays, shape, strides, offsets, [ xset ], fcn );\n\t}\n\treturn strided( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nexport default nullary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a stride array from an array shape.\n*\n* @module @stdlib/ndarray-base-shape2strides\n*\n* @example\n* import shape2strides from '@stdlib/ndarray-base-shape2strides';\n*\n* var strides = shape2strides( [ 3, 2 ], 'row-major' );\n* // returns [ 2, 1 ]\n*\n* strides = shape2strides( [ 3, 2 ], 'column-major' );\n* // returns [ 1, 3 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Generates a stride array from an array shape (row-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*/\nfunction rowmajor( shape, out ) {\n\tvar ndims;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\ts = 1;\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Generates a stride array from an array shape (column-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*/\nfunction columnmajor( shape, out ) {\n\tvar s;\n\tvar i;\n\n\ts = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a stride array from an array shape.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*\n* @example\n* var strides = [ 0, 0 ];\n*\n* var out = shape2strides( [ 3, 2 ], 'row-major', strides );\n* // returns [ 2, 1 ]\n*\n* var bool = ( out === strides );\n* // returns true\n*\n* out = shape2strides( [ 3, 2 ], 'column-major', strides );\n* // returns [ 1, 3 ]\n*/\nfunction shape2strides( shape, order, out ) {\n\tif ( order === 'column-major' ) {\n\t\treturn columnmajor( shape, out );\n\t}\n\treturn rowmajor( shape, out );\n}\n\n\n// EXPORTS //\n\nexport default shape2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\n\n\n// MAIN //\n\n/**\n* Returns the strides of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `strides` property\n* @returns {IntegerArray} strides\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = strides( zeros( [ 3, 3, 3 ] ), false );\n* // returns [ 9, 3, 1 ]\n*/\nfunction strides( x, copy ) {\n\tvar ord;\n\tvar sh;\n\tvar st;\n\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\tsh = x.shape;\n\t\tif ( sh.length === 0 ) {\n\t\t\treturn [ 0 ];\n\t\t}\n\t\tord = x.order;\n\t\tif ( typeof ord !== 'string' ) {\n\t\t\tord = ROW_MAJOR;\n\t\t}\n\t\treturn shape2strides( sh, ord );\n\t}\n\tif ( copy ) {\n\t\treturn copyIndexed( st );\n\t}\n\treturn st;\n}\n\n\n// EXPORTS //\n\nexport default strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2offset from '@stdlib/ndarray-base-strides2offset';\n\n\n// MAIN //\n\n/**\n* Returns the index offset specifying the underlying buffer index of the first iterated ndarray element.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {NonNegativeInteger} index offset\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var n = offset( zeros( [ 3, 3, 3 ] ) );\n* // returns 0\n*/\nfunction offset( x ) {\n\tvar st;\n\tvar sh;\n\tvar o;\n\n\to = x.offset;\n\tif ( typeof o === 'number' ) {\n\t\treturn o;\n\t}\n\tsh = x.shape;\n\tif ( sh.length === 0 ) {\n\t\treturn 0;\n\t}\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\treturn 0;\n\t}\n\treturn strides2offset( sh, st );\n}\n\n\n// EXPORTS //\n\nexport default offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @returns {NonNegativeInteger} offset - offset\n*\n* @example\n* var shape = [ 2, 3, 10 ];\n* var strides = [ 30, -10, 1 ];\n*\n* var offset = strides2offset( shape, strides );\n* // returns 20\n*/\nfunction strides2offset( shape, strides ) {\n\tvar offset;\n\tvar ndims;\n\tvar i;\n\n\tndims = shape.length;\n\toffset = 0;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( strides[ i ] < 0 ) {\n\t\t\t// Note that, since the stride is negative, this operation increments, not decrements, the offset...\n\t\t\toffset -= strides[ i ] * ( shape[ i ]-1 );\n\t\t}\n\t}\n\treturn offset;\n}\n\n\n// EXPORTS //\n\nexport default strides2offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2order from '@stdlib/ndarray-base-strides2order';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COLUMN_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns the layout order of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {(string|null)} layout order\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'order': 'row-major'\n* });\n*\n* var out = order( x );\n* // returns 'row-major'\n*/\nfunction order( x ) {\n\tvar st;\n\tvar o;\n\n\to = x.order;\n\tif ( typeof o === 'string' ) {\n\t\treturn o;\n\t}\n\t// Try to infer the layout order from the strides array...\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\treturn ROW_MAJOR; // WARNING: default to row-major for ndarray-like objects lacking strides. This may or may not be accurate, and we're defaulting to row-major here based on the belief that row-major is more likely given that, e.g., JavaScript arrays are similar to C arrays (i.e., stored in row-major order).\n\t}\n\to = strides2order( st );\n\tif ( o === 1 || o === 3 ) {\n\t\treturn ROW_MAJOR; // for o == 3 (both row- and column-major; e.g., one-dimensional ndarrays), default to row-major\n\t}\n\tif ( o === 2 ) {\n\t\treturn COLUMN_MAJOR;\n\t}\n\t// o === 0\n\tif ( x.shape.length === 0 ) {\n\t\treturn ROW_MAJOR; // default to row-major for zero-dimensional ndarrays\n\t}\n\t// Case: mixed strides (e.g., [ 2, 3, 1 ] )\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the underlying data buffer of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {Collection} underlying data buffer\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var out = data( x );\n* // returns <Float64Array>\n*/\nfunction data( x ) {\n\treturn x.data;\n}\n\n\n// EXPORTS //\n\nexport default data;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport getter from '@stdlib/array-base-getter';\nimport setter from '@stdlib/array-base-setter';\nimport numel from '@stdlib/ndarray-base-numel';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport getStrides from '@stdlib/ndarray-base-strides';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport getData from '@stdlib/ndarray-base-data-buffer';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray-like to an object likely to have the same \"shape\".\n*\n* ## Notes\n*\n* -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different \"hidden\" classes. If a function is provided many objects having different \"shapes\", some JavaScript VMs (e.g., V8) will consider the function \"megamorphic\" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the \"shape\" of the object holding ndarray meta data to ensure that internal functions operating on ndarrays are provided consistent argument \"shapes\".\n*\n* -   The returned object has the following properties:\n*\n*     -   **ref**: reference to the original ndarray-like object.\n*     -   **dtype**: underlying data type.\n*     -   **data**: data buffer.\n*     -   **length**: number of elements.\n*     -   **shape**: array dimensions.\n*     -   **strides**: array strides.\n*     -   **offset**: index offset.\n*     -   **order**: order.\n*     -   **accessorProtocol**: `boolean` indicating whether the data buffer supports the get/set protocol (i.e., uses accessors for getting and setting elements).\n*     -   **accessors**: a two-element array whose first element is an accessor for retrieving an ndarray element and whose second element is an accessor for setting an ndarray element.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @returns {Object} object containing ndarray meta data\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );\n*\n* var obj = ndarraylike2object( x );\n* // returns {...}\n*/\nfunction ndarraylike2object( x ) {\n\tvar xbuf;\n\tvar bool;\n\tvar sh;\n\tvar dt;\n\n\txbuf = getData( x );\n\tsh = getShape( x, true );\n\tdt = getDType( x );\n\n\tbool = isAccessorArray( xbuf );\n\n\treturn {\n\t\t'ref': x,\n\t\t'dtype': dt,\n\t\t'data': xbuf,\n\t\t'length': numel( sh ),\n\t\t'shape': sh,\n\t\t'strides': getStrides( x, true ),\n\t\t'offset': getOffset( x ),\n\t\t'order': getOrder( x ),\n\t\t'accessorProtocol': bool,\n\t\t'accessors': ( bool ) ?\n\t\t\t[ accessorGetter( dt ), accessorSetter( dt ) ] :\n\t\t\t[ getter( dt ), setter( dt ) ]\n\t};\n}\n\n\n// EXPORTS //\n\nexport default ndarraylike2object;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property, either own or inherited.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasProp( value, property ) {\n\tif ( value === void 0 || value === null ) {\n\t\treturn false;\n\t}\n\tif ( typeof property === 'symbol' ) {\n\t\treturn property in Object( value );\n\t}\n\treturn ( String( property ) in Object( value ) );\n}\n\n\n// EXPORTS //\n\nexport default hasProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport hasProp from '@stdlib/assert-has-property';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether at least one element in a provided indexed array has a specified property key-value pair, either own or inherited.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {(string|symbol)} prop - property\n* @param {*} value - property value\n* @returns {boolean} result\n*\n* @example\n* var o1 = {\n*     'a': 1\n* };\n* var o2 = {\n*     'b': 2\n* };\n* var o3 = {\n*     'c': 3\n* };\n*\n* var bool = indexed( [ o1, o2, o3 ], 'b', 2 );\n* // returns true\n*\n* bool = indexed( [ o1, o2, o3 ], 'b', 3 );\n* // returns false\n*\n* bool = indexed( [ o1, o2, o3 ], 'd', 0 );\n* // returns false\n*/\nfunction indexed( arr, prop, value ) {\n\tvar v;\n\tvar i;\n\tif ( value === void 0 ) {\n\t\tfor ( i = 0; i < arr.length; i++ ) {\n\t\t\tv = arr[ i ];\n\t\t\tif ( hasProp( v, prop ) && v[ prop ] === value ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ][ prop ] === value ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n* Tests whether at least one element in a provided accessor array has a specified property key-value pair, either own or inherited.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {(string|symbol)} prop - property\n* @param {*} value - property value\n* @returns {boolean} result\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n*\n* var o1 = {\n*     'a': 1\n* };\n* var o2 = {\n*     'b': 2\n* };\n* var o3 = {\n*     'c': 3\n* };\n*\n* var bool = accessors( toAccessorArray( [ o1, o2, o3 ] ), 'b', 2 );\n* // returns true\n*\n* bool = accessors( toAccessorArray( [ o1, o2, o3 ] ), 'b', 3 );\n* // returns false\n*\n* bool = accessors( toAccessorArray( [ o1, o2, o3 ] ), 'd', 0 );\n* // returns false\n*/\nfunction accessors( arr, prop, value ) {\n\tvar get;\n\tvar v;\n\tvar i;\n\n\tget = resolveGetter( arr );\n\tif ( value === void 0 ) {\n\t\tfor ( i = 0; i < arr.length; i++ ) {\n\t\t\tv = get( arr, i );\n\t\t\tif ( hasProp( v, prop ) && v[ prop ] === value ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( get( arr, i )[ prop ] === value ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether at least one element in a provided array has a specified property key-value pair, either own or inherited.\n*\n* @param {Collection} arr - input array\n* @param {(string|symbol)} prop - property\n* @param {*} value - property value\n* @returns {boolean} result\n*\n* @example\n* var o1 = {\n*     'a': 1\n* };\n* var o2 = {\n*     'b': 2\n* };\n* var o3 = {\n*     'c': 3\n* };\n*\n* var bool = anyIsEntryIn( [ o1, o2, o3 ], 'b', 2 );\n* // returns true\n*\n* bool = anyIsEntryIn( [ o1, o2, o3 ], 'b', 3 );\n* // returns false\n*\n* bool = anyIsEntryIn( [ o1, o2, o3 ], 'd', 0 );\n* // returns false\n*/\nfunction anyIsEntryIn( arr, prop, value ) {\n\tif ( isAccessorArray( arr ) ) {\n\t\treturn accessors( arr, prop, value );\n\t}\n\treturn indexed( arr, prop, value );\n}\n\n\n// EXPORTS //\n\nexport default anyIsEntryIn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport getter from '@stdlib/array-base-getter';\nimport dtype from '@stdlib/array-dtype';\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for retrieving an element from an array-like object.\n*\n* @param {Collection} x - input array\n* @returns {Function} accessor\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var get = resolveGetter( arr );\n* var v = get( arr, 2 );\n* // returns 3\n*/\nfunction resolveGetter( x ) {\n\tvar dt = dtype( x );\n\tif ( isAccessorArray( x ) ) {\n\t\treturn accessorGetter( dt );\n\t}\n\treturn getter( dt );\n}\n\n\n// EXPORTS //\n\nexport default resolveGetter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Generates a linearly spaced numeric array whose elements increment by 1 starting from zero.\n*\n* @param {number} n - number of elements\n* @returns {Array<number>} linearly spaced numeric array\n*\n* @example\n* var arr = zeroTo( 6 );\n* // returns [ 0, 1, 2, 3, 4, 5 ]\n*/\nfunction zeroTo( n ) {\n\tvar arr;\n\tvar i;\n\n\tarr = [];\n\tif ( n <= 0 ) {\n\t\treturn arr;\n\t}\n\tfor ( i = 0; i < n; i++ ) {\n\t\tarr.push( i );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default zeroTo;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\n\n\n// FUNCTIONS //\n\n/**\n* Fills an indexed array with linearly spaced numeric elements which increment by 1 starting from zero.\n*\n* @private\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* var arr = indexed( out, 1, 0 );\n* // returns [ 0, 1, 2, 3, 4, 5 ]\n*\n* @example\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* var arr = indexed( out, -1, out.length-1 );\n* // returns [ 5, 4, 3, 2, 1, 0 ]\n*/\nfunction indexed( out, stride, offset ) {\n\tvar v;\n\tvar i;\n\n\ti = offset;\n\tv = 0;\n\twhile ( i >= 0 && i < out.length ) {\n\t\tout[ i ] = v;\n\t\ti += stride;\n\t\tv += 1;\n\t}\n\treturn out;\n}\n\n/**\n* Fills a complex number array with linearly spaced numeric elements which increment by 1 starting from zero.\n*\n* @private\n* @param {(Complex128Array|Complex64Array)} out - output complex number array\n* @param {(Float64Array|Float32Array)} data - output array data\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {(Complex128Array|Complex64Array)} output array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\n*\n* var out = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* // returns <Complex128Array>\n*\n* var data = reinterpret128( out, 0 );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]\n*\n* var arr = complex( out, data, 1, 0 );\n* // returns <Complex128Array>\n*\n* var bool = ( arr === out );\n* // returns true\n*\n* data = reinterpret128( out, 0 );\n* returns <Float64Array>[ 0.0, 0.0, 1.0, 0.0, 2.0, 0.0 ]\n*/\nfunction complex( out, data, stride, offset ) {\n\tvar v;\n\tvar s;\n\tvar i;\n\n\ts = stride * 2;\n\ti = offset * 2;\n\tv = 0.0;\n\twhile ( i >= 0 && i < data.length ) {\n\t\tdata[ i ] = v;     // real component\n\t\tdata[ i+1 ] = 0.0; // imaginary component\n\t\ti += s;\n\t\tv += 1.0;\n\t}\n\treturn out;\n}\n\n/**\n* Fills an accessor array with linearly spaced numeric elements which increment by 1 starting from zero.\n*\n* @private\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n\n* var out = toAccessorArray( [ 0, 0, 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( out ), 1, 0 );\n*\n* var bool = ( arr === out );\n* // returns true\n*\n* var v = out.get( 0 );\n* // returns 0\n*\n* v = out.get( out.length-1 );\n* // returns 5\n*/\nfunction accessors( out, stride, offset ) {\n\tvar data;\n\tvar set;\n\tvar v;\n\tvar i;\n\n\tdata = out.data;\n\tset = out.accessors[ 1 ];\n\n\ti = offset;\n\tv = 0;\n\twhile ( i >= 0 && i < data.length ) {\n\t\tset( data, i, v );\n\t\ti += stride;\n\t\tv += 1;\n\t}\n\treturn data;\n}\n\n\n// MAIN //\n\n/**\n* Fills an array with linearly spaced numeric elements which increment by 1 starting from zero.\n*\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* var arr = assign( out, 1, 0 );\n* // returns [ 0, 1, 2, 3, 4, 5 ]\n*\n* @example\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n*\n* var arr = assign( out, -1, out.length-1 );\n* // returns [ 5, 4, 3, 2, 1, 0 ]\n*/\nfunction assign( out, stride, offset ) {\n\tvar obj = arraylike2object( out );\n\tif ( obj.accessorProtocol ) {\n\t\t// If provided a complex number array, reinterpret as a real typed array and only set the real components...\n\t\tif ( obj.dtype === 'complex128' ) {\n\t\t\treturn complex( out, reinterpret128( out, 0 ), stride, offset );\n\t\t}\n\t\tif ( obj.dtype === 'complex64' ) {\n\t\t\treturn complex( out, reinterpret64( out, 0 ), stride, offset );\n\t\t}\n\t\treturn accessors( obj, stride, offset );\n\t}\n\treturn indexed( out, stride, offset );\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Takes elements from an indexed array.\n*\n* @param {Collection} x - input array\n* @param {NonNegativeIntegerArray} indices - list of indices\n* @returns {Array} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var indices = [ 3, 1, 2, 0 ];\n*\n* var y = take( x, indices );\n* // returns [ 4, 2, 3, 1 ]\n*/\nfunction take( x, indices ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < indices.length; i++ ) {\n\t\tout.push( x[ indices[ i ] ] ); // use `Array#push` to ensure \"fast\" elements\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default take;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a filled \"generic\" array.\n*\n* @param {*} value - fill value\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*\n* @example\n* var out = filled( 0.0, 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*\n* @example\n* var out = filled( 'beep', 3 );\n* // returns [ 'beep', 'beep', 'beep' ]\n*/\nfunction filled( value, len ) {\n\tvar arr;\n\tvar i;\n\n\t// Manually push elements in order to ensure \"fast\" elements...\n\tarr = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tarr.push( value );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default filled;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a linearly spaced numeric array whose elements increment by 1 starting from zero.\n*\n* @module @stdlib/array-base-zero-to\n*\n* @example\n* import zeroTo from '@stdlib/array-base-zero-to';\n*\n* var arr = zeroTo( 6 );\n* // returns [ 0, 1, 2, 3, 4, 5 ]\n*\n* @example\n* import zeroTo from '@stdlib/array-base-zero-to';\n*\n* var out = [ 0, 0, 0, 0, 0, 0 ];\n* var arr = zeroTo.assign( out, 1, 0 );\n* // returns [ 0, 1, 2, 3, 4, 5 ]\n*\n* var bool = ( out === arr );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport copy from '@stdlib/array-base-copy-indexed';\nimport take from '@stdlib/array-base-take-indexed';\nimport filled from '@stdlib/array-base-filled';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport sort2ins from './sort2ins.js';\n\n\n// VARIABLES //\n\n// Number of arrays:\nvar N = 3;\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: first input ndarray strides sorted in loop order.\n*     -   **sy**: second input ndarray strides sorted in loop order.\n*     -   **sz**: output ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - first input array stride lengths\n* @param {IntegerArray} sy - second input array stride lengths\n* @param {IntegerArray} sz - output array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 24, 8, 1 ]; // row-major\n* var sz = [ 1, -2, 6 ]; // column-major\n*\n* var o = loopOrder( sh, sx, sy, sz );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 1, 8, 24 ]\n*\n* var ssz = o.sz;\n* // returns [ 6, -2, 1 ]\n*/\nfunction loopOrder( sh, sx, sy, sz ) {\n\tvar idx;\n\tvar tmp;\n\tvar max;\n\tvar len;\n\tvar arr;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar i;\n\tvar j;\n\n\t// Initialize a loop interchange index array for generating a loop order permutation:\n\tidx = zeroTo( sh.length );\n\n\t// Determine the order (layout) of each array:\n\tox = strides2order( sx );\n\toy = strides2order( sy );\n\toz = strides2order( sz );\n\n\t// Determine which array should be used to generate the loop order:\n\ttmp = filled( [], 4 );\n\ttmp[ ox ].push( sx );\n\ttmp[ oy ].push( sy );\n\ttmp[ oz ].push( sz );\n\tmax = tmp[ 0 ].length;\n\tif ( max === N ) {\n\t\t// If all arrays are \"disorganized\", then just use the first array, as, generally, each array is likely to be as un-ideal as every other:\n\t\tarr = sx;\n\t} else if ( max === N-1 ) {\n\t\t// If all but one array is \"disorganized\", find the \"organized\" array...\n\t\tfor ( i = 1; i < 4; i++ ) {\n\t\t\tif ( tmp[ i ].length ) {\n\t\t\t\tarr = tmp[ i ][ 0 ];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Find the layout which is most common...\n\t\tj = 0;\n\t\tfor ( i = 1; i < 4; i++ ) {\n\t\t\tlen = tmp[ i ].length;\n\t\t\tif ( len >= max ) {\n\t\t\t\tmax = len;\n\t\t\t\tj = i;\n\t\t\t}\n\t\t}\n\t\t// Use the strides of the first array having the most common layout:\n\t\tarr = tmp[ j ][ 0 ];\n\t}\n\t// Sort array strides in increasing order (of magnitude):\n\tarr = copy( arr );\n\tsort2ins( arr, idx );\n\n\t// Permute the shape and array strides based on the sorted strides:\n\tsh = take( sh, idx );\n\tsx = ( sx === arr ) ? arr : take( sx, idx );\n\tsy = ( sy === arr ) ? arr : take( sy, idx );\n\tsz = ( sz === arr ) ? arr : take( sz, idx );\n\n\treturn {\n\t\t'sh': sh,\n\t\t'sx': sx,\n\t\t'sy': sy,\n\t\t'sz': sz\n\t};\n}\n\n\n// EXPORTS //\n\nexport default loopOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Simultaneously sorts two arrays based on the sort order of the first array using insertion sort.\n*\n* ## Notes\n*\n* -   The first array is sorted in increasing order according to absolute value.\n* -   The algorithm has space complexity `O(1)` and worst case time complexity `O(N^2)`.\n* -   The algorithm is efficient for small arrays (typically `N <= 20``) and is particularly efficient for sorting arrays which are already substantially sorted.\n* -   The algorithm is **stable**, meaning that the algorithm does **not** change the order of array elements which are equal or equivalent.\n* -   The input arrays are sorted in-place (i.e., the input arrays are mutated).\n*\n* @private\n* @param {Array} x - first array\n* @param {Array} y - second array\n* @returns {void}\n*\n* @example\n* var x = [ -4, -2, 3, 1 ];\n* var y = [ 0, 1, 2, 3 ];\n*\n* sort2ins( x, y );\n*\n* console.log( x );\n* // => [ 1, -2, 3, -4 ]\n*\n* console.log( y );\n* // => [ 3, 1, 2, 0 ]\n*/\nfunction sort2ins( x, y ) {\n\tvar avx;\n\tvar aux;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tix = 1;\n\tiy = 1;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < x.length; i++ ) {\n\t\tvx = x[ ix ];\n\t\tavx = ( vx < 0 ) ? -vx : vx;\n\n\t\tvy = y[ iy ];\n\n\t\tjx = ix - 1;\n\t\tjy = iy - 1;\n\n\t\t// Shift all larger values to the left of the current element to the right...\n\t\twhile ( jx >= 0 ) {\n\t\t\tux = x[ jx ];\n\t\t\taux = ( ux < 0 ) ? -ux : ux;\n\t\t\tif ( aux <= avx ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[ jx+1 ] = ux;\n\t\t\ty[ jy+1 ] = y[ jy ];\n\t\t\tjx -= 1;\n\t\t\tjy -= 1;\n\t\t}\n\t\tx[ jx+1 ] = vx;\n\t\ty[ jy+1 ] = vy;\n\t\tix += 1;\n\t\tiy += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar defaults = {\n\t// Define a default block size (in bytes):\n\t'BLOCK_SIZE_IN_BYTES': 64|0, // 64b is a common cache line size. How applicable the common cache line size is here is debatable, given that, depending on the associated stride(s), the innermost loop may not iterate over adjacent elements. The primary goal is to have a block size in which all data within a block can always fit in (L1) cache, regardless of cache size (i.e., cache-oblivious). For reference, a common L1 cache size is 32kB per core. For best performance, block sizes should be tuned based on system hardware; however, such tuning is not readily available to us here. Without obvious better alternatives, 64b has some theoretical (and practical) underpinning, and it should be good enough for most inputs, especially for ndarrays with near contiguity.\n\n\t// Define a default block size (in elements):\n\t'BLOCK_SIZE_IN_ELEMENTS': 8|0 // 64 bytes / 8 bytes per element (i.e., default element size is same as a double)\n};\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns a loop block size for multi-dimensional array tiled loops.\n*\n* @param {string} dtypeX - first input array data type\n* @param {string} dtypeY - second input array data type\n* @param {string} dtypeZ - output array data type\n* @returns {integer} block size (in units of elements)\n*\n* @example\n* var bsize = binaryBlockSize( 'float64', 'float64', 'float64' );\n* // returns <number>\n*/\nfunction binaryBlockSize( dtypeX, dtypeY, dtypeZ ) {\n\tvar nbx;\n\tvar nby;\n\tvar nbz;\n\n\tnbx = bytesPerElement( dtypeX );\n\tnby = bytesPerElement( dtypeY );\n\tnbz = bytesPerElement( dtypeZ );\n\tif ( nbx === null || nby === null || nbz === null ) { // e.g., \"generic\" arrays\n\t\treturn defaults.BLOCK_SIZE_IN_ELEMENTS;\n\t}\n\tif ( nbx > nby && nbx > nbz ) {\n\t\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbx )|0; // asm type annotation\n\t}\n\tif ( nby > nbz ) {\n\t\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nby )|0; // asm type annotation\n\t}\n\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbz )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default binaryBlockSize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Converts a linear index in an array view to a linear index in an underlying data buffer.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {integer} idx - linear index in an array view\n* @param {string} mode - specifies how to handle a linear index which exceeds array dimensions\n* @throws {RangeError} linear index must not exceed array dimensions\n* @returns {NonNegativeInteger} linear index in an underlying data buffer\n*\n* @example\n* var shape = [ 3, 3 ];\n* var strides = [ -3, 1 ];\n* var offset = 6;\n* var order = 'row-major';\n* var mode = 'throw';\n*\n* var ind = vind2bind( shape, strides, offset, order, 1, mode );\n* // returns 7\n*/\nfunction vind2bind( shape, strides, offset, order, idx, mode ) {\n\tvar ndims;\n\tvar len;\n\tvar ind;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tlen = 1;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tlen *= shape[ i ];\n\t}\n\tif ( mode === 'clamp' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t} else if ( idx >= len ) {\n\t\t\tidx = len - 1;\n\t\t}\n\t} else if ( mode === 'wrap' ) {\n\t\tif ( idx < 0 ) {\n\t\t\tidx += len; // slight optimization to avoid modulo arithmetic when |idx| <= len\n\t\t\tif ( idx < 0 ) {\n\t\t\t\tidx %= len;\n\t\t\t\tif ( idx !== 0 ) {\n\t\t\t\t\tidx += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( idx >= len ) {\n\t\t\tidx -= len; // slight optimization to avoid modulo arithmetic when len < idx <= 2*len\n\t\t\tif ( idx >= len ) {\n\t\t\t\tidx %= len;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( mode === 'normalize' && idx < 0 ) {\n\t\t\tidx += len;\n\t\t}\n\t\tif ( idx < 0 || idx >= len ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Linear index must not exceed array dimensions. Number of array elements: `%u`. Value: `%d`.', len, idx ) );\n\t\t}\n\t}\n\t// The approach which follows is to resolve a view index to its subscripts and then plug the subscripts into the standard formula for computing the linear index in the underlying data buffer...\n\tind = offset;\n\tif ( order === 'column-major' ) {\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\ts = idx % shape[ i ];\n\t\t\tidx -= s;\n\t\t\tidx /= shape[ i ];\n\t\t\tind += s * strides[ i ];\n\t\t}\n\t\treturn ind;\n\t}\n\t// Case: row-major\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\ts = idx % shape[ i ];\n\t\tidx -= s;\n\t\tidx /= shape[ i ];\n\t\tind += s * strides[ i ];\n\t}\n\treturn ind;\n}\n\n\n// EXPORTS //\n\nexport default vind2bind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in n-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binarynd( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binarynd( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( sh, sz, oz, ordz, i, MODE );\n\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in n-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binarynd( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binarynd( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar ordx;\n\tvar ordy;\n\tvar ordz;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\tordz = z.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tiz = vind2bind( sh, sz, oz, ordz, i, MODE );\n\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport anyIsEntryIn from '@stdlib/array-base-assert-any-is-entry-in';\nimport format from '@stdlib/string-format';\nimport blockedaccessorbinary2d from './2d_blocked_accessors.js';\nimport blockedaccessorbinary3d from './3d_blocked_accessors.js';\nimport blockedaccessorbinary4d from './4d_blocked_accessors.js';\nimport blockedaccessorbinary5d from './5d_blocked_accessors.js';\nimport blockedaccessorbinary6d from './6d_blocked_accessors.js';\nimport blockedaccessorbinary7d from './7d_blocked_accessors.js';\nimport blockedaccessorbinary8d from './8d_blocked_accessors.js';\nimport blockedaccessorbinary9d from './9d_blocked_accessors.js';\nimport blockedaccessorbinary10d from './10d_blocked_accessors.js';\nimport blockedbinary2d from './2d_blocked.js';\nimport blockedbinary3d from './3d_blocked.js';\nimport blockedbinary4d from './4d_blocked.js';\nimport blockedbinary5d from './5d_blocked.js';\nimport blockedbinary6d from './6d_blocked.js';\nimport blockedbinary7d from './7d_blocked.js';\nimport blockedbinary8d from './8d_blocked.js';\nimport blockedbinary9d from './9d_blocked.js';\nimport blockedbinary10d from './10d_blocked.js';\nimport accessorbinary0d from './0d_accessors.js';\nimport accessorbinary1d from './1d_accessors.js';\nimport accessorbinary2d from './2d_accessors.js';\nimport accessorbinary3d from './3d_accessors.js';\nimport accessorbinary4d from './4d_accessors.js';\nimport accessorbinary5d from './5d_accessors.js';\nimport accessorbinary6d from './6d_accessors.js';\nimport accessorbinary7d from './7d_accessors.js';\nimport accessorbinary8d from './8d_accessors.js';\nimport accessorbinary9d from './9d_accessors.js';\nimport accessorbinary10d from './10d_accessors.js';\nimport accessorbinarynd from './nd_accessors.js';\nimport binary0d from './0d.js';\nimport binary1d from './1d.js';\nimport binary2d from './2d.js';\nimport binary3d from './3d.js';\nimport binary4d from './4d.js';\nimport binary5d from './5d.js';\nimport binary6d from './6d.js';\nimport binary7d from './7d.js';\nimport binary8d from './8d.js';\nimport binary9d from './9d.js';\nimport binary10d from './10d.js';\nimport binarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar BINARY = [\n\tbinary0d,\n\tbinary1d,\n\tbinary2d,\n\tbinary3d,\n\tbinary4d,\n\tbinary5d,\n\tbinary6d,\n\tbinary7d,\n\tbinary8d,\n\tbinary9d,\n\tbinary10d\n];\nvar ACCESSOR_BINARY = [\n\taccessorbinary0d,\n\taccessorbinary1d,\n\taccessorbinary2d,\n\taccessorbinary3d,\n\taccessorbinary4d,\n\taccessorbinary5d,\n\taccessorbinary6d,\n\taccessorbinary7d,\n\taccessorbinary8d,\n\taccessorbinary9d,\n\taccessorbinary10d\n];\nvar BLOCKED_BINARY = [\n\tblockedbinary2d, // 0\n\tblockedbinary3d,\n\tblockedbinary4d,\n\tblockedbinary5d,\n\tblockedbinary6d,\n\tblockedbinary7d,\n\tblockedbinary8d,\n\tblockedbinary9d,\n\tblockedbinary10d // 8\n];\nvar BLOCKED_ACCESSOR_BINARY = [\n\tblockedaccessorbinary2d, // 0\n\tblockedaccessorbinary3d,\n\tblockedaccessorbinary4d,\n\tblockedaccessorbinary5d,\n\tblockedaccessorbinary6d,\n\tblockedaccessorbinary7d,\n\tblockedaccessorbinary8d,\n\tblockedaccessorbinary9d,\n\tblockedaccessorbinary10d // 8\n];\nvar MAX_DIMS = BINARY.length - 1;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if at least one ndarray data buffer implements the accessor protocol.\n*\n* @private\n* @param {ndarrayLike} x - first ndarray\n* @param {ndarrayLike} y - second ndarray\n* @param {ndarrayLike} z - third ndarray\n* @returns {boolean} boolean indicating whether an ndarray data buffer implements the accessor protocol\n*/\nfunction hasAccessors( x, y, z ) {\n\treturn anyIsEntryIn( [ x, y, z ], 'accessorProtocol', true );\n}\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in input ndarrays and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing two input arrays and one output array\n* @param {Callback} fcn - binary callback\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import getData from '@stdlib/ndarray-data-buffer';\n*\n* function add( a, b ) {\n*     return a + b;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zbuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n* var sz = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarrays:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n* var y = new ndarray( 'float64', ybuf, shape, sy, oy, 'row-major' );\n* var z = new ndarray( 'float64', zbuf, shape, sz, oz, 'row-major' );\n*\n* // Apply the binary function:\n* binary( [ x, y, z ], add );\n*\n* console.log( getData( z ) );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction binary( arrays, fcn ) { // eslint-disable-line max-statements\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar zmmv;\n\tvar shx;\n\tvar shy;\n\tvar shz;\n\tvar iox;\n\tvar ioy;\n\tvar ioz;\n\tvar len;\n\tvar ord;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\tz = ndarray2object( arrays[ 2 ] );\n\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tshz = z.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length || ndims !== shz.length ) {\n\t\tthrow new Error( format( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == %d. ndims(y) == %d. ndims(z) == %d.', ndims, shy.length, shz.length ) );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ ndims ]( x, y, z, fcn );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] || d !== shz[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Arrays must have the same shape.' );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ ndims ]( x, y, z, fcn );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\n\t// Determine whether the ndarrays have only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tz.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tz.strides = [ sz[i] ];\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn ACCESSOR_BINARY[ 1 ]( x, y, z, fcn );\n\t\t}\n\t\treturn BINARY[ 1 ]( x, y, z, fcn );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\tioz = iterationOrder( sz ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sx );\n\tif ( iox !== 0 && ioy !== 0 && ioz !== 0 && ord === strides2order( sy ) && ord === strides2order( sz ) ) { // eslint-disable-line max-len\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\t\tzmmv = minmaxViewBufferIndex( shz, sz, z.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif (\n\t\t\tlen === ( xmmv[1]-xmmv[0]+1 ) &&\n\t\t\tlen === ( ymmv[1]-ymmv[0]+1 ) &&\n\t\t\tlen === ( zmmv[1]-zmmv[0]+1 )\n\t\t) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioz === 1 ) {\n\t\t\t\toz = zmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toz = zmmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tz.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tz.strides = [ ioz ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tz.offset = oz;\n\t\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\t\treturn ACCESSOR_BINARY[ 1 ]( x, y, z, fcn );\n\t\t\t}\n\t\t\treturn BINARY[ 1 ]( x, y, z, fcn );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\t\treturn ACCESSOR_BINARY[ ndims ]( x, y, z, ord === 1, fcn );\n\t\t\t}\n\t\t\treturn BINARY[ ndims ]( x, y, z, ord === 1, fcn );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( hasAccessors( x, y, z ) ) {\n\t\t\treturn BLOCKED_ACCESSOR_BINARY[ ndims-2 ]( x, y, z, fcn );\n\t\t}\n\t\treturn BLOCKED_BINARY[ ndims-2 ]( x, y, z, fcn );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( hasAccessors( x, y, z ) ) {\n\t\treturn accessorbinarynd( x, y, z, fcn );\n\t}\n\tbinarynd( x, y, z, fcn );\n}\n\n\n// EXPORTS //\n\nexport default binary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in zero-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0 ] );\n* var ybuf = new Float64Array( [ 2.0 ] );\n* var zbuf = new Float64Array( [ 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n* var sz = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary0d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 3.0 ]\n*/\nfunction binary0d( x, y, z, fcn ) {\n\tz.data[ z.offset ] = fcn( x.data[ x.offset ], y.data[ y.offset ] );\n}\n\n\n// EXPORTS //\n\nexport default binary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in one-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 12 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n* var sz = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary1d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary1d( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dy0;\n\tvar dz0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\tdz0 = z.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\tiz += dz0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary2d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary2d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t\tdz0 = sz[ 1 ];\n\t\tdz1 = sz[ 0 ] - ( S0*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\tiz += dz0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t\tiz += dz1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary3d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary3d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 2 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[2] );\n\t\tdz2 = sz[ 0 ] - ( S1*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\tiz += dz0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t\tiz += dz1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t\tiz += dz2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary4d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary4d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t\tdz0 = sz[ 3 ];\n\t\tdz1 = sz[ 2 ] - ( S0*sz[3] );\n\t\tdz2 = sz[ 1 ] - ( S1*sz[2] );\n\t\tdz3 = sz[ 0 ] - ( S2*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t\tiz += dz2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t\tiz += dz3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary5d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary5d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t\tdz0 = sz[ 4 ];\n\t\tdz1 = sz[ 3 ] - ( S0*sz[4] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[3] );\n\t\tdz3 = sz[ 1 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 0 ] - ( S3*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t\tiz += dz1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t\tiz += dz2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t\tiz += dz3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t\tiz += dz4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary6d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary6d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t\tdz0 = sz[ 5 ];\n\t\tdz1 = sz[ 4 ] - ( S0*sz[5] );\n\t\tdz2 = sz[ 3 ] - ( S1*sz[4] );\n\t\tdz3 = sz[ 2 ] - ( S2*sz[3] );\n\t\tdz4 = sz[ 1 ] - ( S3*sz[2] );\n\t\tdz5 = sz[ 0 ] - ( S4*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t\tiz += dz3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t\tiz += dz4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t\tiz += dz5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary7d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary7d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t\tdz0 = sz[ 6 ];\n\t\tdz1 = sz[ 5 ] - ( S0*sz[6] );\n\t\tdz2 = sz[ 4 ] - ( S1*sz[5] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[4] );\n\t\tdz4 = sz[ 2 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 1 ] - ( S4*sz[2] );\n\t\tdz6 = sz[ 0 ] - ( S5*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t\tiz += dz3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t\tiz += dz4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t\tiz += dz5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t\tiz += dz6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary8d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary8d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t\tdz0 = sz[ 7 ];\n\t\tdz1 = sz[ 6 ] - ( S0*sz[7] );\n\t\tdz2 = sz[ 5 ] - ( S1*sz[6] );\n\t\tdz3 = sz[ 4 ] - ( S2*sz[5] );\n\t\tdz4 = sz[ 3 ] - ( S3*sz[4] );\n\t\tdz5 = sz[ 2 ] - ( S4*sz[3] );\n\t\tdz6 = sz[ 1 ] - ( S5*sz[2] );\n\t\tdz7 = sz[ 0 ] - ( S6*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t\tiz += dz4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t\tiz += dz5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t\tiz += dz6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t\tiz += dz7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary9d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary9d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t\tdz0 = sz[ 8 ];\n\t\tdz1 = sz[ 7 ] - ( S0*sz[8] );\n\t\tdz2 = sz[ 6 ] - ( S1*sz[7] );\n\t\tdz3 = sz[ 5 ] - ( S2*sz[6] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[5] );\n\t\tdz5 = sz[ 3 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 2 ] - ( S5*sz[3] );\n\t\tdz7 = sz[ 1 ] - ( S6*sz[2] );\n\t\tdz8 = sz[ 0 ] - ( S7*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t\tiz += dz5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t\tiz += dz6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t\tiz += dz7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t\tiz += dz8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len, max-lines-per-function */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* binary10d( x, y, z, true, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary10d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t\tdz0 = sz[ 9 ];\n\t\tdz1 = sz[ 8 ] - ( S0*sz[9] );\n\t\tdz2 = sz[ 7 ] - ( S1*sz[8] );\n\t\tdz3 = sz[ 6 ] - ( S2*sz[7] );\n\t\tdz4 = sz[ 5 ] - ( S3*sz[6] );\n\t\tdz5 = sz[ 4 ] - ( S4*sz[5] );\n\t\tdz6 = sz[ 3 ] - ( S5*sz[4] );\n\t\tdz7 = sz[ 2 ] - ( S6*sz[3] );\n\t\tdz8 = sz[ 1 ] - ( S7*sz[2] );\n\t\tdz9 = sz[ 0 ] - ( S8*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t\tdz9 = sz[ 9 ] - ( S8*sz[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t\tiz += dz6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t\tiz += dz7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t\tiz += dz8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t\tiz += dz9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in zero-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0 ] );\n* var ybuf = toAccessorArray( [ 2.0 ] );\n* var zbuf = toAccessorArray( [ 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n* var sz = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary0d( x, y, z, fcn );\n*\n* var v = z.data.get( 0 );\n* // returns 3.0\n*/\nfunction binary0d( x, y, z, fcn ) {\n\tz.accessors[ 1 ]( z.data, z.offset, fcn( x.accessors[ 0 ]( x.data, x.offset ), y.accessors[ 0 ]( y.data, y.offset ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default binary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in one-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 12 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n* var sz = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary1d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary1d( x, y, z, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dy0;\n\tvar dz0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\tdz0 = z.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t\tiz += dz0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary2d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary2d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t\tdz0 = sz[ 1 ];\n\t\tdz1 = sz[ 0 ] - ( S0*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t\tiz += dz0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t\tiz += dz1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary3d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary3d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 2 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[2] );\n\t\tdz2 = sz[ 0 ] - ( S1*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t\tiz += dz0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t\tiz += dz1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t\tiz += dz2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary4d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary4d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t\tdz0 = sz[ 3 ];\n\t\tdz1 = sz[ 2 ] - ( S0*sz[3] );\n\t\tdz2 = sz[ 1 ] - ( S1*sz[2] );\n\t\tdz3 = sz[ 0 ] - ( S2*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t\tiz += dz2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t\tiz += dz3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary5d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary5d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t\tdz0 = sz[ 4 ];\n\t\tdz1 = sz[ 3 ] - ( S0*sz[4] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[3] );\n\t\tdz3 = sz[ 1 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 0 ] - ( S3*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t\tiz += dz1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t\tiz += dz2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t\tiz += dz3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t\tiz += dz4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary6d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary6d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t\tdz0 = sz[ 5 ];\n\t\tdz1 = sz[ 4 ] - ( S0*sz[5] );\n\t\tdz2 = sz[ 3 ] - ( S1*sz[4] );\n\t\tdz3 = sz[ 2 ] - ( S2*sz[3] );\n\t\tdz4 = sz[ 1 ] - ( S3*sz[2] );\n\t\tdz5 = sz[ 0 ] - ( S4*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t\tiz += dz3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t\tiz += dz4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t\tiz += dz5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary7d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary7d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t\tdz0 = sz[ 6 ];\n\t\tdz1 = sz[ 5 ] - ( S0*sz[6] );\n\t\tdz2 = sz[ 4 ] - ( S1*sz[5] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[4] );\n\t\tdz4 = sz[ 2 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 1 ] - ( S4*sz[2] );\n\t\tdz6 = sz[ 0 ] - ( S5*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t\tiz += dz3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t\tiz += dz4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t\tiz += dz5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t\tiz += dz6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary8d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary8d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t\tdz0 = sz[ 7 ];\n\t\tdz1 = sz[ 6 ] - ( S0*sz[7] );\n\t\tdz2 = sz[ 5 ] - ( S1*sz[6] );\n\t\tdz3 = sz[ 4 ] - ( S2*sz[5] );\n\t\tdz4 = sz[ 3 ] - ( S3*sz[4] );\n\t\tdz5 = sz[ 2 ] - ( S4*sz[3] );\n\t\tdz6 = sz[ 1 ] - ( S5*sz[2] );\n\t\tdz7 = sz[ 0 ] - ( S6*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t\tiz += dz4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t\tiz += dz5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t\tiz += dz6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t\tiz += dz7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary9d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary9d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t\tdz0 = sz[ 8 ];\n\t\tdz1 = sz[ 7 ] - ( S0*sz[8] );\n\t\tdz2 = sz[ 6 ] - ( S1*sz[7] );\n\t\tdz3 = sz[ 5 ] - ( S2*sz[6] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[5] );\n\t\tdz5 = sz[ 3 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 2 ] - ( S5*sz[3] );\n\t\tdz7 = sz[ 1 ] - ( S6*sz[2] );\n\t\tdz8 = sz[ 0 ] - ( S7*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t\tiz += dz5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t\tiz += dz6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t\tiz += dz7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t\tiz += dz8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* binary10d( x, y, z, true, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction binary10d( x, y, z, isRowMajor, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, dz#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tsz = z.strides;\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t\tdz0 = sz[ 9 ];\n\t\tdz1 = sz[ 8 ] - ( S0*sz[9] );\n\t\tdz2 = sz[ 7 ] - ( S1*sz[8] );\n\t\tdz3 = sz[ 6 ] - ( S2*sz[7] );\n\t\tdz4 = sz[ 5 ] - ( S3*sz[6] );\n\t\tdz5 = sz[ 4 ] - ( S4*sz[5] );\n\t\tdz6 = sz[ 3 ] - ( S5*sz[4] );\n\t\tdz7 = sz[ 2 ] - ( S6*sz[3] );\n\t\tdz8 = sz[ 1 ] - ( S7*sz[2] );\n\t\tdz9 = sz[ 0 ] - ( S8*sz[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t\tdz0 = sz[ 0 ];\n\t\tdz1 = sz[ 1 ] - ( S0*sz[0] );\n\t\tdz2 = sz[ 2 ] - ( S1*sz[1] );\n\t\tdz3 = sz[ 3 ] - ( S2*sz[2] );\n\t\tdz4 = sz[ 4 ] - ( S3*sz[3] );\n\t\tdz5 = sz[ 5 ] - ( S4*sz[4] );\n\t\tdz6 = sz[ 6 ] - ( S5*sz[5] );\n\t\tdz7 = sz[ 7 ] - ( S6*sz[6] );\n\t\tdz8 = sz[ 8 ] - ( S7*sz[7] );\n\t\tdz9 = sz[ 9 ] - ( S8*sz[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\tiz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\tzset = z.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t\tiz += dz6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t\tiz += dz7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t\tiz += dz8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t\tiz += dz9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default binary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary2d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary2d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar ox1;\n\tvar oy1;\n\tvar oz1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\toz1 = oz + ( j1*sz[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary3d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary3d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar oz1;\n\tvar oz2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\toz2 = oz + ( j2*sz[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary4d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary4d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\toz3 = oz + ( j3*sz[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-statements, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary5d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary5d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\toz4 = oz + ( j4*sz[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary6d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary6d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\toz5 = oz + ( j5*sz[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary7d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary7d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\toz6 = oz + ( j6*sz[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary8d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary8d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\toz7 = oz + ( j7*sz[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary9d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary9d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\toz8 = oz + ( j8*sz[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function, max-lines */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = new Float64Array( 12 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n* var z = {\n*     'dtype': 'float64',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major'\n* };\n*\n* // Apply the binary function:\n* blockedbinary10d( x, y, z, fcn );\n*\n* console.log( z.data );\n* // => <Float64Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary10d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar oz9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\toz9 = oz + ( j9*sz[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tdz9 = sz[9] - ( s8*sz[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\toz8 = oz9 + ( j8*sz[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzbuf[ iz ] = fcn( xbuf[ ix ], ybuf[ iy ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 6, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n* var sz = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary2d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary2d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar dz0;\n\tvar dz1;\n\tvar ox1;\n\tvar oy1;\n\tvar oz1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\toz1 = oz + ( j1*sz[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t\tiz += dz0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t\tiz += dz1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in three-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n* var sz = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary3d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary3d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar oz1;\n\tvar oz2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\toz2 = oz + ( j2*sz[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t\tiz += dz2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in four-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 12, 4, 2, 1 ];\n* var sz = [ 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary4d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary4d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\toz3 = oz + ( j3*sz[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in five-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary5d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary5d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\toz4 = oz + ( j4*sz[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in six-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary6d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary6d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\toz5 = oz + ( j5*sz[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in seven-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary7d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary7d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\toz6 = oz + ( j6*sz[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in eight-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary8d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary8d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\toz7 = oz + ( j7*sz[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in nine-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary9d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary9d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\toz8 = oz + ( j8*sz[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len, max-statements, max-lines-per-function, max-lines */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-binary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-binary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in ten-dimensional input ndarrays and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing input ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Object} z - object containing output ndarray meta data\n* @param {string} z.dtype - data type\n* @param {Collection} z.data - data buffer\n* @param {NonNegativeIntegerArray} z.shape - dimensions\n* @param {IntegerArray} z.strides - stride lengths\n* @param {NonNegativeInteger} z.offset - index offset\n* @param {string} z.order - specifies whether `z` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} z.accessors - data buffer accessors\n* @param {Callback} fcn - binary callback\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import copy from '@stdlib/array-base-copy';\n*\n* function fcn( x, y ) {\n*     return x + y;\n* }\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = toAccessorArray( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var zbuf = toAccessorArray( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sz = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n* var oz = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'generic',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n* var z = {\n*     'dtype': 'generic',\n*     'data': zbuf,\n*     'shape': shape,\n*     'strides': sz,\n*     'offset': oz,\n*     'order': 'row-major',\n*     'accessors': accessors( zbuf ).accessors\n* };\n*\n* // Apply the binary function:\n* blockedbinary10d( x, y, z, fcn );\n*\n* console.log( copy( z.data ) );\n* // => [ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0 ]\n*/\nfunction blockedbinary10d( x, y, z, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar zbuf;\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar dz0;\n\tvar dz1;\n\tvar dz2;\n\tvar dz3;\n\tvar dz4;\n\tvar dz5;\n\tvar dz6;\n\tvar dz7;\n\tvar dz8;\n\tvar dz9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar oz1;\n\tvar oz2;\n\tvar oz3;\n\tvar oz4;\n\tvar oz5;\n\tvar oz6;\n\tvar oz7;\n\tvar oz8;\n\tvar oz9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ox;\n\tvar oy;\n\tvar oz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, dz#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides, z.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\tsz = o.sz;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype, z.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\toz = z.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\tzbuf = z.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\tdz0 = sz[0];\n\n\t// Cache accessors:\n\txget = x.accessors[0];\n\tyget = y.accessors[0];\n\tzset = z.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\toz9 = oz + ( j9*sz[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tdz9 = sz[9] - ( s8*sz[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\toz8 = oz9 + ( j8*sz[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tdz8 = sz[8] - ( s7*sz[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\toz7 = oz8 + ( j7*sz[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tdz7 = sz[7] - ( s6*sz[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\toz6 = oz7 + ( j6*sz[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tdz6 = sz[6] - ( s5*sz[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\toz5 = oz6 + ( j5*sz[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tdz5 = sz[5] - ( s4*sz[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\toz4 = oz5 + ( j4*sz[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tdz4 = sz[4] - ( s3*sz[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\toz3 = oz4 + ( j3*sz[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tdz3 = sz[3] - ( s2*sz[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\toz2 = oz3 + ( j2*sz[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tdz2 = sz[2] - ( s1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\toz1 = oz2 + ( j1*sz[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tiz = oz1 + ( j0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\t\t\t\t\t\t\t\t\t\t\tdz1 = sz[1] - ( s0*sz[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzset( zbuf, iz, fcn( xget( xbuf, ix ), yget( ybuf, iy ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiz += dz8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t\tiz += dz9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedbinary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copy from '@stdlib/array-base-copy-indexed';\nimport ndarray from '@stdlib/ndarray-base-ctor';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport getStrides from '@stdlib/ndarray-base-strides';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape.\n*\n* ## Notes\n*\n* -   The returned array is a view on the input array data buffer. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the view may affect multiple elements. If you need to write to the returned array, copy the array before performing operations which may mutate elements.\n*\n* @param {ndarray} arr - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = broadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = broadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction broadcastArray( arr, shape ) {\n\tvar strides;\n\tvar dim;\n\tvar sh;\n\tvar st;\n\tvar N;\n\tvar M;\n\tvar d;\n\tvar i;\n\tvar j;\n\n\tN = shape.length;\n\tsh = getShape( arr, false );\n\tM = sh.length;\n\tif ( N < M ) {\n\t\tthrow new Error( 'invalid argument. Cannot broadcast an array to a shape having fewer dimensions. Arrays can only be broadcasted to shapes having the same or more dimensions.' );\n\t}\n\t// Initialize a strides array...\n\tstrides = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tstrides.push( 0 );\n\t}\n\t// Determine the output array strides...\n\tst = getStrides( arr, false );\n\tfor ( i = N-1; i >= 0; i-- ) {\n\t\tj = M - N + i;\n\t\tif ( j < 0 ) {\n\t\t\t// Prepended singleton dimension; stride is zero...\n\t\t\tcontinue;\n\t\t}\n\t\td = sh[ j ];\n\t\tdim = shape[ i ];\n\t\tif ( dim !== 0 && dim < d ) {\n\t\t\tthrow new Error( format( 'invalid argument. Input array cannot be broadcast to the specified shape, as the specified shape has a dimension whose size is less than the size of the corresponding dimension in the input array. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t\tif ( d === dim ) {\n\t\t\tstrides[ i ] = st[ j ];\n\t\t} else if ( d === 1 ) {\n\t\t\t// In order to broadcast dimensions, we set the stride for that dimension to zero...\n\t\t\tstrides[ i ] = 0;\n\t\t} else {\n\t\t\t// At this point, we know that `dim > d` and that `d` does not equal `1` (e.g., `dim=3` and `d=2`); in which case, the shapes are considered incompatible (even for desired shapes which are multiples of array dimensions, as might be desired when \"tiling\" an array; e.g., `dim=4` and `d=2`)...\n\t\t\tthrow new Error( format( 'invalid argument. Input array and the specified shape are broadcast incompatible. Array shape: (%s). Desired shape: (%s). Dimension: %u.', copy( sh ).join( ', ' ), copy( shape ).join( ', ' ), i ) );\n\t\t}\n\t}\n\treturn ndarray( getDType( arr ), getData( arr ), copy( shape ), strides, getOffset( arr ), getOrder( arr ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default broadcastArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport broadcast from '@stdlib/ndarray-base-broadcast-array';\nimport getShape from '@stdlib/ndarray-base-shape';\n\n\n// MAIN //\n\n/**\n* Broadcasts an ndarray to a specified shape if and only if the specified shape differs from the provided ndarray's shape.\n*\n* ## Notes\n*\n* -   If a provided ndarray has the same shape as the specified shape, the function returns the provided ndarray.\n* -   If a provided ndarray has a different (broadcast compatible) shape than the specified shape, the function returns a new (base) ndarray view of the provided ndarray's data. The view is typically **not** contiguous. As more than one element of a returned view may refer to the same memory location, writing to the view may affect multiple elements. If you need to write to the returned array, copy the array before performing operations which may mutate elements.\n*\n* @param {ndarray} arr - input array\n* @param {NonNegativeIntegerArray} shape - desired shape\n* @throws {Error} input array cannot have more dimensions than the desired shape\n* @throws {Error} input array dimension sizes must be `1` or equal to the corresponding dimension in the provided shape\n* @throws {Error} input array and desired shape must be broadcast compatible\n* @returns {ndarray} broadcasted array\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var shx = x.shape;\n* // returns [ 2, 2 ]\n*\n* var y = maybeBroadcastArray( x, [ 3, 2, 2 ] );\n* // returns <ndarray>\n*\n* var shy = y.shape;\n* // returns [ 3, 2, 2 ]\n*\n* var v = y.get( 0, 0, 0 );\n* // returns 1\n*\n* v = y.get( 0, 0, 1 );\n* // returns 2\n*\n* v = y.get( 1, 0, 0 );\n* // returns 1\n*\n* v = y.get( 1, 1, 0 );\n* // returns 3\n*\n* v = y.get( 2, 0, 0 );\n* // returns 1\n*\n* v = y.get( 2, 1, 1 );\n* // returns 4\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\n* // returns <ndarray>\n*\n* var y = maybeBroadcastArray( x, [ 3, 2 ] );\n* // throws <Error>\n*/\nfunction maybeBroadcastArray( arr, shape ) {\n\tvar sh;\n\tvar N;\n\tvar i;\n\n\tN = shape.length;\n\tsh = getShape( arr, false );\n\n\t// Check whether we need to broadcast the input array...\n\tif ( sh.length === N ) {\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t// Check whether dimensions match...\n\t\t\tif ( sh[ i ] !== shape[ i ] ) {\n\t\t\t\t// We found a mismatched dimension; delegate to `broadcast` to ensure that the input array is broadcast compatible with the desired array shape...\n\t\t\t\treturn broadcast( arr, shape );\n\t\t\t}\n\t\t}\n\t\treturn arr;\n\t}\n\t// If we are provided an array having a different rank (i.e., number of dimensions) than the desired shape, assume we need to broadcast, delegating to `broadcast` to ensure that the input array is broadcast compatible with the desired array shape...\n\treturn broadcast( arr, shape );\n}\n\n\n// EXPORTS //\n\nexport default maybeBroadcastArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Buffer === 'function' ) ? Buffer : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Buffer constructor.\n*\n* @module @stdlib/buffer-ctor\n*\n* @example\n* import ctor from '@stdlib/buffer-ctor';\n*\n* var b = new ctor( [ 1, 2, 3, 4 ] );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nimport hasNodeBufferSupport from '@stdlib/assert-has-node-buffer-support';\nimport main from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasNodeBufferSupport() ) {\n\tctor = main;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = require( 'buffer' ).Buffer; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport GlobalBuffer from './buffer.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Buffer` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Buffer` support\n*\n* @example\n* var bool = hasNodeBufferSupport();\n* // returns <boolean>\n*/\nfunction hasNodeBufferSupport() {\n\tvar bool;\n\tvar b;\n\n\tif ( typeof GlobalBuffer !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tif ( typeof GlobalBuffer.from === 'function' ) {\n\t\t\tb = GlobalBuffer.from( [ 1, 2, 3, 4 ] );\n\t\t} else {\n\t\t\tb = new GlobalBuffer( [ 1, 2, 3, 4 ] ); // Note: this is deprecated behavior starting in Node v6 (see https://nodejs.org/api/buffer.html#buffer_new_buffer_array)\n\t\t}\n\t\tbool = (\n\t\t\tisBuffer( b ) &&\n\t\t\tb[ 0 ] === 1 &&\n\t\t\tb[ 1 ] === 2 &&\n\t\t\tb[ 2 ] === 3 &&\n\t\t\tb[ 3 ] === 4\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasNodeBufferSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write (browser) polyfill\n\n// MAIN //\n\n/**\n* Buffer constructor.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Buffer from '@stdlib/buffer-ctor';\nimport Float64Array from '@stdlib/array-float64';\nimport Float32Array from '@stdlib/array-float32';\nimport Int16Array from '@stdlib/array-int16';\nimport Int32Array from '@stdlib/array-int32';\nimport Int8Array from '@stdlib/array-int8';\nimport Uint16Array from '@stdlib/array-uint16';\nimport Uint32Array from '@stdlib/array-uint32';\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint8ClampedArray from '@stdlib/array-uint8c';\nimport Complex64Array from '@stdlib/array-complex64';\nimport Complex128Array from '@stdlib/array-complex128';\n\n\n// MAIN //\n\n// Mapping from data types to underlying buffer constructors...\nvar ctors = {\n\t'binary': Buffer,\n\t'float64': Float64Array,\n\t'float32': Float32Array,\n\t'generic': Array, // TODO: replace with `stdlib` pkg\n\t'int16': Int16Array,\n\t'int32': Int32Array,\n\t'int8': Int8Array,\n\t'uint16': Uint16Array,\n\t'uint32': Uint32Array,\n\t'uint8': Uint8Array,\n\t'uint8c': Uint8ClampedArray,\n\t'complex64': Complex64Array,\n\t'complex128': Complex128Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport table from './ctors.js';\n\n\n// MAIN //\n\n/**\n* Returns an ndarray data buffer constructor.\n*\n* @param {string} dtype - data type\n* @returns {(Function|null)} data buffer constructor or null\n*\n* @example\n* var ctor = ctors( 'float64' );\n* // returns <Function>\n*\n* @example\n* var ctor = ctors( 'float' );\n* // returns null\n*/\nfunction ctors( dtype ) {\n\treturn table[ dtype ] || null;\n}\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Allocate a buffer having a specified number of bytes.\n*\n* @module @stdlib/buffer-alloc-unsafe\n*\n* @example\n* import allocUnsafe from '@stdlib/buffer-alloc-unsafe';\n*\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\n\n// MODULES //\n\nimport hasAllocUnsafe from './has_alloc_unsafe.js';\nimport main from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar allocUnsafe;\nif ( hasAllocUnsafe ) {\n\tallocUnsafe = main;\n} else {\n\tallocUnsafe = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default allocUnsafe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport Buffer from '@stdlib/buffer-ctor';\n\n\n// MAIN //\n\nvar bool = isFunction( Buffer.allocUnsafe );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/string-format';\nimport Buffer from '@stdlib/buffer-ctor';\n\n\n// MAIN //\n\n/**\n* Allocates a buffer having a specified number of bytes.\n*\n* ## Notes\n*\n* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.\n* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.\n*\n* @param {NonNegativeInteger} size - number of bytes to allocate\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\nfunction allocUnsafe( size ) {\n\tif ( !isNonNegativeInteger( size ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', size ) );\n\t}\n\treturn Buffer.allocUnsafe( size );\n}\n\n\n// EXPORTS //\n\nexport default allocUnsafe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/string-format';\nimport Buffer from '@stdlib/buffer-ctor';\n\n\n// MAIN //\n\n/**\n* Allocates a buffer having a specified number of bytes.\n*\n* ## Notes\n*\n* -   The underlying memory of returned `Buffer` instances is not initialized. Memory contents are unknown and may contain sensitive data.\n* -   When the size is less than half the pool size (specified on the `Buffer` constructor), memory is allocated from the `Buffer` pool for faster allocation of new `Buffer` instances.\n*\n* @param {NonNegativeInteger} size - number of bytes to allocate\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {Buffer} new `Buffer` instance\n*\n* @example\n* var buf = allocUnsafe( 10 );\n* // returns <Buffer>\n*/\nfunction allocUnsafe( size ) {\n\tif ( !isNonNegativeInteger( size ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', size ) );\n\t}\n\treturn new Buffer( size );\n}\n\n\n// EXPORTS //\n\nexport default allocUnsafe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bufferCtors from '@stdlib/ndarray-base-buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer-alloc-unsafe';\nimport zeros from './zeros.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a zero-filled generic array.\n*\n* @private\n* @param {NonNegativeInteger} size - buffer size\n* @returns {Array} zero-filled generic array\n*/\nfunction generic( size ) {\n\tvar buf;\n\tvar i;\n\n\tbuf = [];\n\tfor ( i = 0; i < size; i++ ) {\n\t\tbuf.push( 0 );\n\t}\n\treturn buf;\n}\n\n/**\n* Returns a zero-filled binary buffer.\n*\n* @private\n* @param {NonNegativeInteger} size - buffer size\n* @returns {Buffer} zero-filled binary buffer\n*/\nfunction binary( size ) {\n\treturn zeros( allocUnsafe( size ) );\n}\n\n/**\n* Returns a zero-filled typed array.\n*\n* @private\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(TypedArray|null)} zero-filled typed array\n*/\nfunction typedarray( dtype, size ) {\n\tvar ctor = bufferCtors( dtype );\n\tif ( ctor ) {\n\t\treturn new ctor( size );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled contiguous linear ndarray data buffer.\n*\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(Array|TypedArray|Buffer|null)} data buffer\n*\n* @example\n* var buf = buffer( 'float64', 3 );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]\n*/\nfunction buffer( dtype, size ) {\n\tif ( dtype === 'generic' ) {\n\t\treturn generic( size );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( size );\n\t}\n\treturn typedarray( dtype, size );\n}\n\n\n// EXPORTS //\n\nexport default buffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills an array-like object with zeros.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} v - array-like object to fill\n* @returns {(Array|TypedArray|Buffer)} input value\n*\n* @example\n* var arr = zeros( new Array( 2 ) );\n* // returns [ 0, 0 ]\n*/\nfunction zeros( v ) {\n\tvar i;\n\tfor ( i = 0; i < v.length; i++ ) {\n\t\tv[ i ] = 0;\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport zeros from '@stdlib/array-base-zeros';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport ndarray from '@stdlib/ndarray-base-ctor';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Broadcasts a scalar value to an ndarray having a specified shape.\n*\n* @param {*} value - scalar value\n* @param {string} dtype - output array data type\n* @param {NonNegativeIntegerArray} shape - output array shape\n* @param {string} order - memory layout (either row-major or column-major)\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var x = broadcastScalar( 1.0, 'float64', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 2, 2 ]\n*\n* var dt = x.dtype;\n* // returns 'float64'\n*\n* var v = x.get( 0, 1 );\n* // returns 1.0\n*/\nfunction broadcastScalar( value, dtype, shape, order ) {\n\tvar buf;\n\tvar set;\n\n\tbuf = buffer( dtype, 1 );\n\tif ( buf === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a recognized data type. Value: `%s`.', dtype ) );\n\t}\n\tif ( /^complex/.test( dtype ) && typeof value === 'number' ) {\n\t\tvalue = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dtype );\n\t} else {\n\t\tset = setter( dtype );\n\t}\n\tset( buf, 0, value );\n\treturn new ndarray( dtype, buf, shape, zeros( shape.length ), 0, order );\n}\n\n\n// EXPORTS //\n\nexport default broadcastScalar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\n\n\n// MAIN //\n\n/**\n* Returns a zero-filled \"generic\" array.\n*\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var out = zeros( 3 );\n* // returns [ 0.0, 0.0, 0.0 ]\n*/\nfunction zeros( len ) {\n\treturn filled( 0.0, len );\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray floating-point data type.\n*\n* @name isFloatingPointDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray floating-point data type\n*\n* @example\n* var bool = isFloatingPointDataType( 'binary' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'float32' );\n* // returns true\n*\n* bool = isFloatingPointDataType( 'float64' );\n* // returns true\n*\n* bool = isFloatingPointDataType( 'generic' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'int16' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'int32' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'int8' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint16' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint32' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint8' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'uint8c' );\n* // returns false\n*\n* bool = isFloatingPointDataType( 'foo' );\n* // returns false\n*/\nvar isFloatingPointDataType = contains( dtypes( 'floating_point' ) );\n\n\n// EXPORTS //\n\nexport default isFloatingPointDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray real-valued floating-point data type.\n*\n* @name isRealFloatingPointDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray real-valued floating-point data type\n*\n* @example\n* var bool = isRealFloatingPointDataType( 'binary' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'float32' );\n* // returns true\n*\n* bool = isRealFloatingPointDataType( 'float64' );\n* // returns true\n*\n* bool = isRealFloatingPointDataType( 'generic' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'int16' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'int32' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'int8' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint16' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint32' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint8' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'uint8c' );\n* // returns false\n*\n* bool = isRealFloatingPointDataType( 'foo' );\n* // returns false\n*/\nvar isRealFloatingPointDataType = contains( dtypes( 'real_floating_point' ) ); // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default isRealFloatingPointDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray complex-valued floating-point data type.\n*\n* @name isComplexFloatingPointDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray complex-valued floating-point data type\n*\n* @example\n* var bool = isComplexFloatingPointDataType( 'binary' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'complex64' );\n* // returns true\n*\n* bool = isComplexFloatingPointDataType( 'complex128' );\n* // returns true\n*\n* bool = isComplexFloatingPointDataType( 'float32' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'float64' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'generic' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'int16' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'int32' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'int8' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint16' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint32' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint8' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'uint8c' );\n* // returns false\n*\n* bool = isComplexFloatingPointDataType( 'foo' );\n* // returns false\n*/\nvar isComplexFloatingPointDataType = contains( dtypes( 'complex_floating_point' ) ); // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default isComplexFloatingPointDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray integer data type.\n*\n* @name isIntegerDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray integer data type\n*\n* @example\n* var bool = isIntegerDataType( 'binary' );\n* // returns false\n*\n* bool = isIntegerDataType( 'float32' );\n* // returns false\n*\n* bool = isIntegerDataType( 'float64' );\n* // returns false\n*\n* bool = isIntegerDataType( 'generic' );\n* // returns false\n*\n* bool = isIntegerDataType( 'int16' );\n* // returns true\n*\n* bool = isIntegerDataType( 'int32' );\n* // returns true\n*\n* bool = isIntegerDataType( 'int8' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint16' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint32' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint8' );\n* // returns true\n*\n* bool = isIntegerDataType( 'uint8c' );\n* // returns true\n*\n* bool = isIntegerDataType( 'foo' );\n* // returns false\n*/\nvar isIntegerDataType = contains( dtypes( 'integer' ) );\n\n\n// EXPORTS //\n\nexport default isIntegerDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray signed integer data type.\n*\n* @name isSignedIntegerDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray signed integer data type\n*\n* @example\n* var bool = isSignedIntegerDataType( 'binary' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'float32' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'float64' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'generic' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'int16' );\n* // returns true\n*\n* bool = isSignedIntegerDataType( 'int32' );\n* // returns true\n*\n* bool = isSignedIntegerDataType( 'int8' );\n* // returns true\n*\n* bool = isSignedIntegerDataType( 'uint16' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'uint32' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'uint8' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'uint8c' );\n* // returns false\n*\n* bool = isSignedIntegerDataType( 'foo' );\n* // returns false\n*/\nvar isSignedIntegerDataType = contains( dtypes( 'signed_integer' ) );\n\n\n// EXPORTS //\n\nexport default isSignedIntegerDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray unsigned integer data type.\n*\n* @name isUnsignedIntegerDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray unsigned integer data type\n*\n* @example\n* var bool = isUnsignedIntegerDataType( 'binary' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'float32' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'float64' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'generic' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'int16' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'int32' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'int8' );\n* // returns false\n*\n* bool = isUnsignedIntegerDataType( 'uint16' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'uint32' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'uint8' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'uint8c' );\n* // returns true\n*\n* bool = isUnsignedIntegerDataType( 'foo' );\n* // returns false\n*/\nvar isUnsignedIntegerDataType = contains( dtypes( 'unsigned_integer' ) );\n\n\n// EXPORTS //\n\nexport default isUnsignedIntegerDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray real-valued data type.\n*\n* @name isRealDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray real-valued data type\n*\n* @example\n* var bool = isRealDataType( 'binary' );\n* // returns false\n*\n* bool = isRealDataType( 'float32' );\n* // returns true\n*\n* bool = isRealDataType( 'float64' );\n* // returns true\n*\n* bool = isRealDataType( 'complex128' );\n* // returns false\n*\n* bool = isRealDataType( 'generic' );\n* // returns false\n*\n* bool = isRealDataType( 'int16' );\n* // returns true\n*\n* bool = isRealDataType( 'int32' );\n* // returns true\n*\n* bool = isRealDataType( 'int8' );\n* // returns true\n*\n* bool = isRealDataType( 'uint16' );\n* // returns true\n*\n* bool = isRealDataType( 'uint32' );\n* // returns true\n*\n* bool = isRealDataType( 'uint8' );\n* // returns true\n*\n* bool = isRealDataType( 'uint8c' );\n* // returns true\n*\n* bool = isRealDataType( 'foo' );\n* // returns false\n*/\nvar isRealDataType = contains( dtypes( 'real' ) );\n\n\n// EXPORTS //\n\nexport default isRealDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray numeric data type.\n*\n* @name isNumericDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray numeric data type\n*\n* @example\n* var bool = isNumericDataType( 'binary' );\n* // returns false\n*\n* bool = isNumericDataType( 'float32' );\n* // returns true\n*\n* bool = isNumericDataType( 'float64' );\n* // returns true\n*\n* bool = isNumericDataType( 'generic' );\n* // returns false\n*\n* bool = isNumericDataType( 'int16' );\n* // returns true\n*\n* bool = isNumericDataType( 'int32' );\n* // returns true\n*\n* bool = isNumericDataType( 'int8' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint16' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint32' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint8' );\n* // returns true\n*\n* bool = isNumericDataType( 'uint8c' );\n* // returns true\n*\n* bool = isNumericDataType( 'foo' );\n* // returns false\n*/\nvar isNumericDataType = contains( dtypes( 'numeric' ) );\n\n\n// EXPORTS //\n\nexport default isNumericDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray boolean data type.\n*\n* @name isBooleanDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray boolean data type\n*\n* @example\n* var bool = isBooleanDataType( 'binary' );\n* // returns false\n*\n* bool = isBooleanDataType( 'bool' );\n* // returns true\n*\n* bool = isBooleanDataType( 'float32' );\n* // returns false\n*\n* bool = isBooleanDataType( 'float64' );\n* // returns false\n*\n* bool = isBooleanDataType( 'generic' );\n* // returns false\n*\n* bool = isBooleanDataType( 'int16' );\n* // returns false\n*\n* bool = isBooleanDataType( 'int32' );\n* // returns false\n*\n* bool = isBooleanDataType( 'int8' );\n* // returns false\n*\n* bool = isBooleanDataType( 'uint16' );\n* // returns false\n*\n* bool = isBooleanDataType( 'uint32' );\n* // returns false\n*\n* bool = isBooleanDataType( 'uint8' );\n* // returns false\n*\n* bool = isBooleanDataType( 'uint8c' );\n* // returns false\n*\n* bool = isBooleanDataType( 'foo' );\n* // returns false\n*/\nvar isBooleanDataType = contains( dtypes( 'boolean' ) );\n\n\n// EXPORTS //\n\nexport default isBooleanDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray integer index data type.\n*\n* @name isIntegerIndexDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray integer index data type\n*\n* @example\n* var bool = isIntegerIndexDataType( 'binary' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'float32' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'float64' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'generic' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'int16' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'int32' );\n* // returns true\n*\n* bool = isIntegerIndexDataType( 'int8' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'uint16' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'uint32' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'uint8' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'uint8c' );\n* // returns false\n*\n* bool = isIntegerIndexDataType( 'foo' );\n* // returns false\n*/\nvar isIntegerIndexDataType = contains( dtypes( 'integer_index' ) );\n\n\n// EXPORTS //\n\nexport default isIntegerIndexDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray boolean index data type.\n*\n* @name isBooleanIndexDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray boolean index data type\n*\n* @example\n* var bool = isBooleanIndexDataType( 'bool' );\n* // returns true\n*\n* bool = isBooleanIndexDataType( 'float32' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'float64' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'generic' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'int16' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'int32' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'int8' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'uint16' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'uint32' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'uint8' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'uint8c' );\n* // returns false\n*\n* bool = isBooleanIndexDataType( 'foo' );\n* // returns false\n*/\nvar isBooleanIndexDataType = contains( dtypes( 'boolean_index' ) );\n\n\n// EXPORTS //\n\nexport default isBooleanIndexDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport dtypes from '@stdlib/ndarray-dtypes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray mask index data type.\n*\n* @name isMaskIndexDataType\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray mask index data type\n*\n* @example\n* var bool = isMaskIndexDataType( 'binary' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'float32' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'float64' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'generic' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'int16' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'int32' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'int8' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'uint16' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'uint32' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'uint8' );\n* // returns true\n*\n* bool = isMaskIndexDataType( 'uint8c' );\n* // returns false\n*\n* bool = isMaskIndexDataType( 'foo' );\n* // returns false\n*/\nvar isMaskIndexDataType = contains( dtypes( 'mask_index' ) );\n\n\n// EXPORTS //\n\nexport default isMaskIndexDataType;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DTYPES from './dtypes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types.\n*\n* @param {string} [kind] - data type kind\n* @returns {StringArray} list of ndarray data types\n*\n* @example\n* var list = dtypes();\n* // returns [...]\n*\n* @example\n* var list = dtypes( 'floating_point' );\n* // returns [...]\n*/\nfunction dtypes() {\n\tvar out;\n\tif ( arguments.length === 0 ) {\n\t\treturn DTYPES.all.slice();\n\t}\n\tout = DTYPES[ arguments[ 0 ] ];\n\treturn ( out ) ? out.slice() : [];\n}\n\n\n// EXPORTS //\n\nexport default dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/empty-line-before-comment */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data type strings to enumeration constants.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects. While certain dtypes, such as \"generic\" and \"binary\", have special behavior in JavaScript, they do not have a direct complement in C.\n*\n* @private\n* @returns {Object} object mapping supported dtypes to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the following should match the C `dtypes.h` enumeration!!!!\n\treturn {\n\t\t// Boolean data types:\n\t\t'bool': 0,\n\n\t\t// Integer data types:\n\t\t'int8': 1,\n\t\t'uint8': 2,\n\t\t'uint8c': 3,\n\t\t'int16': 4,\n\t\t'uint16': 5,\n\t\t'int32': 6,\n\t\t'uint32': 7,\n\t\t'int64': 8,\n\t\t'uint64': 9,\n\t\t// 'int128': 10, // uncomment once supported\n\t\t// 'uint128': 11,\n\t\t// 'int256': 12,\n\t\t// 'uint256': 13,\n\n\t\t// Floating-point data types:\n\t\t// 'float16': 14,\n\t\t// 'bfloat16': 15,\n\t\t'float32': 10,\n\t\t'float64': 11,\n\t\t// 'float128': 18, // uncomment once supported\n\n\t\t// Complex floating-point number data types:\n\t\t'complex64': 12,\n\t\t'complex128': 13,\n\n\t\t// Data type for \"binary\" data (i.e., data stored in a Node.js `Buffer` object):\n\t\t'binary': 14,\n\n\t\t// Data type for \"generic\" JavaScript values (objects):\n\t\t'generic': 15,\n\n\t\t// Define a signaling value which is guaranteed not to be a valid type enumeration value:\n\t\t'notype': 17,\n\n\t\t// Indicate the start of user defined type numbers (leaving room for type growth above):\n\t\t'userdefined_type': 256\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray data types.\n*\n* @module @stdlib/ndarray-dtypes\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n*\n* var list = dtypes();\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport objectKeys from '@stdlib/utils-keys';\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectInverse from '@stdlib/utils-object-inverse';\nimport { enum as enumeration } from '@stdlib/ndarray-dtypes';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with an ndarray data type enumeration constant.\n*\n* @param {integer} dtype - data type enumeration constant\n* @returns {(string|null)} data type string or null\n*\n* @example\n* import str2enum from '@stdlib/ndarray-base-dtype-str2enum';\n*\n* var v = str2enum( 'float64' );\n* // returns <number>\n*\n* var dt = enum2str( v );\n* // returns 'float64'\n*/\nfunction enum2str( dtype ) {\n\tvar v = hash[ dtype ];\n\treturn ( typeof v === 'string' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys';\nimport isArray from '@stdlib/assert-is-array';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isObjectLike from '@stdlib/assert-is-object-like';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Inverts an object, such that keys become values and values become keys.\n*\n* @param {ObjectLike} obj - input object\n* @param {Options} [opts] - function options\n* @param {boolean} [opts.duplicates=true] - boolean indicating whether to store duplicate keys\n* @throws {TypeError} first argument must be object-like\n* @throws {TypeError} second argument must an an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} inverted object\n*\n* @example\n* var out = invert({\n*     'a': 'beep',\n*     'b': 'boop'\n* });\n* // returns { 'beep': 'a', 'boop': 'b' }\n*\n* @example\n* var out = invert({\n*     'a': 'beep',\n*     'b': 'beep'\n* });\n* // returns { 'beep': [ 'a', 'b' ] }\n*\n* @example\n* var obj = {};\n* obj.a = 'beep';\n* obj.b = 'boop';\n* obj.c = 'beep'; // inserted after `a`\n*\n* var out = invert( obj, {\n*     'duplicates': false\n* });\n* // returns { 'beep': 'c', 'boop': 'b' }\n*/\nfunction invert( obj, opts ) {\n\tvar allowDupes = true;\n\tvar keys;\n\tvar len;\n\tvar key;\n\tvar val;\n\tvar out;\n\tvar v;\n\tvar i;\n\tif ( !isObjectLike( obj ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object (except null). Value: `%s`.', obj ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'duplicates' ) ) {\n\t\t\tallowDupes = opts.duplicates;\n\t\t\tif ( !isBoolean( allowDupes ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'duplicates', allowDupes ) );\n\t\t\t}\n\t\t}\n\t}\n\tkeys = objectKeys( obj );\n\tlen = keys.length;\n\tout = {};\n\tif ( allowDupes ) {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tkey = keys[ i ];\n\t\t\tval = obj[ key ];\n\t\t\tif ( !hasOwnProp( out, val ) ) {\n\t\t\t\tout[ val ] = key;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tv = out[ val ];\n\t\t\tif ( isArray( v ) ) {\n\t\t\t\tout[ val ].push( key );\n\t\t\t} else {\n\t\t\t\tout[ val ] = [ v, key ];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tkey = keys[ i ];\n\t\t\tout[ obj[ key ] ] = key;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default invert;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DTYPES from './dtypes.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of ndarray data types.\n*\n* @param {string} [kind] - data type kind\n* @returns {StringArray} list of ndarray data types\n*\n* @example\n* var list = dtypes();\n* // returns [...]\n*\n* @example\n* var list = dtypes( 'floating_point' );\n* // returns [...]\n*/\nfunction dtypes() {\n\tvar out;\n\tif ( arguments.length === 0 ) {\n\t\treturn DTYPES.all.slice();\n\t}\n\tout = DTYPES[ arguments[ 0 ] ];\n\treturn ( out ) ? out.slice() : [];\n}\n\n\n// EXPORTS //\n\nexport default dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/empty-line-before-comment */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported data type strings to enumeration constants.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation of ndarray objects. While certain dtypes, such as \"generic\" and \"binary\", have special behavior in JavaScript, they do not have a direct complement in C.\n*\n* @private\n* @returns {Object} object mapping supported dtypes to enumeration constants\n*\n* @example\n* var table = enumeration();\n* // returns <Object>\n*/\nfunction enumeration() {\n\t// NOTE: the following should match the C `dtypes.h` enumeration!!!!\n\treturn {\n\t\t// Boolean data types:\n\t\t'bool': 0,\n\n\t\t// Integer data types:\n\t\t'int8': 1,\n\t\t'uint8': 2,\n\t\t'uint8c': 3,\n\t\t'int16': 4,\n\t\t'uint16': 5,\n\t\t'int32': 6,\n\t\t'uint32': 7,\n\t\t'int64': 8,\n\t\t'uint64': 9,\n\t\t// 'int128': 10, // uncomment once supported\n\t\t// 'uint128': 11,\n\t\t// 'int256': 12,\n\t\t// 'uint256': 13,\n\n\t\t// Floating-point data types:\n\t\t// 'float16': 14,\n\t\t// 'bfloat16': 15,\n\t\t'float32': 10,\n\t\t'float64': 11,\n\t\t// 'float128': 18, // uncomment once supported\n\n\t\t// Complex floating-point number data types:\n\t\t'complex64': 12,\n\t\t'complex128': 13,\n\n\t\t// Data type for \"binary\" data (i.e., data stored in a Node.js `Buffer` object):\n\t\t'binary': 14,\n\n\t\t// Data type for \"generic\" JavaScript values (objects):\n\t\t'generic': 15,\n\n\t\t// Define a signaling value which is guaranteed not to be a valid type enumeration value:\n\t\t'notype': 17,\n\n\t\t// Indicate the start of user defined type numbers (leaving room for type growth above):\n\t\t'userdefined_type': 256\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumeration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of ndarray data types.\n*\n* @module @stdlib/ndarray-dtypes\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n*\n* var list = dtypes();\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\nassign( main, enumeration() );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport objectKeys from '@stdlib/utils-keys';\n\n\n// MAIN //\n\n/**\n* Copies all enumerable own properties from a source object to a target object as enumerable read-only properties.\n*\n* @private\n* @param {Object} target - target object\n* @param {Object} source - source object\n* @returns {Object} modified target object\n*\n* @example\n* var source = {\n*     'beep': 'boop'\n* };\n* var target = {};\n*\n* var out = assign( target, source );\n* // returns <Object>\n*\n* var bool = ( out === target );\n* // returns true\n*\n* var v = target.beep;\n* // returns 'boop'\n*/\nfunction assign( target, source ) {\n\tvar keys;\n\tvar k;\n\tvar i;\n\n\tkeys = objectKeys( source );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tk = keys[ i ];\n\t\tsetReadOnly( target, k, source[ k ] );\n\t}\n\treturn target;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { enum as enumeration } from '@stdlib/ndarray-dtypes';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with an ndarray data type string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `INT8 == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} dtype - data type string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'int8' );\n* // returns <number>\n*/\nfunction str2enum( dtype ) {\n\tvar v = ENUM[ dtype ];\n\treturn ( typeof v === 'number' ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from '@stdlib/ndarray-base-dtype-enum2str';\nimport str2enum from '@stdlib/ndarray-base-dtype-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the data type string associated with a supported ndarray data type value.\n*\n* @param {*} dtype - data type value\n* @returns {(string|null)} data type string or null\n*\n* @example\n* import str2enum from '@stdlib/ndarray-base-dtype-str2enum';\n*\n* var v = resolve( str2enum( 'float64' ) );\n* // returns 'float64'\n*/\nfunction resolve( dtype ) {\n\tvar t = ( typeof dtype );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( dtype ) === null ) ? null : dtype;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( dtype );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport resolve from '@stdlib/ndarray-base-dtype-resolve-str';\nimport PROMOTION_RULES from './promotion_rules.json';\n\n\n// FUNCTIONS //\n\n/**\n* Generates a full table of promotion rules.\n*\n* @private\n* @returns {Object} table\n*/\nfunction generateFullTable() {\n\tvar dtypes;\n\tvar ntypes;\n\tvar out;\n\tvar tmp;\n\tvar dt1;\n\tvar dt2;\n\tvar o;\n\tvar j;\n\tvar i;\n\n\tout = {};\n\tdtypes = objectKeys( PROMOTION_RULES );\n\tntypes = dtypes.length;\n\tfor ( i = 0; i < ntypes; i++ ) {\n\t\tdt1 = dtypes[ i ];\n\t\to = PROMOTION_RULES[ dt1 ];\n\t\ttmp = {};\n\t\tfor ( j = 0; j < ntypes; j++ ) {\n\t\t\tdt2 = dtypes[ j ];\n\t\t\ttmp[ dt2 ] = o[ dt2 ];\n\t\t}\n\t\tout[ dt1 ] = tmp;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns the ndarray data type with the smallest size and closest \"kind\" to which ndarray data types can be safely cast.\n*\n* @param {*} [dtype1] - ndarray data type value\n* @param {*} [dtype2] - ndarray data type value\n* @returns {(Object|integer|string|null)} promotion rule(s) or null\n*\n* @example\n* var table = promotionRules();\n* // returns {...}\n*\n* @example\n* var dt = promotionRules( 'float32', 'uint32' );\n* // returns 'float64'\n*\n* @example\n* var dt = promotionRules( 'binary', 'generic' );\n* // returns -1\n*\n* @example\n* var dt = promotionRules( 'float32', 'foo' );\n* // returns null\n*/\nfunction promotionRules( dtype1, dtype2 ) {\n\tvar o;\n\tif ( arguments.length === 0 ) {\n\t\treturn generateFullTable();\n\t}\n\tdtype1 = resolve( dtype1 );\n\tif ( hasOwnProp( PROMOTION_RULES, dtype1 ) ) {\n\t\to = PROMOTION_RULES[ dtype1 ];\n\t\tdtype2 = resolve( dtype2 );\n\t\tif ( hasOwnProp( o, dtype2 ) ) {\n\t\t\treturn o[ dtype2 ];\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default promotionRules;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport promotionRules from '@stdlib/ndarray-promotion-rules';\n\n\n// MAIN //\n\n/**\n* Returns a data type that results from applying promotion rules to a provided list of data types.\n*\n* @param {StringArray} dtypes - list of data types\n* @returns {(string|null)} result\n*\n* @example\n* var dt = promoteDataTypes( [ 'float32', 'float64' ] );\n* // returns 'float64'\n*\n* @example\n* var dt = promoteDataTypes( [ 'binary', 'complex128' ] );\n* // returns null\n*/\nfunction promoteDataTypes( dtypes ) {\n\tvar dt;\n\tvar N;\n\tvar i;\n\n\tN = dtypes.length;\n\tif ( N === 0 ) {\n\t\treturn null;\n\t}\n\tdt = dtypes[ 0 ];\n\tfor ( i = 1; i < dtypes.length; i++ ) {\n\t\tdt = promotionRules( dt, dtypes[ i ] );\n\t\tif ( dt === null || dt === -1 ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn dt;\n}\n\n\n// EXPORTS //\n\nexport default promoteDataTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default ndarray settings.\n*\n* @returns {Object} defaults\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t// Data types:\n\t\t'dtypes': {\n\t\t\t'default': 'float64',\n\t\t\t'numeric': 'float64',\n\t\t\t'real': 'float64',\n\t\t\t'floating_point': 'float64',\n\t\t\t'real_floating_point': 'float64',\n\t\t\t'complex_floating_point': 'complex128',\n\t\t\t'integer': 'int32',\n\t\t\t'signed_integer': 'int32',\n\t\t\t'unsigned_integer': 'uint32',\n\t\t\t'boolean': 'bool'\n\t\t},\n\n\t\t// Memory layout:\n\t\t'order': 'row-major',\n\n\t\t// Casting mode:\n\t\t'casting': 'safe',\n\n\t\t// Index mode:\n\t\t'index_mode': 'throw'\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defaults from './main.js';\n\n\n// VARIABLES //\n\nvar DEFAULTS = defaults();\nvar HASH = {\n\t'dtypes.default': DEFAULTS.dtypes.default,\n\t'dtypes.numeric': DEFAULTS.dtypes.numeric,\n\t'dtypes.real': DEFAULTS.dtypes.real,\n\t'dtypes.floating_point': DEFAULTS.dtypes.floating_point,\n\t'dtypes.real_floating_point': DEFAULTS.dtypes.real_floating_point,\n\t'dtypes.complex_floating_point': DEFAULTS.dtypes.complex_floating_point,\n\t'dtypes.integer': DEFAULTS.dtypes.integer,\n\t'dtypes.signed_integer': DEFAULTS.dtypes.signed_integer,\n\t'dtypes.unsigned_integer': DEFAULTS.dtypes.unsigned_integer,\n\t'dtypes.boolean': DEFAULTS.dtypes.boolean,\n\t'order': DEFAULTS.order,\n\t'casting': DEFAULTS.casting,\n\t'index_mode': DEFAULTS.index_mode\n};\n\n\n// MAIN //\n\n/**\n* Returns a default ndarray setting.\n*\n* @param {string} name - setting name\n* @returns {*} default setting or null\n*\n* @example\n* var v = get( 'dtypes.default' );\n* // returns <string>\n*/\nfunction get( name ) {\n\tvar v = HASH[ name ];\n\treturn ( v === void 0 ) ? null : v;\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return default ndarray settings.\n*\n* @module @stdlib/ndarray-defaults\n*\n* @example\n* import defaults from '@stdlib/ndarray-defaults';\n*\n* var o = defaults();\n* // returns {...}\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport get from './get.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'get', get );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n// MODULES //\n\nimport isFloatingPointDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isRealFloatingPointDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type';\nimport isComplexFloatingPointDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isIntegerDataType from '@stdlib/ndarray-base-assert-is-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isRealDataType from '@stdlib/ndarray-base-assert-is-real-data-type';\nimport isNumericDataType from '@stdlib/ndarray-base-assert-is-numeric-data-type';\nimport isBooleanDataType from '@stdlib/ndarray-base-assert-is-boolean-data-type';\nimport isIntegerIndexDataType from '@stdlib/ndarray-base-assert-is-integer-index-data-type';\nimport isBooleanIndexDataType from '@stdlib/ndarray-base-assert-is-boolean-index-data-type';\nimport isMaskIndexDataType from '@stdlib/ndarray-base-assert-is-mask-index-data-type';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport promoteDataTypes from '@stdlib/ndarray-base-promote-dtypes';\nimport defaults from '@stdlib/ndarray-defaults';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\nvar DEFAULT_INDEX_DTYPE = defaults.get( 'dtypes.default_index' );\nvar DEFAULT_SIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.signed_integer' );\nvar DEFAULT_UNSIGNED_INTEGER_DTYPE = defaults.get( 'dtypes.unsigned_integer' );\nvar DEFAULT_REAL_FLOATING_POINT_DTYPE = defaults.get( 'dtypes.real_floating_point' );\n\n// Table where, for each respective policy, the value is a function which applies the policy to an input data type...\nvar POLICY_TABLE1 = {\n\t'default': defaultPolicy,\n\t'default_index': defaultIndexPolicy,\n\t'same': samePolicy,\n\t'promoted': promotedPolicy,\n\t'accumulation': accumulationPolicy\n};\n\n// Table where, for each respective policy, the value is an array whose first element is an assertion and whose second element is a fallback data type...\nvar POLICY_TABLE2 = {\n\t// Floating-point policies...\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'floating_point_and_generic': [\n\t\twrap( isFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'real_floating_point_and_generic': [\n\t\twrap( isRealFloatingPointDataType ),\n\t\tDEFAULT_REAL_FLOATING_POINT_DTYPE\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\t'complex_floating_point_and_generic': [\n\t\twrap( isComplexFloatingPointDataType ),\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t// Integer policies...\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'integer_and_generic': [\n\t\twrap( isIntegerDataType ),\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'signed_integer_and_generic': [\n\t\twrap( isSignedIntegerDataType ),\n\t\tDEFAULT_SIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\t'unsigned_integer_and_generic': [\n\t\twrap( isUnsignedIntegerDataType ),\n\t\tDEFAULT_UNSIGNED_INTEGER_DTYPE\n\t],\n\n\t// Real-valued number policies...\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\t'real_and_generic': [\n\t\twrap( isRealDataType ),\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t// Real- and complex-valued number policies...\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\t'numeric_and_generic': [\n\t\twrap( isNumericDataType ),\n\t\tdefaults.get( 'dtypes.numeric' )\n\t],\n\n\t// Boolean policies...\n\t'boolean': [\n\t\tisBooleanDataType,\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\t'boolean_and_generic': [\n\t\twrap( isBooleanDataType ),\n\t\tdefaults.get( 'dtypes.boolean' )\n\t],\n\n\t// Index policies...\n\t'integer_index': [\n\t\tisIntegerIndexDataType,\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'integer_index_and_generic': [\n\t\twrap( isIntegerIndexDataType ),\n\t\tdefaults.get( 'dtypes.integer_index' )\n\t],\n\t'boolean_index': [\n\t\tisBooleanIndexDataType,\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'boolean_index_and_generic': [\n\t\twrap( isBooleanIndexDataType ),\n\t\tdefaults.get( 'dtypes.boolean_index' )\n\t],\n\t'mask_index': [\n\t\tisMaskIndexDataType,\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t],\n\t'mask_index_and_generic': [\n\t\twrap( isMaskIndexDataType ),\n\t\tdefaults.get( 'dtypes.mask_index' )\n\t]\n};\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a data type validation function to also check for a \"generic\" data type.\n*\n* @private\n* @param {Function} fcn - validation function\n* @returns {Function} wrapped validation function\n*/\nfunction wrap( fcn ) {\n\treturn wrapper;\n\n\t/**\n\t* Tests whether a provided data type is either \"generic\" or satisfies a data type validation function.\n\t*\n\t* @private\n\t* @param {*} value - input value\n\t* @returns {boolean} boolean indicating whether a provided value passes a test\n\t*/\n\tfunction wrapper( value ) {\n\t\treturn ( value === 'generic' ) || fcn( value );\n\t}\n}\n\n/**\n* Returns the default data type.\n*\n* @private\n* @returns {string} output ndarray data type\n*/\nfunction defaultPolicy() {\n\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data types:\n\treturn DEFAULT_DTYPE;\n}\n\n/**\n* Returns the default index data type.\n*\n* @private\n* @returns {string} output ndarray data type\n*/\nfunction defaultIndexPolicy() {\n\t// When the policy is \"default_index\", the output data type should always be the default index data type without consideration for the input data types:\n\treturn DEFAULT_INDEX_DTYPE;\n}\n\n/**\n* Applies the \"same\" policy by returning the common input data type.\n*\n* @private\n* @param {StringArray} dtypes - input ndarray data types\n* @throws {Error} invalid data types\n* @returns {string} output ndarray data type\n*/\nfunction samePolicy( dtypes ) {\n\tvar dt;\n\tvar i;\n\n\tdt = dtypes[ 0 ];\n\tfor ( i = 1; i < dtypes.length; i++ ) {\n\t\t// When the policy is \"same\", we require that all data types (both input and output) be the same...\n\t\tif ( dtypes[ i ] !== dt ) {\n\t\t\tthrow new Error( format( 'invalid argument. Unable to resolve an output data type. The output data type policy is \"same\" and yet the input data types are not equal. Data types: [%s].', join( dtypes, ', ' ) ) );\n\t\t}\n\t}\n\treturn dt;\n}\n\n/**\n* Applies the \"promoted\" policy by applying type promotion to the list of provided data types.\n*\n* @private\n* @param {StringArray} dtypes - input ndarray data types\n* @throws {Error} must provide data types which can be safely cast to a common data type\n* @returns {string} output ndarray data type\n*/\nfunction promotedPolicy( dtypes ) {\n\tvar dt = promoteDataTypes( dtypes );\n\tif ( dt === null ) {\n\t\tthrow new Error( format( 'invalid argument. Unable to apply type promotion rules when resolving a data type to which the input data types can be safely cast. Data types: [%s].', join( dtypes, ', ' ) ) );\n\t}\n\treturn dt;\n}\n\n/**\n* Applies the \"accumulation\" policy to the list of input data types.\n*\n* @private\n* @param {StringArray} dtypes - input ndarray data types\n* @throws {Error} must provide data types which can be safely cast to a common data type\n* @returns {string} output ndarray data type\n*/\nfunction accumulationPolicy( dtypes ) {\n\tvar dt = promotedPolicy( dtypes );\n\n\t// If the promoted data type is floating-point, allow accumulation in that data type as overflow/underflow is handled naturally as a built-in feature of that data type...\n\tif ( isFloatingPointDataType( dt ) || dt === 'generic' ) { // NOTE: we may want to revisit this in the future for float16/complex32, where the value range is much more limited\n\t\treturn dt;\n\t}\n\t// Unless the promoted data type value range is larger than the default un/signed integer data type, accumulate in the default un/signed integer data type, as accumulating in small range integer data types (e.g., `int8`) is at high risk for overflow, especially for ndarrays containing many elements...\n\tif ( isUnsignedIntegerDataType( dt ) ) {\n\t\treturn promoteDataTypes( [ dt, DEFAULT_UNSIGNED_INTEGER_DTYPE ] );\n\t}\n\tif ( isSignedIntegerDataType( dt ) ) {\n\t\treturn promoteDataTypes( [ dt, DEFAULT_SIGNED_INTEGER_DTYPE ] );\n\t}\n\t// For all other data types, accumulate in the default real-valued floating-point data type...\n\treturn DEFAULT_REAL_FLOATING_POINT_DTYPE;\n}\n\n\n// MAIN //\n\n/**\n* Resolves the output data type from a list of input ndarray data types.\n*\n* @param {StringArray} dtypes - list of input ndarray data types\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( [ 'float64' ], 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtypes, policy ) {\n\tvar dt;\n\tvar p;\n\n\t// First, check whether the policy mandates that the output data type always be a specific data type...\n\tif ( isDataType( policy ) ) {\n\t\treturn policy;\n\t}\n\t// Next, check whether the policy is one in which we may be able to avoid type promotion...\n\tp = POLICY_TABLE1[ policy ];\n\tif ( p !== void 0 ) {\n\t\treturn p( dtypes );\n\t}\n\t// For all other policies, we always apply type promotion rules...\n\tdt = promotedPolicy( dtypes );\n\n\t// Check whether the policy requires determining the data type \"kind\"...\n\tp = POLICY_TABLE2[ policy ];\n\tif ( p !== void 0 ) {\n\t\t// Check whether the promoted data type belongs to the data type \"kind\"...\n\t\tif ( p[ 0 ]( dt ) ) {\n\t\t\t// If so, we can just return the promoted data type:\n\t\t\treturn dt;\n\t\t}\n\t\t// Otherwise, we need to fallback to a default data type belonging to that \"kind\":\n\t\treturn p[ 1 ];\n\t}\n\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type policy. Value: `%s`.', policy ) );\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport outputDataType from '@stdlib/ndarray-base-output-dtype';\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a binary function.\n*\n* @param {string} xdtype - first input ndarray data type\n* @param {string} ydtype - second input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} third argument must be a recognized data type policy\n* @throws {Error} must provide data types amenable to type promotion\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'float32', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( xdtype, ydtype, policy ) {\n\treturn outputDataType( [ xdtype, ydtype ], policy );\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bufferCtors from '@stdlib/ndarray-base-buffer-ctors';\nimport allocUnsafe from '@stdlib/buffer-alloc-unsafe';\nimport zeros from './zeros.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a zero-filled generic array.\n*\n* @private\n* @param {NonNegativeInteger} size - buffer size\n* @returns {Array} zero-filled generic array\n*/\nfunction generic( size ) {\n\tvar buf;\n\tvar i;\n\n\tbuf = [];\n\tfor ( i = 0; i < size; i++ ) {\n\t\tbuf.push( 0 );\n\t}\n\treturn buf;\n}\n\n/**\n* Returns a zero-filled binary buffer.\n*\n* @private\n* @param {NonNegativeInteger} size - buffer size\n* @returns {Buffer} zero-filled binary buffer\n*/\nfunction binary( size ) {\n\treturn zeros( allocUnsafe( size ) );\n}\n\n/**\n* Returns a typed array.\n*\n* @private\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(TypedArray|null)} typed array\n*/\nfunction typedarray( dtype, size ) {\n\tvar ctor = bufferCtors( dtype );\n\tif ( ctor ) {\n\t\treturn new ctor( size );\n\t}\n\treturn null;\n}\n\n\n// MAIN //\n\n/**\n* Returns a contiguous linear ndarray data buffer.\n*\n* @param {string} dtype - data type\n* @param {NonNegativeInteger} size - buffer size\n* @returns {(Array|TypedArray|Buffer|null)} data buffer\n*\n* @example\n* var buf = buffer( 'float64', 3 );\n* // returns <Float64Array>[ 0.0, 0.0, 0.0 ]\n*/\nfunction buffer( dtype, size ) {\n\tif ( dtype === 'generic' ) {\n\t\treturn generic( size );\n\t}\n\tif ( dtype === 'binary' ) {\n\t\treturn binary( size );\n\t}\n\treturn typedarray( dtype, size );\n}\n\n\n// EXPORTS //\n\nexport default buffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills an array-like object with zeros.\n*\n* @private\n* @param {(Array|TypedArray|Buffer)} v - array-like object to fill\n* @returns {(Array|TypedArray|Buffer)} input value\n*\n* @example\n* var arr = zeros( new Array( 2 ) );\n* // returns [ 0, 0 ]\n*/\nfunction zeros( v ) {\n\tvar i;\n\tfor ( i = 0; i < v.length; i++ ) {\n\t\tv[ i ] = 0;\n\t}\n\treturn v;\n}\n\n\n// EXPORTS //\n\nexport default zeros;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the shape of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeIntegerArray} shape\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = shape( zeros( [ 3, 3, 3 ] ) );\n* // returns [ 3, 3, 3 ]\n*/\nfunction shape( x ) {\n\tvar out;\n\tvar sh;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\t// Copy the shape in order to avoid unintended mutation...\n\tout = [];\n\tfor ( i = 0; i < sh.length; i++ ) {\n\t\td = sh[ i ];\n\t\tif ( !isNonNegativeInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tout.push( d );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default shape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the data type of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray having a supported data type\n* @returns {string} data type\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var dt = dtype( x );\n* // returns 'float64'\n*/\nfunction dtype( x ) {\n\tvar dt;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tdt = x.dtype;\n\tif ( isDataType( dt ) ) {\n\t\treturn dt;\n\t}\n\t// A data type is essential for interpreting the memory associated with an ndarray object, so no fallbacks or workarounds for data type resolution...\n\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray having a supported data type. Value: `%s`.', dt ) );\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the number of ndarray dimensions.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {NonNegativeInteger} number of dimensions\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var n = ndims( zeros( [ 3, 3, 3 ] ) );\n* // returns 3\n*/\nfunction ndims( x ) {\n\tvar sh;\n\tvar n;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tn = x.ndims;\n\tif ( isNonNegativeInteger( n ) ) {\n\t\treturn n;\n\t}\n\tsh = x.shape;\n\tif ( !isCollection( sh ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\treturn sh.length;\n}\n\n\n// EXPORTS //\n\nexport default ndims;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport strides from '@stdlib/ndarray-strides';\nimport ndims from '@stdlib/ndarray-ndims';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COLUMN_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns the layout order of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {(string|null)} layout order\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'order': 'row-major'\n* });\n*\n* var out = order( x );\n* // returns 'row-major'\n*/\nfunction order( x ) {\n\tvar st;\n\tvar o;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\to = x.order;\n\tif ( isOrder( o ) ) {\n\t\treturn o;\n\t}\n\t// Try to infer the layout order from the strides array...\n\tst = strides( x );\n\to = strides2order( st );\n\tif ( o === 1 || o === 3 ) {\n\t\treturn ROW_MAJOR; // for o == 3 (both row- and column-major; e.g., one-dimensional ndarrays), default to row-major\n\t}\n\tif ( o === 2 ) {\n\t\treturn COLUMN_MAJOR;\n\t}\n\t// o === 0\n\tif ( ndims( x ) === 0 ) {\n\t\treturn ROW_MAJOR; // default to row-major for zero-dimensional ndarrays\n\t}\n\t// Case: mixed strides (e.g., [ 2, 3, 1 ] )\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the strides of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {IntegerArray} strides\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = strides( zeros( [ 3, 3, 3 ] ) );\n* // returns [ 9, 3, 1 ]\n*/\nfunction strides( x ) {\n\tvar out;\n\tvar ord;\n\tvar sh;\n\tvar st;\n\tvar d;\n\tvar i;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\tst = x.strides; // TODO: consider whether we want to support ecosystem libraries, such as scijs/ndarray, which name this property `stride`\n\tif ( !isCollection( st ) ) {\n\t\t// WARNING: if no strides array, try to derive the strides from the shape. Note, however, that there is a lot that can go wrong here, as the only thing we are requiring is that the shape is a collection. The main point of going through the effort to compute strides is to support minimal ndarray-esque objects, where the only essential attributes are `shape` and `dtype` and where other attributes can be computed (e.g., `strides`, `offset`, `ndims`, `order`, etc), assuming single-segment contiguous data stored in row-major order...\n\t\tsh = x.shape;\n\t\tif ( !isCollection( sh ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( sh.length === 0 ) {\n\t\t\treturn [ 0 ];\n\t\t}\n\t\tord = x.order;\n\t\tif ( !isOrder( ord ) ) {\n\t\t\tord = 'row-major';\n\t\t}\n\t\treturn shape2strides( sh, ord );\n\t}\n\t// Copy the strides in order to avoid unintended mutation...\n\tout = [];\n\tfor ( i = 0; i < st.length; i++ ) {\n\t\td = st[ i ];\n\t\tif ( !isInteger( d ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t\t}\n\t\tout.push( d );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object containing only integers.\n*\n* @module @stdlib/assert-is-integer-array\n*\n* @example\n* import isIntegerArray from '@stdlib/assert-is-integer-array';\n*\n* var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] );\n* // returns true\n*\n* bool = isIntegerArray( [ -3.0, '3.0' ] );\n* // returns false\n*\n* @example\n* import { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\n*\n* var bool = isIntegerArray( [ -1.0, 10.0 ] );\n* // returns true\n*\n* bool = isIntegerArray( [ -1.0, 0.0, 5.0 ] );\n* // returns true\n*\n* bool = isIntegerArray( [ -3.0, new Number(-1.0) ] );\n* // returns false\n*\n* @example\n* import { objects as isIntegerArray } from '@stdlib/assert-is-integer-array';\n*\n* var bool = isIntegerArray( [ new Number(1.0), new Number(3.0) ] );\n* // returns true\n*\n* bool = isIntegerArray( [ -1.0, 0.0, 3.0 ] );\n* // returns false\n*\n* bool = isIntegerArray( [ 3.0, new Number(-1.0) ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport isInteger from '@stdlib/assert-is-integer';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-like-function';\n\n\n// VARIABLES //\n\nvar isPrimitiveArray = arrayfun( isInteger.isPrimitive );\nvar isObjectArray = arrayfun( isInteger.isObject );\n\n\n// MAIN //\n\nvar isIntegerArray = arrayfun( isInteger );\nsetReadOnly( isIntegerArray, 'primitives', isPrimitiveArray );\nsetReadOnly( isIntegerArray, 'objects', isObjectArray );\n\n\n// EXPORTS //\n\nexport default isIntegerArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Tests that a value is a valid constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var ctor = function ctor() {};\n*\n* var err = validate( ctor );\n* // returns null\n*\n* err = validate( null );\n* // returns <TypeError>\n*/\nfunction validate( value ) {\n\tvar type = typeof value;\n\tif (\n\t\tvalue === null ||\n\t\t(type !== 'object' && type !== 'function')\n\t) {\n\t\treturn new TypeError( format( 'invalid argument. A provided constructor must be either an object (except null) or a function. Value: `%s`.', value ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Object.create;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Dummy constructor.\n*\n* @private\n*/\nfunction Ctor() {\n\t// Empty...\n}\n\n\n// MAIN //\n\n/**\n* An `Object.create` shim for older JavaScript engines.\n*\n* @private\n* @param {Object} proto - prototype\n* @returns {Object} created object\n*\n* @example\n* var obj = createObject( Object.prototype );\n* // returns {}\n*/\nfunction createObject( proto ) {\n\tCtor.prototype = proto;\n\treturn new Ctor();\n}\n\n\n// EXPORTS //\n\nexport default createObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport builtin from './native.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar createObject;\nif ( typeof builtin === 'function' ) {\n\tcreateObject = builtin;\n} else {\n\tcreateObject = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default createObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Restricts an index to the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {NonNegativeInteger} index\n*\n* @example\n* var idx = clampIndex( -1, 10 );\n* // returns 0\n*\n* idx = clampIndex( 15, 10 );\n* // returns 10\n*\n* idx = clampIndex( 5, 10 );\n* // returns 5\n*/\nfunction clampIndex( idx, max ) {\n\tif ( idx < 0 ) {\n\t\treturn 0;\n\t}\n\tif ( idx > max ) {\n\t\treturn max;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default clampIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Wraps an index on the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {NonNegativeInteger} index\n*\n* @example\n* var idx = wrapIndex( -1, 10 );\n* // returns 10\n*\n* idx = wrapIndex( 13, 10 );\n* // returns 2\n*\n* idx = wrapIndex( 6, 10 );\n* // returns 6\n*/\nfunction wrapIndex( idx, max ) {\n\tvar mp1 = max + 1;\n\tif ( idx < 0 ) {\n\t\tidx += mp1; // slight optimization to avoid modulo arithmetic when |idx| <= max+1\n\t\tif ( idx < 0 ) {\n\t\t\tidx %= mp1;\n\t\t\tif ( idx !== 0 ) {\n\t\t\t\tidx += mp1;\n\t\t\t}\n\t\t}\n\t\treturn idx;\n\t}\n\tif ( idx > max ) {\n\t\tidx -= mp1; // slight optimization to avoid modulo arithmetic when max+1 < idx <= 2*(max+1)\n\t\tif ( idx > max ) {\n\t\t\tidx %= mp1;\n\t\t}\n\t\treturn idx;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default wrapIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Normalizes an index to the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {integer} index\n*\n* @example\n* var idx = normalizeIndex( -2, 10 );\n* // returns 9\n*\n* idx = normalizeIndex( 15, 10 );\n* // returns -1\n*\n* idx = normalizeIndex( 5, 10 );\n* // returns 5\n*/\nfunction normalizeIndex( idx, max ) {\n\tif ( idx < 0 ) {\n\t\tidx += max + 1;\n\t\tif ( idx < 0 ) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn idx;\n\t}\n\tif ( idx > max ) {\n\t\treturn -1;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default normalizeIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport modes from '@stdlib/ndarray-index-modes';\n\n\n// MAIN //\n\n/**\n* Tests whether an input value is a supported ndarray index mode.\n*\n* @name isIndexMode\n* @type {Function}\n* @param {*} v - value to test\n* @returns {boolean} boolean indicating whether an input value is a supported ndarray index mode\n*\n* @example\n* var bool = isIndexMode( 'wrap' );\n* // returns true\n*\n* bool = isIndexMode( 'clamp' );\n* // returns true\n*\n* bool = isIndexMode( 'throw' );\n* // returns true\n*\n* bool = isIndexMode( 'foo' );\n* // returns false\n*/\nvar isIndexMode = contains( modes() );\n\n\n// EXPORTS //\n\nexport default isIndexMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport clampIndex from '@stdlib/ndarray-base-clamp-index';\nimport wrapIndex from '@stdlib/ndarray-base-wrap-index';\nimport normalize from '@stdlib/ndarray-base-normalize-index';\nimport isIndexMode from '@stdlib/ndarray-base-assert-is-index-mode';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar TABLE = {\n\t'wrap': wrapIndex,\n\t'clamp': clampIndex,\n\t'normalize': normalizeIndex,\n\t'throw': throwIfOutOfBounds\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns an index if within bounds and throw an error otherwise.\n*\n* @private\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @throws {RangeError} index out-of-bounds\n* @returns {integer} index\n*\n* @example\n* var idx = throwIfOutOfBounds( 2, 9 );\n* // returns 2\n*\n* idx = throwIfOutOfBounds( 10, 9 );\n* // throws <RangeError>\n*\n* idx = throwIfOutOfBounds( -1, 9 );\n* // throws <RangeError>\n*/\nfunction throwIfOutOfBounds( idx, max ) {\n\tif ( idx < 0 || idx > max ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index must resolve to a value on the interval: [0, %d]. Value: `%d`.', max, idx ) );\n\t}\n\treturn idx;\n}\n\n/**\n* Normalizes an index before performing a strict bounds check.\n*\n* @private\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @throws {RangeError} index out-of-bounds\n* @returns {integer} index\n*\n* @example\n* var idx = normalizeIndex( 1, 10 );\n* // returns 1\n*\n* idx = normalizeIndex( -4, 10 );\n* // returns 7\n*\n* idx = normalizeIndex( -100, 10 );\n* // throws <RangeError>\n*/\nfunction normalizeIndex( idx, max ) {\n\tvar index = normalize( idx, max );\n\tif ( index < 0 || index > max ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index must resolve to a value on the interval: [0, %d]. Value: `%d`.', max, idx ) );\n\t}\n\treturn index;\n}\n\n\n// MAIN //\n\n/**\n* Returns a function for returning an index according to a provided index mode.\n*\n* @param {string} mode - specifies how to handle an out-of-bounds index\n* @throws {TypeError} first argument must be a recognized index mode\n* @returns {Function} function for returning an index\n*\n* @example\n* var ind = factory( 'clamp' );\n*\n* var idx = ind( 2, 9 );\n* // returns 2\n*\n* idx = ind( 10, 9 );\n* // returns 9\n*\n* idx = ind( -1, 9 );\n* // returns 0\n*\n* @example\n* var ind = factory( 'wrap' );\n*\n* var idx = ind( 2, 9 );\n* // returns 2\n*\n* idx = ind( 10, 9 );\n* // returns 0\n*\n* idx = ind( -1, 9 );\n* // returns 9\n*\n* @example\n* var ind = factory( 'throw' );\n*\n* var idx = ind( 2, 9 );\n* // returns 2\n*\n* idx = ind( 10, 9 );\n* // throws <RangeError>\n*\n* idx = ind( -1, 9 );\n* // throws <RangeError>\n*\n* @example\n* var ind = factory( 'normalize' );\n*\n* var idx = ind( 1, 10 );\n* // returns 1\n*\n* idx = ind( -4, 10 );\n* // returns 7\n*\n* idx = ind( -100, 10 );\n* // throws <RangeError>\n*/\nfunction factory( mode ) {\n\tif ( !isIndexMode( mode ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a recognized index mode. Value: `%s`.', mode ) );\n\t}\n\treturn TABLE[ mode ];\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport clampIndex from '@stdlib/ndarray-base-clamp-index';\nimport wrapIndex from '@stdlib/ndarray-base-wrap-index';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an index given an index mode.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @param {string} mode - specifies how to handle an index outside the interval `[0,max]`\n* @throws {RangeError} index out-of-bounds\n* @returns {integer} index\n*\n* @example\n* var idx = ind( 2, 9, 'clamp' );\n* // returns 2\n*\n* idx = ind( 10, 9, 'clamp' );\n* // returns 9\n*\n* idx = ind( -1, 9, 'clamp' );\n* // returns 0\n*\n* @example\n* var idx = ind( 2, 9, 'wrap' );\n* // returns 2\n*\n* idx = ind( 10, 9, 'wrap' );\n* // returns 0\n*\n* idx = ind( -1, 9, 'wrap' );\n* // returns 9\n*\n* @example\n* var idx = ind( 2, 9, 'throw' );\n* // returns 2\n*\n* idx = ind( 10, 9, 'throw' );\n* // throws <RangeError>\n*\n* idx = ind( -1, 9, 'throw' );\n* // throws <RangeError>\n*\n* @example\n* var idx = ind( 1, 10, 'normalize' );\n* // returns 1\n*\n* idx = ind( -4, 10, 'normalize' );\n* // returns 7\n*\n* idx = ind( -100, 10, 'normalize' );\n* // throws <RangeError>\n*/\nfunction ind( idx, max, mode ) {\n\tvar index;\n\tif ( mode === 'clamp' ) {\n\t\treturn clampIndex( idx, max );\n\t}\n\tif ( mode === 'wrap' ) {\n\t\treturn wrapIndex( idx, max );\n\t}\n\tindex = idx;\n\tif ( mode === 'normalize' ) {\n\t\tindex = normalizeIndex( index, max );\n\t}\n\tif ( index < 0 || index > max ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index must resolve to a value on the interval: [0, %d]. Value: `%d`.', max, idx ) );\n\t}\n\treturn index;\n}\n\n\n// EXPORTS //\n\nexport default ind;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an index given an index mode.\n*\n* @module @stdlib/ndarray-base-ind\n*\n* @example\n* import ind from '@stdlib/ndarray-base-ind';\n*\n* var idx = ind( -1, 10, 'wrap' );\n* // returns 10\n*\n* idx = ind( 14, 10, 'wrap' );\n* // returns 3\n*\n* idx = ind( 6, 10, 'wrap' );\n* // returns 6\n*\n* @example\n* import ind from '@stdlib/ndarray-base-ind';\n*\n* var idx = ind( -1, 10, 'clamp' );\n* // returns 0\n*\n* idx = ind( 14, 10, 'clamp' );\n* // returns 10\n*\n* idx = ind( 6, 10, 'clamp' );\n* // returns 6\n*\n* @example\n* import ind from '@stdlib/ndarray-base-ind';\n*\n* var idx = ind( 1, 10, 'throw' );\n* // returns 1\n*\n* idx = ind( 14, 10, 'throw' );\n* // throws <RangeError>\n*\n* idx = ind( -1, 10, 'throw' );\n* // throws <RangeError>\n*\n* @example\n* import ind from '@stdlib/ndarray-base-ind';\n*\n* var idx = ind( 1, 10, 'normalize' );\n* // returns 1\n*\n* idx = ind( -4, 10, 'normalize' );\n* // returns 7\n*\n* idx = ind( -100, 10, 'normalize' );\n* // throws <RangeError>\n*\n* @example\n* import ind from '@stdlib/ndarray-base-ind';\n*\n* var fcn = ind.factory( 'clamp' );\n*\n* var idx = fcn( -1, 10 );\n* // returns 0\n*\n* idx = fcn( 14, 10 );\n* // returns 10\n*\n* idx = fcn( 6, 10 );\n* // returns 6\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport factory from './factory.js';\nimport main from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport parent from '@stdlib/ndarray-base-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar base = parent.prototype.iget;\n\n\n// MAIN //\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @throws {TypeError} index must be an integer\n* @throws {RangeError} index exceeds array dimensions\n* @returns {*} array element\n*/\nfunction iget( idx ) {\n\tif ( this._ndims > 0 ) {\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index must be an integer. Value: `%s`.', idx ) );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, this._mode );\n\t\treturn base.call( this, idx );\n\t}\n\treturn base.call( this );\n}\n\n\n// EXPORTS //\n\nexport default iget;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// METHODS //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport parent from '@stdlib/ndarray-base-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar base = parent.prototype.iset;\n\n\n// MAIN //\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @param {*} v - value to set\n* @throws {Error} cannot write to a read-only array\n* @throws {TypeError} index must be an integer\n* @throws {RangeError} index exceeds array dimensions\n* @returns {ndarray} ndarray instance\n*/\nfunction iset( idx, v ) {\n\tif ( this._flags.READONLY ) {\n\t\tthrow new Error( 'invalid invocation. Cannot write to a read-only array.' );\n\t}\n\tif ( this._ndims > 0 ) {\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index must be an integer. Value: `%s`.', idx ) );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, this._mode );\n\t\tbase.call( this, idx, v );\n\t} else {\n\t\tbase.call( this, idx );\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default iset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies the contents of array-like value to a new array.\n*\n* @private\n* @param {ArrayLike} arr - input array\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0 ];\n*\n* var out = copy( arr, arr.length );\n* // returns [ 1.0, 2.0, 3.0 ]\n*\n* var bool = ( arr === out );\n* // returns false\n*/\nfunction copy( arr, len ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default copy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isBufferLengthCompatible from '@stdlib/ndarray-base-assert-is-buffer-length-compatible';\nimport numel from '@stdlib/ndarray-base-numel';\nimport parent from '@stdlib/ndarray-base-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport defaults from '@stdlib/ndarray-defaults';\nimport inherit from '@stdlib/utils-inherit';\nimport format from '@stdlib/string-format';\nimport iget from './iget.js';\nimport iset from './iset.js';\nimport get from './get.js';\nimport set from './set.js';\nimport copy from './copy_array.js';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\n/*\n* See the following references:\n*\n* -  https://stackoverflow.com/questions/22747068/is-there-a-max-number-of-arguments-javascript-functions-can-accept\n* -  https://bugs.webkit.org/show_bug.cgi?id=80797\n* -  https://github.com/numpy/numpy/issues/5744\n*\n* Note that the maximum number of function arguments can vary from engine to engine. Here, we choose something of a lowest common denominator which may **not** be valid everywhere.\n*/\nvar MAX_DIMS = 32767|0;\n\nvar INDEX_MODE = defaults.get( 'index_mode' );\nvar READONLY = false;\n\n\n// MAIN //\n\n/**\n* ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ndarray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar ndims;\n\tvar opts;\n\tvar err;\n\tvar sh;\n\tvar st;\n\n\tif ( !(this instanceof ndarray) ) {\n\t\tif ( arguments.length < 7 ) {\n\t\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order, options ); // eslint-disable-line max-len\n\t}\n\tif ( !isDataType( dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a supported ndarray data type. Value: `%s`.', dtype ) );\n\t}\n\tif ( !isCollection( buffer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object, typed-array-like, or a Buffer. Value: `%s`.', buffer ) );\n\t} else if ( buffer.get && buffer.set && ( !isFunction( buffer.get ) || !isFunction( buffer.set ) ) ) { // eslint-disable-line max-len\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `get` and `set` properties must be functions. Value: `%s`.', buffer ) );\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tif ( !isCollection( shape) || shape.length > 0 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t\t}\n\t}\n\tndims = shape.length;\n\tif ( ndims > MAX_DIMS ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of dimensions must not exceed %u due to stack limits. Value: `%u`.', MAX_DIMS, ndims ) );\n\t}\n\tif ( !isIntegerArray( strides ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an array-like object containing integers. Value: `%s`.', strides ) );\n\t}\n\tif ( ndims > 0 ) {\n\t\tif ( strides.length !== ndims ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Fourth argument length must match the number of dimensions. Expected number of dimensions: `%u`. Strides length: `%u`.', ndims, strides.length ) );\n\t\t}\n\t} else if ( strides.length !== 1 ) {\n\t\tthrow new RangeError( 'invalid argument. Fourth argument length must be equal to 1 when creating a zero-dimensional ndarray.' );\n\t} else if ( strides[ 0 ] !== 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must contain a single element equal to 0. Value: `%d`.', strides[ 0 ] ) );\n\t}\n\tif ( !isNonNegativeInteger( offset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%s`.', offset ) );\n\t}\n\tif ( !isOrder( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Sixth argument must be a supported order. Value: `%s`.', order ) );\n\t}\n\tif ( ndims > 0 && !isBufferLengthCompatible( buffer.length, shape, strides, offset ) && numel( shape ) > 0 ) { // eslint-disable-line max-len\n\t\tthrow new Error( 'invalid arguments. Input buffer is incompatible with the specified meta data. Ensure that the offset is valid with regard to the strides array and that the buffer has enough elements to satisfy the desired array shape.' );\n\t}\n\topts = {};\n\topts.mode = INDEX_MODE;\n\topts.readonly = READONLY;\n\tif ( arguments.length > 6 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tthis._mode = opts.mode;\n\tif ( opts.submode === void 0 ) {\n\t\topts.submode = [ this._mode ];\n\t}\n\tthis._submode = opts.submode;\n\n\t// Copy `shape` and `strides` to prevent external mutation:\n\tsh = copy( shape, ndims );\n\tst = copy( strides, ndims || 1 );\n\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, sh, st, offset, order );\n\tthis._flags.READONLY = opts.readonly;\n\n\treturn this;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n// Inherit from the parent constructor:\ninherit( ndarray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof ndarray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = ndarray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( ndarray, 'name', 'ndarray' );\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name get\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'get', get );\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @name iget\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'iget', iget );\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name set\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*\n* x.set( 1, 1, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.get( 1, 1 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'set', set );\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @name iset\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*\n* x.iset( 3, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.iget( 3 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'iset', iset );\n\n\n// EXPORTS //\n\nexport default ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport minmax from '@stdlib/ndarray-base-minmax-view-buffer-index';\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a buffer length is compatible with provided ndarray meta data.\n*\n* @param {NonNegativeInteger} len - buffer length\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - index offset\n* @returns {boolean} boolean indicating if a buffer length is compatible\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var bool = isBufferLengthCompatible( 4, shape, strides, offset );\n* // returns true\n*\n* @example\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 2;\n*\n* var bool = isBufferLengthCompatible( 4, shape, strides, offset );\n* // returns false\n*/\nfunction isBufferLengthCompatible( len, shape, strides, offset ) {\n\t// Determine the minimum and maximum linear indices which are accessible by the array view:\n\tvar buf = minmax( shape, strides, offset );\n\n\t// If the indices are \"inbounds\", then the buffer length is compatible:\n\treturn ( buf[ 0 ] >= 0 && buf[ 1 ] < len );\n}\n\n\n// EXPORTS //\n\nexport default isBufferLengthCompatible;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isArray from '@stdlib/assert-is-array';\nimport isIndexMode from '@stdlib/ndarray-base-assert-is-index-mode';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'clamp',\n*     'submode': [ 'throw', 'wrap', 'clamp' ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a recognized mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t\tif ( !isArray( opts.submode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array containing recognized modes. Option: `%s`.', 'submode', opts.submode ) );\n\t\t}\n\t\tif ( opts.submode.length === 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array containing recognized modes. Option: `%s`.', 'submode', opts.submode.join( ',' ) ) );\n\t\t}\n\t\tfor ( i = 0; i < opts.submode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.submode[ i ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. Each submode must be a recognized mode. Option: `%s`.', opts.submode[ i ] ) );\n\t\t\t}\n\t\t}\n\t\topts.submode = opts.submode.slice();\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t\tif ( !isBoolean( opts.readonly ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', opts.readonly ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport format from '@stdlib/string-format';\nimport validate from './validate.js';\nimport createObject from './detect.js';\n\n\n// MAIN //\n\n/**\n* Implements prototypical inheritance by replacing the prototype of one constructor with the prototype of another constructor.\n*\n* ## Notes\n*\n* -   This implementation is not designed to work with ES2015/ES6 classes. For ES2015/ES6 classes, use `class` with `extends`.\n* -   For reference, see [node#3455](https://github.com/nodejs/node/pull/3455), [node#4179](https://github.com/nodejs/node/issues/4179), [node#3452](https://github.com/nodejs/node/issues/3452), and [node commit](https://github.com/nodejs/node/commit/29da8cf8d7ab8f66b9091ab22664067d4468461e#diff-3deb3f32958bb937ae05c6f3e4abbdf5).\n*\n* @param {(Object|Function)} ctor - constructor which will inherit\n* @param {(Object|Function)} superCtor - super (parent) constructor\n* @throws {TypeError} first argument must be either an object or a function which can inherit\n* @throws {TypeError} second argument must be either an object or a function from which a constructor can inherit\n* @throws {TypeError} second argument must have an inheritable prototype\n* @returns {(Object|Function)} child constructor\n*\n* @example\n* function Foo() {\n*     return this;\n* }\n* Foo.prototype.beep = function beep() {\n*     return 'boop';\n* };\n*\n* function Bar() {\n*     Foo.call( this );\n*     return this;\n* }\n* inherit( Bar, Foo );\n*\n* var bar = new Bar();\n* var v = bar.beep();\n* // returns 'boop'\n*/\nfunction inherit( ctor, superCtor ) {\n\tvar err = validate( ctor );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\terr = validate( superCtor );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( typeof superCtor.prototype === 'undefined' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have a prototype from which another object can inherit. Value: `%s`.', superCtor.prototype ) );\n\t}\n\t// Create a prototype which inherits from the parent prototype:\n\tctor.prototype = createObject( superCtor.prototype );\n\n\t// Set the constructor to refer to the child constructor:\n\tdefineProperty( ctor.prototype, 'constructor', {\n\t\t'configurable': true,\n\t\t'enumerable': false,\n\t\t'writable': true,\n\t\t'value': ctor\n\t});\n\n\treturn ctor;\n}\n\n\n// EXPORTS //\n\nexport default inherit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @throws {TypeError} provided indices must be integer valued\n* @throws {RangeError} index exceeds array dimensions\n* @throws {RangeError} number of indices must equal the number of dimensions\n* @returns {*} array element\n*/\nfunction get() {\n\tvar idx;\n\tvar ind;\n\tvar M;\n\tvar i;\n\n\tif ( arguments.length !== this._ndims ) {\n\t\tthrow new RangeError( format( 'invalid arguments. Number of indices must match the number of dimensions. ndims: `%u`. nargs: `%u`.', this._ndims, arguments.length ) );\n\t}\n\tidx = this._offset;\n\tM = this._submode.length;\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Indices must be integer valued. Argument: `%u`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, this._submode[ i%M ] ); // eslint-disable-line max-len\n\t\tidx += this._strides[ i ] * ind;\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( idx );\n\t}\n\treturn this._buffer[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @throws {Error} cannot write to a read-only array\n* @throws {TypeError} provided indices must be integer valued\n* @throws {RangeError} index exceeds array dimensions\n* @throws {RangeError} number of indices must equal the number of dimensions\n* @returns {ndarray} ndarray instance\n*/\nfunction set() {\n\tvar idx;\n\tvar ind;\n\tvar M;\n\tvar i;\n\n\tif ( this._flags.READONLY ) {\n\t\tthrow new Error( 'invalid invocation. Cannot write to a read-only array.' );\n\t}\n\tif ( arguments.length !== this._ndims+1 ) {\n\t\tthrow new RangeError( format( 'invalid arguments. Number of indices must match the number of dimensions. ndims: `%u`. nargs: `%u`.', this._ndims, arguments.length ) );\n\t}\n\tidx = this._offset;\n\tM = this._submode.length;\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Indices must be integer valued. Argument: `%i`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, this._submode[ i%M ] ); // eslint-disable-line max-len\n\t\tidx += this._strides[ i ] * ind;\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( arguments[ i ], idx );\n\t} else {\n\t\tthis._buffer[ idx ] = arguments[ i ];\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default set;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport filledBy from '@stdlib/array-base-filled-by';\nimport everyBy from '@stdlib/array-base-every-by';\nimport join from '@stdlib/array-base-join';\nimport nullaryStrided from '@stdlib/strided-base-nullary';\nimport binary from '@stdlib/ndarray-base-binary';\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array';\nimport broadcastScalar from '@stdlib/ndarray-base-broadcast-scalar';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport binaryOutputDataType from '@stdlib/ndarray-base-binary-output-dtype';\nimport numel from '@stdlib/ndarray-base-numel';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport getShape from '@stdlib/ndarray-shape';\nimport getDType from '@stdlib/ndarray-dtype';\nimport getOrder from '@stdlib/ndarray-order';\nimport ndims from '@stdlib/ndarray-ndims';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport format from '@stdlib/string-format';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar ORDINALS = [ 'First', 'Second', 'Third' ];\n\n\n// FUNCTIONS //\n\n/**\n* Performs an initial scan of a list of parameters.\n*\n* @private\n* @param {Array} params - list of parameters\n* @returns {Array} scan results\n*/\nfunction initialScan( params ) {\n\tvar out;\n\tvar p;\n\tvar o;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\to = {\n\t\t\t'scalar': true,\n\t\t\t'value': p,\n\t\t\t'dtype': '',\n\t\t\t'ndims': 0,\n\t\t\t'order': ''\n\t\t};\n\t\tif ( isNumber( p ) ) {\n\t\t\to.dtype = 'float64';\n\t\t} else if ( isComplexLike( p ) ) {\n\t\t\tif ( p.byteLength === 8 ) {\n\t\t\t\to.dtype = 'complex64';\n\t\t\t} else {\n\t\t\t\to.dtype = 'complex128';\n\t\t\t}\n\t\t} else if ( isndarrayLike( p ) ) {\n\t\t\to.scalar = false;\n\t\t\to.dtype = getDType( p );\n\t\t\to.ndims = ndims( p );\n\t\t\to.order = getOrder( p );\n\t\t} else {\n\t\t\to.dtype = 'generic';\n\t\t}\n\t\tout.push( o );\n\t}\n\treturn out;\n}\n\n/**\n* Checks whether all parameters are scalar compatible.\n*\n* ## Notes\n*\n* -   A parameter is scalar compatible if, and only if, the parameter value is either a zero-dimensional ndarray or already a scalar value.\n*\n* @private\n* @param {Array<Object>} params - list of parameter objects\n* @returns {boolean} boolean indicating whether all parameters are scalar compatible\n*/\nfunction isScalarCompatible( params ) {\n\tvar count;\n\tvar p;\n\tvar i;\n\n\tcount = 0;\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\tif ( p.scalar || p.ndims === 0 ) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn ( count === params.length );\n}\n\n/**\n* Converts a list of parameters to scalar values.\n*\n* ## Notes\n*\n* -   The function **mutates** the input array by updating parameter objects which do not already correspond to scalar parameter values.\n*\n* @private\n* @param {Array<Object>} params - list of parameter objects\n* @returns {Array<Object>} updated list\n*/\nfunction convertToScalars( params ) {\n\tvar p;\n\tvar i;\n\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\tif ( p.scalar === false ) {\n\t\t\tp.scalar = true;\n\t\t\tp.value = p.value.get();\n\t\t\tp.ndims = 0;\n\t\t\tp.order = '';\n\t\t}\n\t}\n\treturn params;\n}\n\n/**\n* Resolves a common memory layout from a list of parameter objects.\n*\n* @private\n* @param {Array<Object>} params - list of parameter objects\n* @returns {string} memory layout\n*/\nfunction resolveOrder( params ) {\n\tvar p;\n\tvar i;\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\n\t\t// For a binary parameter function, we simply return the layout of the first parameter having a layout, as there is no clear rationale for picking the layout of one parameter over another and picking the first one we find is as good a rationale as any other...\n\t\tif ( p.scalar === false ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn p.order;\n}\n\n/**\n* Broadcasts parameter values to an ndarray having a specified shape.\n*\n* ## Notes\n*\n* -   The function **mutates** the input array.\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {Array<Object>} params - list of parameter objects\n* @returns {Array<Object>} updated list\n*/\nfunction broadcastParameters( shape, params ) {\n\tvar ord;\n\tvar p;\n\tvar i;\n\n\tord = resolveOrder( params );\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\t\tif ( p.scalar ) {\n\t\t\tp.scalar = false;\n\t\t\tp.value = broadcastScalar( p.value, p.dtype, shape, ord );\n\t\t\tp.order = ord;\n\t\t} else {\n\t\t\tp.value = broadcast( p.value, shape ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t}\n\t\tp.ndims = shape.length;\n\t}\n\treturn params;\n}\n\n\n// MAIN //\n\n/**\n* Constructor for creating ndarrays filled with pseudorandom values drawn from a binary PRNG.\n*\n* @constructor\n* @param {Function} prng - binary pseudorandom value generator\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing a list of supported input data types for each PRNG parameter\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} [options] - function options\n* @param {string} [options.order] - default memory layout\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Random} instance\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 0.0, 1.0 );\n* // returns <ndarray>\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 0.0, 1.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction Random( prng, idtypes, odtypes, policies, options ) {\n\tvar opts;\n\tvar i;\n\tif ( !( this instanceof Random ) ) {\n\t\tif ( arguments.length < 5 ) {\n\t\t\treturn new Random( prng, idtypes, odtypes, policies );\n\t\t}\n\t\treturn new Random( prng, idtypes, odtypes, policies, options );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tif (\n\t\t\t!isCollection( idtypes[ i ] ) ||\n\t\t\tidtypes[ i ].length < 1 ||\n\t\t\t!everyBy( idtypes[ i ], isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\topts = {\n\t\t'order': defaults.get( 'order' )\n\t};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t\tif ( !isOrder( opts.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', opts.order ) );\n\t\t\t}\n\t\t}\n\t}\n\tthis._prng = prng;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output\n\t};\n\tthis._opts = opts;\n\treturn this;\n}\n\n/**\n* Returns an ndarray filled with pseudorandom values drawn from a binary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - output shape\n* @param {(ndarrayLike|*)} param1 - first PRNG parameter\n* @param {(ndarrayLike|*)} param2 - second PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output ndarray data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 0.0, 1.0 );\n* // returns <ndarray>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( shape, param1, param2, options ) {\n\tvar params;\n\tvar prng;\n\tvar opts;\n\tvar buf;\n\tvar err;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\tvar out;\n\tvar set;\n\tvar dt;\n\tvar st;\n\tvar p1;\n\tvar p2;\n\tvar i;\n\n\tif ( !isNonNegativeIntegerArray( shape ) && !isEmptyCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tparams = initialScan( [ param1, param2 ] );\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tdt = params[ i ].dtype;\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. %s argument must have one of the following data types: \"%s\". Data type: `%s`.', ORDINALS[ i+1 ], join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\tFLG = isScalarCompatible( params );\n\tif ( FLG ) {\n\t\tparams = convertToScalars( params );\n\t} else {\n\t\tparams = broadcastParameters( shape, params );\n\t}\n\tp1 = params[ 0 ];\n\tp2 = params[ 1 ];\n\tprng = this._prng;\n\tdt = opts.dtype || binaryOutputDataType( p1.dtype, p2.dtype, this._policies.output ); // eslint-disable-line max-len\n\tif ( opts.order ) {\n\t\tord = opts.order;\n\t} else if ( FLG ) {\n\t\tord = this._opts.order;\n\t} else {\n\t\t// If we don't have any explicit order info, use the order of the first parameter, as no clear rationale for choosing the order of one parameter over another:\n\t\tord = p1.order;\n\t}\n\t// Handles special cases involving (1) zero-dimensional output ndarrays and (2) shapes having at least one dimension of size zero...\n\tlen = numel( shape );\n\tif ( len === 0 ) {\n\t\t// Check for a zero-dimensional shape...\n\t\tif ( shape.length === 0 ) {\n\t\t\t// If the output array is a zero-dimensional ndarray, we generate a single random variate...\n\t\t\tbuf = buffer( dt, 1 );\n\t\t\tif ( isAccessorArray( buf ) ) {\n\t\t\t\tset = accessorSetter( dt );\n\t\t\t} else {\n\t\t\t\tset = setter( dt );\n\t\t\t}\n\t\t\tset( buf, 0, prng( p1.value, p2.value ) );\n\t\t\tst = [ 0 ];\n\t\t} else {\n\t\t\t// If the output array has one or more dimensions of size zero, we avoid allocating any memory, and instead return an empty ndarray...\n\t\t\tbuf = buffer( dt, len );\n\t\t\tst = shape2strides( shape, ord );\n\t\t}\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// If provided scalar PRNG parameters, we can simply fill a linear buffer with pseudorandom values (as all pseudorandom values are drawn from the same PRNG) and then wrap as an ndarray...\n\tif ( FLG ) {\n\t\tif ( dt === 'generic' ) {\n\t\t\tbuf = filledBy( len, wrapper );\n\t\t} else {\n\t\t\tbuf = buffer( dt, len );\n\t\t\tnullaryStrided( [ buf ], [ len ], [ 1 ], wrapper );\n\t\t}\n\t\tst = shape2strides( shape, ord );\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// We've been provided ndarrays, so we need to perform element-wise iteration...\n\n\t// Allocate a data buffer:\n\tbuf = buffer( dt, len );\n\n\t// Initialize the output array:\n\tst = shape2strides( shape, ord );\n\tout = new ndarray( dt, buf, shape, st, 0, ord, opts );\n\n\t// Fill the output array with pseudorandom values:\n\tbinary( [ p1.value, p2.value, out ], prng );\n\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom number generator function.\n\t*\n\t* @private\n\t* @returns {(number|ComplexLike)} pseudorandom number\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( p1.value, p2.value );\n\t}\n});\n\n/**\n* Fills an ndarray with pseudorandom values drawn from a binary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {(ndarrayLike|*)} param1 - first PRNG parameter\n* @param {(ndarrayLike|*)} param2 - second PRNG parameter\n* @param {ndarrayLike} out - output ndarray\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import uniform from '@stdlib/random-base-uniform';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 0.0, 1.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, param2, out ) {\n\tvar params;\n\tvar pdt;\n\tvar odt;\n\tvar ord;\n\tvar sh;\n\tvar p;\n\tvar i;\n\n\tif ( !isndarrayLike( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray-like object. Value: `%s`.', out ) );\n\t}\n\tif ( isReadOnly( out ) ) {\n\t\tthrow new Error( 'invalid argument. The output ndarray must be writable. Cannot write to a read-only ndarray.' );\n\t}\n\tsh = getShape( out );\n\tord = getOrder( out );\n\todt = getDType( out );\n\tif ( !contains( this._odtypes, odt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. %s argument must have one of the following data types: \"%s\". Data type: `%s`.', ORDINALS[ 2 ], join( this._odtypes, '\", \"' ), odt ) );\n\t}\n\tparams = [ param1, param2 ];\n\tfor ( i = 0; i < params.length; i++ ) {\n\t\tp = params[ i ];\n\n\t\t// Check whether we've been provided a scalar PRNG parameter...\n\t\tif ( isNumber( p ) ) {\n\t\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\t\tpdt = 'float64';\n\t\t\tp = broadcastScalar( p, pdt, sh, ord );\n\t\t} else if ( isComplexLike( p ) ) {\n\t\t\tif ( p.byteLength === 8 ) {\n\t\t\t\tpdt = 'complex64';\n\t\t\t} else {\n\t\t\t\tpdt = 'complex128';\n\t\t\t}\n\t\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\t\tp = broadcastScalar( p, pdt, sh, ord );\n\t\t} else if ( isndarrayLike( p ) ) {\n\t\t\t// Broadcast the PRNG parameter to the desired shape:\n\t\t\tpdt = getDType( p );\n\t\t\tp = broadcast( p, sh ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t} else {\n\t\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\t\tpdt = 'generic';\n\t\t\tp = broadcastScalar( p, pdt, sh, ord );\n\t\t}\n\t\tif ( !contains( this._idtypes[ i ], pdt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. %s argument must have one of the following data types: \"%s\". Data type: `%s`.', ORDINALS[ i ], join( this._idtypes[ i ], '\", \"' ), pdt ) );\n\t\t}\n\t\tparams[ i ] = p;\n\t}\n\t// Fill the output array with pseudorandom values:\n\tparams.push( out );\n\tbinary( params, this._prng );\n\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Random;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport copy from '@stdlib/array-base-copy-indexed';\nimport take from '@stdlib/array-base-take-indexed';\nimport sort2ins from './sort2ins.js';\n\n\n// MAIN //\n\n/**\n* Reorders ndarray dimensions and associated strides for loop interchange.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **sh**: dimensions sorted in loop order.\n*     -   **sx**: input ndarray strides sorted in loop order.\n*     -   **sy**: output ndarray strides sorted in loop order.\n*\n* @param {NonNegativeIntegerArray} sh - array dimensions\n* @param {IntegerArray} sx - input array stride lengths\n* @param {IntegerArray} sy - output array stride lengths\n* @returns {Object} loop interchange data\n*\n* @example\n* var sh = [ 2, 3, 4 ];\n*\n* var sx = [ 12, 4, 1 ]; // row-major\n* var sy = [ 1, -2, 6 ]; // column-major\n*\n* var o = loopOrder( sh, sx, sy );\n* // returns {...}\n*\n* var ssh = o.sh;\n* // returns [ 4, 3, 2 ]\n*\n* var ssx = o.sx;\n* // returns [ 1, 4, 12 ]\n*\n* var ssy = o.sy;\n* // returns [ 6, -2, 1 ]\n*/\nfunction loopOrder( sh, sx, sy ) {\n\tvar idx;\n\n\t// Initialize a loop interchange index array for generating a loop order permutation:\n\tidx = zeroTo( sh.length );\n\n\t// Sort the input array strides in increasing order (of magnitude):\n\tsx = copy( sx );\n\tsort2ins( sx, idx );\n\n\t// Permute the shape and output array strides based on the sorted input array strides:\n\tsh = take( sh, idx );\n\tsy = take( sy, idx );\n\n\treturn {\n\t\t'sh': sh,\n\t\t'sx': sx,\n\t\t'sy': sy\n\t};\n}\n\n\n// EXPORTS //\n\nexport default loopOrder;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Simultaneously sorts two arrays based on the sort order of the first array using insertion sort.\n*\n* ## Notes\n*\n* -   The first array is sorted in increasing order according to absolute value.\n* -   The algorithm has space complexity `O(1)` and worst case time complexity `O(N^2)`.\n* -   The algorithm is efficient for small arrays (typically `N <= 20``) and is particularly efficient for sorting arrays which are already substantially sorted.\n* -   The algorithm is **stable**, meaning that the algorithm does **not** change the order of array elements which are equal or equivalent.\n* -   The input arrays are sorted in-place (i.e., the input arrays are mutated).\n*\n* @private\n* @param {Array} x - first array\n* @param {Array} y - second array\n* @returns {void}\n*\n* @example\n* var x = [ -4, -2, 3, 1 ];\n* var y = [ 0, 1, 2, 3 ];\n*\n* sort2ins( x, y );\n*\n* console.log( x );\n* // => [ 1, -2, 3, -4 ]\n*\n* console.log( y );\n* // => [ 3, 1, 2, 0 ]\n*/\nfunction sort2ins( x, y ) {\n\tvar avx;\n\tvar aux;\n\tvar ix;\n\tvar iy;\n\tvar jx;\n\tvar jy;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\tix = 1;\n\tiy = 1;\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < x.length; i++ ) {\n\t\tvx = x[ ix ];\n\t\tavx = ( vx < 0 ) ? -vx : vx;\n\n\t\tvy = y[ iy ];\n\n\t\tjx = ix - 1;\n\t\tjy = iy - 1;\n\n\t\t// Shift all larger values to the left of the current element to the right...\n\t\twhile ( jx >= 0 ) {\n\t\t\tux = x[ jx ];\n\t\t\taux = ( ux < 0 ) ? -ux : ux;\n\t\t\tif ( aux <= avx ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[ jx+1 ] = ux;\n\t\t\ty[ jy+1 ] = y[ jy ];\n\t\t\tjx -= 1;\n\t\t\tjy -= 1;\n\t\t}\n\t\tx[ jx+1 ] = vx;\n\t\ty[ jy+1 ] = vy;\n\t\tix += 1;\n\t\tiy += 1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sort2ins;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {StringArray} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - array data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\t// Pass-through options...\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar defaults = {\n\t// Define a default block size (in bytes):\n\t'BLOCK_SIZE_IN_BYTES': 64|0, // 64b is a common cache line size. How applicable the common cache line size is here is debatable, given that, depending on the associated stride(s), the innermost loop may not iterate over adjacent elements. The primary goal is to have a block size in which all data within a block can always fit in (L1) cache, regardless of cache size (i.e., cache-oblivious). For reference, a common L1 cache size is 32kB per core. For best performance, block sizes should be tuned based on system hardware; however, such tuning is not readily available to us here. Without obvious better alternatives, 64b has some theoretical (and practical) underpinning, and it should be good enough for most inputs, especially for ndarrays with near contiguity.\n\n\t// Define a default block size (in elements):\n\t'BLOCK_SIZE_IN_ELEMENTS': 8|0 // 64 bytes / 8 bytes per element (i.e., default element size is same as a double)\n};\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns a loop block size for multi-dimensional array tiled loops.\n*\n* @param {string} dtypeX - input array data type\n* @param {string} dtypeY - output array data type\n* @returns {integer} block size (in units of elements)\n*\n* @example\n* var bsize = unaryBlockSize( 'float64', 'float64' );\n* // returns <number>\n*/\nfunction unaryBlockSize( dtypeX, dtypeY ) {\n\tvar nbx;\n\tvar nby;\n\n\tnbx = bytesPerElement( dtypeX );\n\tnby = bytesPerElement( dtypeY );\n\tif ( nbx === null || nby === null ) { // e.g., \"generic\" arrays\n\t\treturn defaults.BLOCK_SIZE_IN_ELEMENTS;\n\t}\n\tif ( nbx > nby ) {\n\t\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nbx )|0; // asm type annotation\n\t}\n\treturn ( defaults.BLOCK_SIZE_IN_BYTES/nby )|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default unaryBlockSize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an n-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unarynd( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unarynd( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar get;\n\tvar set;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an n-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unarynd( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0 ]\n*/\nfunction unarynd( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar ordx;\n\tvar ordy;\n\tvar len;\n\tvar sh;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tsh = x.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Cache references to the input and output ndarray data buffers:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to the respective stride arrays:\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays:\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache the respective array orders:\n\tordx = x.order;\n\tordy = y.order;\n\n\t// Iterate over each element based on the linear **view** index, regardless as to how the data is stored in memory...\n\tfor ( i = 0; i < len; i++ ) {\n\t\tix = vind2bind( sh, sx, ox, ordx, i, MODE );\n\t\tiy = vind2bind( sh, sy, oy, ordy, i, MODE );\n\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport minmaxViewBufferIndex from '@stdlib/ndarray-base-minmax-view-buffer-index';\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport blockedaccessorunary2d from './2d_blocked_accessors.js';\nimport blockedaccessorunary3d from './3d_blocked_accessors.js';\nimport blockedaccessorunary4d from './4d_blocked_accessors.js';\nimport blockedaccessorunary5d from './5d_blocked_accessors.js';\nimport blockedaccessorunary6d from './6d_blocked_accessors.js';\nimport blockedaccessorunary7d from './7d_blocked_accessors.js';\nimport blockedaccessorunary8d from './8d_blocked_accessors.js';\nimport blockedaccessorunary9d from './9d_blocked_accessors.js';\nimport blockedaccessorunary10d from './10d_blocked_accessors.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport accessorunary0d from './0d_accessors.js';\nimport accessorunary1d from './1d_accessors.js';\nimport accessorunary2d from './2d_accessors.js';\nimport accessorunary3d from './3d_accessors.js';\nimport accessorunary4d from './4d_accessors.js';\nimport accessorunary5d from './5d_accessors.js';\nimport accessorunary6d from './6d_accessors.js';\nimport accessorunary7d from './7d_accessors.js';\nimport accessorunary8d from './8d_accessors.js';\nimport accessorunary9d from './9d_accessors.js';\nimport accessorunary10d from './10d_accessors.js';\nimport accessorunarynd from './nd_accessors.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an input ndarray and assigns results to elements in an output ndarray.\n*\n* ## Notes\n*\n* -   Each provided ndarray should be an `object` with the following properties:\n*\n*     -   **dtype**: data type.\n*     -   **data**: data buffer.\n*     -   **shape**: dimensions.\n*     -   **strides**: stride lengths.\n*     -   **offset**: index offset.\n*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing one input array and one output array\n* @param {Callback} fcn - unary callback\n* @throws {Error} arrays must have the same number of dimensions\n* @throws {Error} arrays must have the same shape\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary( [ x, y ], scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary( arrays, fcn ) {\n\tvar ndims;\n\tvar xmmv;\n\tvar ymmv;\n\tvar shx;\n\tvar shy;\n\tvar iox;\n\tvar ioy;\n\tvar len;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ns;\n\tvar x;\n\tvar y;\n\tvar d;\n\tvar i;\n\n\t// Unpack the ndarrays and standardize ndarray meta data:\n\tx = ndarray2object( arrays[ 0 ] );\n\ty = ndarray2object( arrays[ 1 ] );\n\n\t// Verify that the input and output arrays have the same number of dimensions...\n\tshx = x.shape;\n\tshy = y.shape;\n\tndims = shx.length;\n\tif ( ndims !== shy.length ) {\n\t\tthrow new Error( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == '+ndims+'. ndims(y) == '+shy.length+'.' );\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( ndims === 0 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn );\n\t\t}\n\t\treturn UNARY[ ndims ]( x, y, fcn );\n\t}\n\t// Verify that the input and output arrays have the same dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\td = shx[ i ];\n\t\tif ( d !== shy[ i ] ) {\n\t\t\tthrow new Error( 'invalid arguments. Arrays must have the same shape.' );\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= d;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( d === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 ) {\n\t\treturn;\n\t}\n\t// Determine whether the ndarrays are one-dimensional and thus readily translate to one-dimensional strided arrays...\n\tif ( ndims === 1 ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn );\n\t\t}\n\t\treturn UNARY[ ndims ]( x, y, fcn );\n\t}\n\tsx = x.strides;\n\tsy = y.strides;\n\n\t// Determine whether the ndarray has only **one** non-singleton dimension (e.g., ndims=4, shape=[10,1,1,1]) so that we can treat the ndarrays as being equivalent to one-dimensional strided arrays...\n\tif ( ns === ndims-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < ndims; i++ ) {\n\t\t\tif ( shx[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tx.shape = [ shx[i] ];\n\t\ty.shape = x.shape;\n\t\tx.strides = [ sx[i] ];\n\t\ty.strides = [ sy[i] ];\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( x, y, fcn );\n\t\t}\n\t\treturn UNARY[ 1 ]( x, y, fcn );\n\t}\n\tiox = iterationOrder( sx ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && x.order === y.order ) {\n\t\t// Determine the minimum and maximum linear indices which are accessible by the array views:\n\t\txmmv = minmaxViewBufferIndex( shx, sx, x.offset );\n\t\tymmv = minmaxViewBufferIndex( shy, sy, y.offset );\n\n\t\t// Determine whether we can ignore shape (and strides) and treat the ndarrays as linear one-dimensional strided arrays...\n\t\tif ( len === ( xmmv[1]-xmmv[0]+1 ) && len === ( ymmv[1]-ymmv[0]+1 ) ) {\n\t\t\t// Note: the above is equivalent to @stdlib/ndarray/base/assert/is-contiguous, but in-lined so we can retain computed values...\n\t\t\tif ( iox === 1 ) {\n\t\t\t\tox = xmmv[ 0 ];\n\t\t\t} else {\n\t\t\t\tox = xmmv[ 1 ];\n\t\t\t}\n\t\t\tif ( ioy === 1 ) {\n\t\t\t\toy = ymmv[ 0 ];\n\t\t\t} else {\n\t\t\t\toy = ymmv[ 1 ];\n\t\t\t}\n\t\t\tx.shape = [ len ];\n\t\t\ty.shape = x.shape;\n\t\t\tx.strides = [ iox ];\n\t\t\ty.strides = [ ioy ];\n\t\t\tx.offset = ox;\n\t\t\ty.offset = oy;\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_UNARY[ 1 ]( x, y, fcn );\n\t\t\t}\n\t\t\treturn UNARY[ 1 ]( x, y, fcn );\n\t\t}\n\t\t// At least one ndarray is non-contiguous, so we cannot directly use one-dimensional array functionality...\n\n\t\t// Determine whether we can use simple nested loops...\n\t\tif ( ndims <= MAX_DIMS ) {\n\t\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\t\treturn ACCESSOR_UNARY[ ndims ]( x, y, fcn );\n\t\t\t}\n\t\t\treturn UNARY[ ndims ]( x, y, fcn );\n\t\t}\n\t\t// Fall-through to blocked iteration...\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( ndims <= MAX_DIMS ) {\n\t\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ ndims-2 ]( x, y, fcn );\n\t\t}\n\t\treturn BLOCKED_UNARY[ ndims-2 ]( x, y, fcn );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( x.accessorProtocol || y.accessorProtocol ) {\n\t\treturn accessorunarynd( x, y, fcn );\n\t}\n\tunarynd( x, y, fcn );\n}\n\n\n// EXPORTS //\n\nexport default unary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a zero-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0 ] );\n* var ybuf = new Float64Array( 1 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary0d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0 ]\n*/\nfunction unary0d( x, y, fcn ) {\n\ty.data[ y.offset ] = fcn( x.data[ x.offset ] );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a one-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 2 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary1d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 40.0, 60.0, 80.0 ]\n*/\nfunction unary1d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary2d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0 ]\n*/\nfunction unary2d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary3d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary3d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary4d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary4d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary5d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary5d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary6d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary6d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary7d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary8d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary8d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary9d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary9d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* unary10d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction unary10d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a zero-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var ybuf = new Complex64Array( 2 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [];\n*\n* // Define the array strides:\n* var sx = [ 0 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary0d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 30.0\n*\n* var im = imagf( v );\n* // returns 40.0\n*/\nfunction unary0d( x, y, fcn ) {\n\ty.accessors[ 1 ]( y.data, y.offset, fcn( x.accessors[ 0 ]( x.data, x.offset ) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a one-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 4 ];\n*\n* // Define the array strides:\n* var sx = [ 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary1d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary1d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dy0;\n\tvar S0;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = x.shape[ 0 ];\n\tdx0 = x.strides[ 0 ];\n\tdy0 = y.strides[ 0 ];\n\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\tix += dx0;\n\t\tiy += dy0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary2d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary2d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdx0 = sx[ 1 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 0 ] - ( S0*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 1 ];\n\t\tdy1 = sy[ 0 ] - ( S0*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\tix += dx0;\n\t\t\tiy += dy0;\n\t\t}\n\t\tix += dx1;\n\t\tiy += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary3d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary3d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdx0 = sx[ 2 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[2] );\n\t\tdx2 = sx[ 0 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 2 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[2] );\n\t\tdy2 = sy[ 0 ] - ( S1*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\tix += dx0;\n\t\t\t\tiy += dy0;\n\t\t\t}\n\t\t\tix += dx1;\n\t\t\tiy += dy1;\n\t\t}\n\t\tix += dx2;\n\t\tiy += dy2;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary4d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary4d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdx0 = sx[ 3 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 2 ] - ( S0*sx[3] );\n\t\tdx2 = sx[ 1 ] - ( S1*sx[2] );\n\t\tdx3 = sx[ 0 ] - ( S2*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 3 ];\n\t\tdy1 = sy[ 2 ] - ( S0*sy[3] );\n\t\tdy2 = sy[ 1 ] - ( S1*sy[2] );\n\t\tdy3 = sy[ 0 ] - ( S2*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t\tix += dx2;\n\t\t\tiy += dy2;\n\t\t}\n\t\tix += dx3;\n\t\tiy += dy3;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary5d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary5d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdx0 = sx[ 4 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 3 ] - ( S0*sx[4] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[3] );\n\t\tdx3 = sx[ 1 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 0 ] - ( S3*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 4 ];\n\t\tdy1 = sy[ 3 ] - ( S0*sy[4] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[3] );\n\t\tdy3 = sy[ 1 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 0 ] - ( S3*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx1;\n\t\t\t\t\tiy += dy1;\n\t\t\t\t}\n\t\t\t\tix += dx2;\n\t\t\t\tiy += dy2;\n\t\t\t}\n\t\t\tix += dx3;\n\t\t\tiy += dy3;\n\t\t}\n\t\tix += dx4;\n\t\tiy += dy4;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary6d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary6d( x, y, fcn ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdx0 = sx[ 5 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 4 ] - ( S0*sx[5] );\n\t\tdx2 = sx[ 3 ] - ( S1*sx[4] );\n\t\tdx3 = sx[ 2 ] - ( S2*sx[3] );\n\t\tdx4 = sx[ 1 ] - ( S3*sx[2] );\n\t\tdx5 = sx[ 0 ] - ( S4*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 5 ];\n\t\tdy1 = sy[ 4 ] - ( S0*sy[5] );\n\t\tdy2 = sy[ 3 ] - ( S1*sy[4] );\n\t\tdy3 = sy[ 2 ] - ( S2*sy[3] );\n\t\tdy4 = sy[ 1 ] - ( S3*sy[2] );\n\t\tdy5 = sy[ 0 ] - ( S4*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t\tix += dx3;\n\t\t\t\tiy += dy3;\n\t\t\t}\n\t\t\tix += dx4;\n\t\t\tiy += dy4;\n\t\t}\n\t\tix += dx5;\n\t\tiy += dy5;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary7d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdx0 = sx[ 6 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 5 ] - ( S0*sx[6] );\n\t\tdx2 = sx[ 4 ] - ( S1*sx[5] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[4] );\n\t\tdx4 = sx[ 2 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 1 ] - ( S4*sx[2] );\n\t\tdx6 = sx[ 0 ] - ( S5*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 6 ];\n\t\tdy1 = sy[ 5 ] - ( S0*sy[6] );\n\t\tdy2 = sy[ 4 ] - ( S1*sy[5] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[4] );\n\t\tdy4 = sy[ 2 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 1 ] - ( S4*sy[2] );\n\t\tdy6 = sy[ 0 ] - ( S5*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx3;\n\t\t\t\t\tiy += dy3;\n\t\t\t\t}\n\t\t\t\tix += dx4;\n\t\t\t\tiy += dy4;\n\t\t\t}\n\t\t\tix += dx5;\n\t\t\tiy += dy5;\n\t\t}\n\t\tix += dx6;\n\t\tiy += dy6;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary8d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary8d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdx0 = sx[ 7 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 6 ] - ( S0*sx[7] );\n\t\tdx2 = sx[ 5 ] - ( S1*sx[6] );\n\t\tdx3 = sx[ 4 ] - ( S2*sx[5] );\n\t\tdx4 = sx[ 3 ] - ( S3*sx[4] );\n\t\tdx5 = sx[ 2 ] - ( S4*sx[3] );\n\t\tdx6 = sx[ 1 ] - ( S5*sx[2] );\n\t\tdx7 = sx[ 0 ] - ( S6*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 7 ];\n\t\tdy1 = sy[ 6 ] - ( S0*sy[7] );\n\t\tdy2 = sy[ 5 ] - ( S1*sy[6] );\n\t\tdy3 = sy[ 4 ] - ( S2*sy[5] );\n\t\tdy4 = sy[ 3 ] - ( S3*sy[4] );\n\t\tdy5 = sy[ 2 ] - ( S4*sy[3] );\n\t\tdy6 = sy[ 1 ] - ( S5*sy[2] );\n\t\tdy7 = sy[ 0 ] - ( S6*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx4;\n\t\t\t\t\tiy += dy4;\n\t\t\t\t}\n\t\t\t\tix += dx5;\n\t\t\t\tiy += dy5;\n\t\t\t}\n\t\t\tix += dx6;\n\t\t\tiy += dy6;\n\t\t}\n\t\tix += dx7;\n\t\tiy += dy7;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary9d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary9d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdx0 = sx[ 8 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 7 ] - ( S0*sx[8] );\n\t\tdx2 = sx[ 6 ] - ( S1*sx[7] );\n\t\tdx3 = sx[ 5 ] - ( S2*sx[6] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[5] );\n\t\tdx5 = sx[ 3 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 2 ] - ( S5*sx[3] );\n\t\tdx7 = sx[ 1 ] - ( S6*sx[2] );\n\t\tdx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 8 ];\n\t\tdy1 = sy[ 7 ] - ( S0*sy[8] );\n\t\tdy2 = sy[ 6 ] - ( S1*sy[7] );\n\t\tdy3 = sy[ 5 ] - ( S2*sy[6] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[5] );\n\t\tdy5 = sy[ 3 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 2 ] - ( S5*sy[3] );\n\t\tdy7 = sy[ 1 ] - ( S6*sy[2] );\n\t\tdy8 = sy[ 0 ] - ( S7*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx5;\n\t\t\t\t\tiy += dy5;\n\t\t\t\t}\n\t\t\t\tix += dx6;\n\t\t\t\tiy += dy6;\n\t\t\t}\n\t\t\tix += dx7;\n\t\t\tiy += dy7;\n\t\t}\n\t\tix += dx8;\n\t\tiy += dy8;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n* @returns {void}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* unary10d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction unary10d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\n\t// Note on variable naming convention: S#, dx#, dy#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tsh = x.shape;\n\tsx = x.strides;\n\tsy = y.strides;\n\tif ( x.order === 'row-major' ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdx0 = sx[ 9 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 8 ] - ( S0*sx[9] );\n\t\tdx2 = sx[ 7 ] - ( S1*sx[8] );\n\t\tdx3 = sx[ 6 ] - ( S2*sx[7] );\n\t\tdx4 = sx[ 5 ] - ( S3*sx[6] );\n\t\tdx5 = sx[ 4 ] - ( S4*sx[5] );\n\t\tdx6 = sx[ 3 ] - ( S5*sx[4] );\n\t\tdx7 = sx[ 2 ] - ( S6*sx[3] );\n\t\tdx8 = sx[ 1 ] - ( S7*sx[2] );\n\t\tdx9 = sx[ 0 ] - ( S8*sx[1] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 9 ];\n\t\tdy1 = sy[ 8 ] - ( S0*sy[9] );\n\t\tdy2 = sy[ 7 ] - ( S1*sy[8] );\n\t\tdy3 = sy[ 6 ] - ( S2*sy[7] );\n\t\tdy4 = sy[ 5 ] - ( S3*sy[6] );\n\t\tdy5 = sy[ 4 ] - ( S4*sy[5] );\n\t\tdy6 = sy[ 3 ] - ( S5*sy[4] );\n\t\tdy7 = sy[ 2 ] - ( S6*sy[3] );\n\t\tdy8 = sy[ 1 ] - ( S7*sy[2] );\n\t\tdy9 = sy[ 0 ] - ( S8*sy[1] );\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdx0 = sx[ 0 ];                // offset increment for innermost loop\n\t\tdx1 = sx[ 1 ] - ( S0*sx[0] );\n\t\tdx2 = sx[ 2 ] - ( S1*sx[1] );\n\t\tdx3 = sx[ 3 ] - ( S2*sx[2] );\n\t\tdx4 = sx[ 4 ] - ( S3*sx[3] );\n\t\tdx5 = sx[ 5 ] - ( S4*sx[4] );\n\t\tdx6 = sx[ 6 ] - ( S5*sx[5] );\n\t\tdx7 = sx[ 7 ] - ( S6*sx[6] );\n\t\tdx8 = sx[ 8 ] - ( S7*sx[7] );\n\t\tdx9 = sx[ 9 ] - ( S8*sx[8] ); // offset increment for outermost loop\n\t\tdy0 = sy[ 0 ];\n\t\tdy1 = sy[ 1 ] - ( S0*sy[0] );\n\t\tdy2 = sy[ 2 ] - ( S1*sy[1] );\n\t\tdy3 = sy[ 3 ] - ( S2*sy[2] );\n\t\tdy4 = sy[ 4 ] - ( S3*sy[3] );\n\t\tdy5 = sy[ 5 ] - ( S4*sy[4] );\n\t\tdy6 = sy[ 6 ] - ( S5*sy[5] );\n\t\tdy7 = sy[ 7 ] - ( S6*sy[6] );\n\t\tdy8 = sy[ 8 ] - ( S7*sy[7] );\n\t\tdy9 = sy[ 9 ] - ( S8*sy[8] );\n\t}\n\t// Set the pointers to the first indexed elements in the respective ndarrays...\n\tix = x.offset;\n\tiy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) ); // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx6;\n\t\t\t\t\tiy += dy6;\n\t\t\t\t}\n\t\t\t\tix += dx7;\n\t\t\t\tiy += dy7;\n\t\t\t}\n\t\t\tix += dx8;\n\t\t\tiy += dy8;\n\t\t}\n\t\tix += dx9;\n\t\tiy += dy9;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Float64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary2d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0 ]\n*/\nfunction blockedunary2d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary3d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary3d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 4, 1 ];\n* var sy = [ 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary4d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary4d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary5d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary5d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary6d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary6d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary7d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary8d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary8d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary9d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary9d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* function scale( x ) {\n*     return x * 10.0;\n* }\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = new Float64Array( 6 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 4, 1 ];\n* var sy = [ 6, 6, 6, 6, 6, 6, 6, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 1;\n* var oy = 0;\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n* var y = {\n*     'dtype': 'float64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Apply the unary function:\n* blockedunary10d( x, y, scale );\n*\n* console.log( y.data );\n* // => <Float64Array>[ 20.0, 30.0, 60.0, 70.0, 100.0, 110.0 ]\n*/\nfunction blockedunary10d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iy ] = fcn( xbuf[ ix ] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a two-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 1 ];\n* var sy = [ 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary2d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary2d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar ox1;\n\tvar oy1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tox1 = ox + ( j1*sx[1] );\n\t\toy1 = oy + ( j1*sy[1] );\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t// Compute loop offset increments...\n\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t// Iterate over the ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\tix += dx0;\n\t\t\t\t\tiy += dy0;\n\t\t\t\t}\n\t\t\t\tix += dx1;\n\t\t\t\tiy += dy1;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a three-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 1 ];\n* var sy = [ 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary3d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary3d( x, y, fcn ) {\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar ox1;\n\tvar ox2;\n\tvar oy1;\n\tvar oy2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tox2 = ox + ( j2*sx[2] );\n\t\toy2 = oy + ( j2*sy[2] );\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t// Compute loop offset increments...\n\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t}\n\t\t\t\t\tix += dx2;\n\t\t\t\t\tiy += dy2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a four-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary4d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary4d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tox3 = ox + ( j3*sx[3] );\n\t\toy3 = oy + ( j3*sy[3] );\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a five-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary5d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary5d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tox4 = ox + ( j4*sx[4] );\n\t\toy4 = oy + ( j4*sy[4] );\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) ); // eslint-disable-line max-len\n\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a six-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary6d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary6d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tox5 = ox + ( j5*sx[5] );\n\t\toy5 = oy + ( j5*sy[5] );\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a seven-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary7d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary7d( x, y, fcn ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tox6 = ox + ( j6*sx[6] );\n\t\toy6 = oy + ( j6*sy[6] );\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in an eight-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary8d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary8d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tox7 = ox + ( j7*sx[7] );\n\t\toy7 = oy + ( j7*sy[7] );\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a nine-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary9d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary9d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tox8 = ox + ( j8*sx[8] );\n\t\toy8 = oy + ( j8*sy[8] );\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\n\n\n// MAIN //\n\n/**\n* Applies a unary callback to elements in a ten-dimensional input ndarray and assigns results to elements in an equivalently shaped output ndarray via loop blocking.\n*\n* @private\n* @param {Object} x - object containing input ndarray meta data\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} x.accessors - data buffer accessors\n* @param {Object} y - object containing output ndarray meta data\n* @param {string} y.dtype - data type\n* @param {Collection} y.data - data buffer\n* @param {NonNegativeIntegerArray} y.shape - dimensions\n* @param {IntegerArray} y.strides - stride lengths\n* @param {NonNegativeInteger} y.offset - index offset\n* @param {string} y.order - specifies whether `y` is row-major (C-style) or column-major (Fortran-style)\n* @param {Array<Function>} y.accessors - data buffer accessors\n* @param {Callback} fcn - unary callback\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( z ) {\n*     return new Complex64( realf(z)*10.0, imagf(z)*10.0 );\n* }\n*\n* // Create data buffers:\n* var xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var ybuf = new Complex64Array( 4 );\n*\n* // Define the shape of the input and output arrays:\n* var shape = [ 1, 1, 1, 1, 1, 1, 1, 1, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n* var sy = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Define getters and setters:\n* function getter( buf, idx ) {\n*     return buf.get( idx );\n* }\n*\n* function setter( buf, idx, value ) {\n*     buf.set( value, idx );\n* }\n*\n* // Create the input and output ndarray-like objects:\n* var x = {\n*     'dtype': 'complex64',\n*     'data': xbuf,\n*     'shape': shape,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n* var y = {\n*     'dtype': 'complex64',\n*     'data': ybuf,\n*     'shape': shape,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': [ getter, setter ]\n* };\n*\n* // Apply the unary function:\n* blockedunary10d( x, y, scale );\n*\n* var v = y.data.get( 0 );\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 20.0\n*/\nfunction blockedunary10d( x, y, fcn ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar xbuf;\n\tvar ybuf;\n\tvar get;\n\tvar set;\n\tvar dx0;\n\tvar dx1;\n\tvar dx2;\n\tvar dx3;\n\tvar dx4;\n\tvar dx5;\n\tvar dx6;\n\tvar dx7;\n\tvar dx8;\n\tvar dx9;\n\tvar dy0;\n\tvar dy1;\n\tvar dy2;\n\tvar dy3;\n\tvar dy4;\n\tvar dy5;\n\tvar dy6;\n\tvar dy7;\n\tvar dy8;\n\tvar dy9;\n\tvar ox1;\n\tvar ox2;\n\tvar ox3;\n\tvar ox4;\n\tvar ox5;\n\tvar ox6;\n\tvar ox7;\n\tvar ox8;\n\tvar ox9;\n\tvar oy1;\n\tvar oy2;\n\tvar oy3;\n\tvar oy4;\n\tvar oy5;\n\tvar oy6;\n\tvar oy7;\n\tvar oy8;\n\tvar oy9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sx;\n\tvar sy;\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar o;\n\n\t// Note on variable naming convention: s#, dx#, dy#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( x.shape, x.strides, y.strides );\n\tsh = o.sh;\n\tsx = o.sx;\n\tsy = o.sy;\n\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Cache the indices of the first indexed elements in the respective ndarrays...\n\tox = x.offset;\n\toy = y.offset;\n\n\t// Cache references to the input and output ndarray buffers...\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdx0 = sx[0];\n\tdy0 = sy[0];\n\n\t// Cache accessors:\n\tget = x.accessors[0];\n\tset = y.accessors[1];\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tox9 = ox + ( j9*sx[9] );\n\t\toy9 = oy + ( j9*sy[9] );\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tdx9 = sx[9] - ( s8*sx[8] );\n\t\t\tdy9 = sy[9] - ( s8*sy[8] );\n\t\t\tox8 = ox9 + ( j8*sx[8] );\n\t\t\toy8 = oy9 + ( j8*sy[8] );\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tdx8 = sx[8] - ( s7*sx[7] );\n\t\t\t\tdy8 = sy[8] - ( s7*sy[7] );\n\t\t\t\tox7 = ox8 + ( j7*sx[7] );\n\t\t\t\toy7 = oy8 + ( j7*sy[7] );\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tdx7 = sx[7] - ( s6*sx[6] );\n\t\t\t\t\tdy7 = sy[7] - ( s6*sy[6] );\n\t\t\t\t\tox6 = ox7 + ( j6*sx[6] );\n\t\t\t\t\toy6 = oy7 + ( j6*sy[6] );\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdx6 = sx[6] - ( s5*sx[5] );\n\t\t\t\t\t\tdy6 = sy[6] - ( s5*sy[5] );\n\t\t\t\t\t\tox5 = ox6 + ( j5*sx[5] );\n\t\t\t\t\t\toy5 = oy6 + ( j5*sy[5] );\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdx5 = sx[5] - ( s4*sx[4] );\n\t\t\t\t\t\t\tdy5 = sy[5] - ( s4*sy[4] );\n\t\t\t\t\t\t\tox4 = ox5 + ( j4*sx[4] );\n\t\t\t\t\t\t\toy4 = oy5 + ( j4*sy[4] );\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx4 = sx[4] - ( s3*sx[3] );\n\t\t\t\t\t\t\t\tdy4 = sy[4] - ( s3*sy[3] );\n\t\t\t\t\t\t\t\tox3 = ox4 + ( j3*sx[3] );\n\t\t\t\t\t\t\t\toy3 = oy4 + ( j3*sy[3] );\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdx3 = sx[3] - ( s2*sx[2] );\n\t\t\t\t\t\t\t\t\tdy3 = sy[3] - ( s2*sy[2] );\n\t\t\t\t\t\t\t\t\tox2 = ox3 + ( j2*sx[2] );\n\t\t\t\t\t\t\t\t\toy2 = oy3 + ( j2*sy[2] );\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdx2 = sx[2] - ( s1*sx[1] );\n\t\t\t\t\t\t\t\t\t\tdy2 = sy[2] - ( s1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tox1 = ox2 + ( j1*sx[1] );\n\t\t\t\t\t\t\t\t\t\toy1 = oy2 + ( j1*sy[1] );\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets for the first input and output ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tix = ox1 + ( j0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tiy = oy1 + ( j0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Compute loop offset increments...\n\t\t\t\t\t\t\t\t\t\t\tdx1 = sx[1] - ( s0*sx[0] );\n\t\t\t\t\t\t\t\t\t\t\tdy1 = sy[1] - ( s0*sy[0] );\n\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iy, fcn( get( xbuf, ix ) ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tix += dx8;\n\t\t\t\t\t\t\t\t\t\t\t\t\tiy += dy8;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tix += dx9;\n\t\t\t\t\t\t\t\t\t\t\t\tiy += dy9;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloatingPointDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isRealFloatingPointDataType from '@stdlib/ndarray-base-assert-is-real-floating-point-data-type'; // eslint-disable-line id-length\nimport isComplexFloatingPointDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type'; // eslint-disable-line id-length\nimport isIntegerDataType from '@stdlib/ndarray-base-assert-is-integer-data-type';\nimport isSignedIntegerDataType from '@stdlib/ndarray-base-assert-is-signed-integer-data-type';\nimport isUnsignedIntegerDataType from '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type';\nimport isRealDataType from '@stdlib/ndarray-base-assert-is-real-data-type';\nimport isNumericDataType from '@stdlib/ndarray-base-assert-is-numeric-data-type';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport defaults from '@stdlib/ndarray-defaults';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar POLICY_TABLE = {\n\t'floating_point': [\n\t\tisFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.floating_point' )\n\t],\n\t'real_floating_point': [\n\t\tisRealFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.real_floating_point' )\n\t],\n\t'complex_floating_point': [\n\t\tisComplexFloatingPointDataType,\n\t\tdefaults.get( 'dtypes.complex_floating_point' )\n\t],\n\n\t'integer': [\n\t\tisIntegerDataType,\n\t\tdefaults.get( 'dtypes.integer' )\n\t],\n\t'signed_integer': [\n\t\tisSignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.signed_integer' )\n\t],\n\t'unsigned_integer': [\n\t\tisUnsignedIntegerDataType,\n\t\tdefaults.get( 'dtypes.unsigned_integer' )\n\t],\n\n\t'real': [\n\t\tisRealDataType,\n\t\tdefaults.get( 'dtypes.real' )\n\t],\n\n\t'numeric': [\n\t\tisNumericDataType,\n\t\tdefaults.get( 'dtypes.numeric' )\n\t]\n};\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\n\n\n// MAIN //\n\n/**\n* Resolves the output ndarray data type for a unary function.\n*\n* @param {string} dtype - input ndarray data type\n* @param {string} policy - output ndarray data type policy\n* @throws {TypeError} second argument must be a recognized data type policy\n* @throws {Error} unexpected error\n* @returns {string} output ndarray data type\n*\n* @example\n* var dt = resolve( 'float64', 'complex_floating_point' );\n* // returns <string>\n*/\nfunction resolve( dtype, policy ) {\n\tvar p;\n\tif ( policy === 'default' ) {\n\t\t// When the policy is \"default\", the output data type should always be the default data type without consideration for the input data type:\n\t\treturn DEFAULT_DTYPE;\n\t}\n\tif ( policy === 'same' || policy === 'promoted' ) { // note: for unary APIs, the \"promoted\" data type is the same as the input data type\n\t\treturn dtype;\n\t}\n\tif ( policy === 'bool' ) {\n\t\tthrow new Error( 'not implemented' ); // TODO: update once the `bool` dtype is supported\n\t}\n\tp = POLICY_TABLE[ policy ];\n\tif ( p === void 0 ) {\n\t\t// Check for an explicit data type...\n\t\tif ( isDataType( policy ) ) {\n\t\t\treturn policy;\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type policy. Value: `%s`.', policy ) );\n\t}\n\tif ( p[ 0 ]( dtype ) ) {\n\t\treturn dtype;\n\t}\n\treturn p[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport filledBy from '@stdlib/array-base-filled-by';\nimport everyBy from '@stdlib/array-base-every-by';\nimport join from '@stdlib/array-base-join';\nimport nullaryStrided from '@stdlib/strided-base-nullary';\nimport unary from '@stdlib/ndarray-base-unary';\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array';\nimport broadcastScalar from '@stdlib/ndarray-base-broadcast-scalar';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport numel from '@stdlib/ndarray-base-numel';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport getShape from '@stdlib/ndarray-shape';\nimport getDType from '@stdlib/ndarray-dtype';\nimport getOrder from '@stdlib/ndarray-order';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport format from '@stdlib/string-format';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Constructor for creating ndarrays filled with pseudorandom values drawn from a unary PRNG.\n*\n* @constructor\n* @param {Function} prng - unary pseudorandom value generator\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} [options] - function options\n* @param {string} [options.order] - default memory layout\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Random} instance\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction Random( prng, idtypes, odtypes, policies, options ) {\n\tvar opts;\n\tif ( !( this instanceof Random ) ) {\n\t\tif ( arguments.length < 5 ) {\n\t\t\treturn new Random( prng, idtypes, odtypes, policies );\n\t\t}\n\t\treturn new Random( prng, idtypes, odtypes, policies, options );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\topts = {\n\t\t'order': defaults.get( 'order' )\n\t};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t\tif ( !isOrder( opts.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', opts.order ) );\n\t\t\t}\n\t\t}\n\t}\n\tthis._prng = prng;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output\n\t};\n\tthis._opts = opts;\n\treturn this;\n}\n\n/**\n* Returns an ndarray filled with pseudorandom values drawn from a unary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - output shape\n* @param {(ndarrayLike|*)} param1 - PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output ndarray data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( shape, param1, options ) {\n\tvar prng;\n\tvar opts;\n\tvar buf;\n\tvar err;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\tvar out;\n\tvar set;\n\tvar dt;\n\tvar st;\n\tvar sh;\n\tvar p1;\n\n\tif ( !isNonNegativeIntegerArray( shape ) && !isEmptyCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Check whether we've been provided a scalar PRNG parameter...\n\tif ( isNumber( param1 ) ) {\n\t\tp1 = param1;\n\t\tdt = 'float64';\n\t\tFLG = true;\n\t} else if ( isComplexLike( param1 ) ) {\n\t\tp1 = param1;\n\t\tif ( p1.byteLength === 8 ) {\n\t\t\tdt = 'complex64';\n\t\t} else {\n\t\t\tdt = 'complex128';\n\t\t}\n\t\tFLG = true;\n\t} else if ( isndarrayLike( param1 ) ) {\n\t\tdt = getDType( param1 );\n\t\tsh = getShape( param1 );\n\n\t\t// Check whether the PRNG parameter is a zero-dimensional array...\n\t\tif ( sh.length === 0 ) {\n\t\t\tp1 = param1.get();\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\t// Broadcast the PRNG parameter to the desired shape:\n\t\t\tp1 = broadcast( param1, shape ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t\tFLG = false;\n\t\t}\n\t} else {\n\t\tp1 = param1;\n\t\tdt = 'generic';\n\t\tFLG = true;\n\t}\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes, '\", \"' ), dt ) );\n\t}\n\tprng = this._prng;\n\tdt = opts.dtype || unaryOutputDataType( dt, this._policies.output );\n\tif ( opts.order ) {\n\t\tord = opts.order;\n\t} else if ( FLG ) {\n\t\tord = this._opts.order;\n\t} else {\n\t\tord = getOrder( p1 );\n\t}\n\t// Handles special cases involving (1) zero-dimensional output ndarrays and (2) shapes having at least one dimension of size zero...\n\tlen = numel( shape );\n\tif ( len === 0 ) {\n\t\t// Check for a zero-dimensional shape...\n\t\tif ( shape.length === 0 ) {\n\t\t\t// If the output array is a zero-dimensional ndarray, we generate a single random variate...\n\t\t\tbuf = buffer( dt, 1 );\n\t\t\tif ( isAccessorArray( buf ) ) {\n\t\t\t\tset = accessorSetter( dt );\n\t\t\t} else {\n\t\t\t\tset = setter( dt );\n\t\t\t}\n\t\t\tset( buf, 0, prng( p1 ) );\n\t\t\tst = [ 0 ];\n\t\t} else {\n\t\t\t// If the output array has one or more dimensions of size zero, we avoid allocating any memory, and instead return an empty ndarray...\n\t\t\tbuf = buffer( dt, len );\n\t\t\tst = shape2strides( shape, ord );\n\t\t}\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// If provided a scalar PRNG parameter, we can simply fill a linear buffer with pseudorandom values (as all pseudorandom values are drawn from the same PRNG) and then wrap as an ndarray...\n\tif ( FLG ) {\n\t\tif ( dt === 'generic' ) {\n\t\t\tbuf = filledBy( len, wrapper );\n\t\t} else {\n\t\t\tbuf = buffer( dt, len );\n\t\t\tnullaryStrided( [ buf ], [ len ], [ 1 ], wrapper );\n\t\t}\n\t\tst = shape2strides( shape, ord );\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// We've been provided an ndarray, so we need to perform element-wise iteration...\n\n\t// Allocate a data buffer:\n\tbuf = buffer( dt, len );\n\n\t// Initialize the output array:\n\tst = shape2strides( shape, ord );\n\tout = new ndarray( dt, buf, shape, st, 0, ord, opts );\n\n\t// Fill the output array with pseudorandom values:\n\tunary( [ p1, out ], prng );\n\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom number generator function.\n\t*\n\t* @private\n\t* @returns {(number|ComplexLike)} pseudorandom number\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( p1 );\n\t}\n});\n\n/**\n* Fills an ndarray with pseudorandom values drawn from a unary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {(ndarrayLike|*)} param1 - PRNG parameter\n* @param {ndarrayLike} out - output ndarray\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, out ) {\n\tvar pdt;\n\tvar odt;\n\tvar p1;\n\tif ( !isndarrayLike( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', out ) );\n\t}\n\tif ( isReadOnly( out ) ) {\n\t\tthrow new Error( 'invalid argument. The output ndarray must be writable. Cannot write to a read-only ndarray.' );\n\t}\n\t// Check whether we've been provided a scalar PRNG parameter...\n\tif ( isNumber( param1 ) ) {\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tpdt = 'float64';\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t} else if ( isComplexLike( param1 ) ) {\n\t\tif ( param1.byteLength === 8 ) {\n\t\t\tpdt = 'complex64';\n\t\t} else {\n\t\t\tpdt = 'complex128';\n\t\t}\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t} else if ( isndarrayLike( param1 ) ) {\n\t\t// Broadcast the PRNG parameter to the desired shape:\n\t\tpdt = getDType( param1 );\n\t\tp1 = broadcast( param1, getShape( out ) ); // delegate to `broadcast` to ensure broadcast compatibility\n\t} else {\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tpdt = 'generic';\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t}\n\tif ( !contains( this._idtypes, pdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes, '\", \"' ), pdt ) );\n\t}\n\todt = getDType( out );\n\tif ( !contains( this._odtypes, odt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._odtypes, '\", \"' ), odt ) );\n\t}\n\t// Fill the output array with pseudorandom values:\n\tunary( [ p1, out ], this._prng );\n\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Random;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-write accessor.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Function} getter - get accessor\n* @param {Function} setter - set accessor\n*\n* @example\n* function getter() {\n*     return name + ' foo';\n* }\n*\n* function setter( v ) {\n*     name = v;\n* }\n*\n* var name = 'bar';\n* var obj = {};\n*\n* setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );\n*\n* var v = obj.foo;\n* // returns 'bar foo'\n*\n* obj.foo = 'beep';\n*\n* v = obj.foo;\n* // returns 'beep foo'\n*/\nfunction setNonEnumerableReadWriteAccessor( obj, prop, getter, setter ) { // eslint-disable-line id-length\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'get': getter,\n\t\t'set': setter\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadWriteAccessor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport isFunction from '@stdlib/assert-is-function';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport everyBy from '@stdlib/array-base-every-by';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport Random from '@stdlib/random-tools-unary';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} options - options\n* @param {string} options.order - default memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var v = rand( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction createFactory( prng, idtypes, odtypes, policies, options ) {\n\tvar OPTIONS;\n\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tOPTIONS = {};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tOPTIONS.order = options.order;\n\t\t\tif ( !isOrder( OPTIONS.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', OPTIONS.order ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a unary PRNG.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating ndarrays\n\t*/\n\tfunction factory() {\n\t\tvar random;\n\t\tvar base;\n\t\tvar opts;\n\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( !isPlainObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tbase = prng.factory( opts );\n\t\t} else {\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t}\n\t\trandom = new Random( base, idtypes, odtypes, policies, OPTIONS );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an ndarray filled with pseudorandom values drawn from a unary PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeIntegerArray} shape - output ndarray shape\n\t\t* @param {(ndarrayLike|*)} param1 - PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output data type\n\t\t* @param {string} [options.order] - memory layout (either row-major or column-major)\n\t\t* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n\t\t* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n\t\t* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n\t\t* @throws {TypeError} first argument must be a valid shape\n\t\t* @throws {TypeError} must provide valid PRNG parameters\n\t\t* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {ndarray} output array\n\t\t*/\n\t\tfunction rand( shape, param1, options ) {\n\t\t\tif ( arguments.length < 3 ) {\n\t\t\t\treturn random.generate( shape, param1 );\n\t\t\t}\n\t\t\treturn random.generate( shape, param1, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an ndarray with pseudorandom values drawn from a unary PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {(ndarrayLike|*)} param1 - PRNG parameter\n\t\t* @param {ndarrayLike} out - output ndarray\n\t\t* @throws {TypeError} second argument must be an ndarray\n\t\t* @throws {TypeError} must provide valid PRNG parameters\n\t\t* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n\t\t* @returns {ndarray} output ndarray\n\t\t*/\n\t\tfunction assign( param1, out ) {\n\t\t\treturn random.assign( param1, out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom value generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom value generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default createFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport Object from '@stdlib/object-ctor';\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified method name, either own or inherited.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified method name\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isMethodIn( beep, 'toString' );\n* // returns true\n*\n* bool = isMethodIn( beep, 'boop' );\n* // returns false\n*/\nfunction isMethodIn( value, property ) {\n\tif ( value === void 0 || value === null ) {\n\t\treturn false;\n\t}\n\tvalue = Object( value );\n\tif ( typeof property !== 'symbol' ) {\n\t\tproperty = String( property );\n\t}\n\treturn (\n\t\t( property in value ) &&\n\t\tisFunction( value[ property ] )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isMethodIn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Creates a function which always returns the same value.\n*\n* @param {*} [value] - value to always return\n* @returns {Function} constant function\n*\n* @example\n* var fcn = wrap( 3.14 );\n*\n* var v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*/\nfunction wrap( value ) {\n\treturn constantFunction;\n\n\t/**\n\t* Constant function.\n\t*\n\t* @private\n\t* @returns {*} constant value\n\t*/\n\tfunction constantFunction() {\n\t\treturn value;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {StringArray} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - array data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\t// Pass-through options...\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name binary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/tools/binary}\n*/\nimport binary from '@stdlib/random-tools-binary';\nsetReadOnly( ns, 'binary', binary );\n\n/**\n* @name unary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/tools/unary}\n*/\nimport unary from '@stdlib/random-tools-unary';\nsetReadOnly( ns, 'unary', unary );\n\n/**\n* @name unaryFactory\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/tools/unary-factory}\n*/\nimport unaryFactory from '@stdlib/random-tools-unary-factory';\nsetReadOnly( ns, 'unaryFactory', unaryFactory );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["main","Object","defineProperty","isNumber","value","zeros","n","i","out","zeroPad","str","width","right","negative","pad","length","startsWithMinus","substr","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","Error","toString","precision","padRight","sign","alternate","call","charAt","abs","Math","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","f","parseFloat","toExponential","toFixed","toPrecision","spaces","fromCharCode","isArray","Array","isnan","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","j","TypeError","padZeros","indexOf","arguments","maxWidth","substring","RE","parse","match","formatTokenize","content","prev","exec","slice","lastIndex","push","format","args","tokenize","interpolate","apply","objectProtoype","toStr","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","__proto__","get","set","defineProperty$1","setReadOnly","configurable","enumerable","writable","setNonEnumerableReadOnly","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","hasOwnProp","property","Sym","toStrTag","nativeClass","hasToStringTag","v","isOwn","tag","main$g","Number","test","isPrimitive","isObject","FLOAT64_PINF","POSITIVE_INFINITY","FLOAT64_NINF","NEGATIVE_INFINITY","floor","isInteger","x","PINF","NINF","isInt","valueOf","isNonNegativeInteger","MAX_ARRAY_LENGTH","arraylikefcn","predicate","len","MAX_LENGTH","isArrayLike","isPrimitiveArray","arrayfun","isObjectArray","isNonNegativeIntegerArray","isEmptyCollection","isBoolean","Bool","Boolean","self","window","global","globalThis","getGlobal","codegen","Function","GlobalThis","Self","Win","Global","setNonEnumerableReadOnlyAccessor","getter","bytesPerElement","dtype","BYTES_PER_ELEMENT","iterationOrder","strides","cnt","strides2order","column","ndims","row","s1","s2","isColumnMajorContiguous","order","contiguous","isRowMajorContiguous","minmaxViewBufferIndex","shape","offset","min","max","s","real","z","re","imag","im","isString","RE_CHARS","root","nodeList","document","childNodes","typedarray","Int8Array","reFunctionName","RE_FUNCTION_NAME","REGEXP","main$f","isObjectLike","isObjectLikeArray","isBuffer","_isBuffer","constructor","constructorName","name","ctor","ctorName","type","isFunction","typeOf","RegExp","isRegExp","search","newval","rescape","CTORS","int8","uint8","uint8c","int16","uint16","int32","uint32","float32","float64","generic","binary","complex64","complex128","hasUint8Array","Uint8Array","bool","arr","GlobalUint8Array","UINT8_MAX","hasUint8ArraySupport","Uint8Array$1","hasUint16Array","Uint16Array","GlobalUint16Array","UINT16_MAX","hasUint16ArraySupport","uint16view","Uint16Array$1","ctors","IS_LITTLE_ENDIAN","buffer","hasArrayBuffer","ArrayBuffer","isArrayBuffer","hasFloat64Array","Float64Array","GlobalFloat64Array","NaN","hasFloat64ArraySupport","Float64Array$1","view","buf","GlobalArrayBuffer","isView","byteLength","hasArrayBufferSupport","ArrayBuffer$1","hasDataView","DataView","GlobalDataView","getFloat64","setFloat64","byteOffset","hasDataViewSupport","DataView$1","BigInteger","BigInt","RE_SUFFIX","dtypes","kind","DTYPES","all","enumeration","int64","uint64","notype","userdefined_type","keys","isArguments","hasArgumentsClass","detect","isNan","isEnumerableProperty","propertyIsEnumerable","hasStringEnumBug","isEnum","UINT32_MAX","isArguments$1","noop","MAX_TYPED_ARRAY_LENGTH","isCollection","searchElement","fromIndex","isConstructorPrototype","w","hasAutomationEqualityBug","k","win","EXCLUDED_KEYS","check","main$8","HAS_BUILTIN","skipConstructor","skipPrototype","isFcn","p","HAS_ENUM_PROTO_BUG","HAS_NON_ENUM_PROPS_BUG","HAS_WINDOW","error","NON_ENUMERABLE","target","source","objectKeys","assign","orders","ORDERS","enumerated","DATA","LAYOUTS","modes","MODES","throw","clamp","wrap","normalize","LOW_MASK","TWO_32","BYTES","VIEW","float64ToInt64Bytes","stride","hi","lo","setUint32","bytes","ndarray","nbytes","ord","this","_byteLength","_bytesPerElement","_buffer","_dtype","_length","_ndims","_offset","_order","_shape","_strides","_accessors","_iterationOrder","isContiguous","_flags","ROW_MAJOR_CONTIGUOUS","COLUMN_MAJOR_CONTIGUOUS","READONLY","__meta_dataview__","isndarrayLike","data","Complex128","setReadOnlyAccessor","copyFlags","idx","ind","dt","iget","join","flgs","sh","st","sm","m","o","N","M","_mode","_submode","setInt8","setInt16","setBigInt64","setInt32","fround","hasFloat32Array","Float32Array","GlobalFloat32Array","hasFloat32ArraySupport","Float32Array$1","FLOAT32_VIEW","float64ToFloat32$1","Complex64","float64ToFloat32","isComplexLike","getProto","Obj","getPrototypeOf","proto","getProto$1","objectPrototype","isPlainObject","isPrototypeOf","key","ownProps","TYPE","isAccessorArray","GETTERS","default","ctor2dtypes","Int16Array","Int32Array","Uint32Array","Uint8ClampedArray","Complex64Array","Complex128Array","hasUint32Array","GlobalUint32Array","hasUint32ArraySupport","Uint32Array$1","hasInt32Array","GlobalInt32Array","INT32_MAX","hasInt32ArraySupport","Int32Array$1","hasInt16Array","GlobalInt16Array","INT16_MAX","hasInt16ArraySupport","Int16Array$1","hasUint8ClampedArray","GlobalUint8ClampedArray","hasUint8ClampedArraySupport","Uint8ClampedArray$1","hasInt8Array","GlobalInt8Array","INT8_MAX","hasInt8ArraySupport","Int8Array$1","isArrayLikeObject","isEven","isComplex64Array","isComplex128Array","hasIteratorSymbolSupport","iterator","IteratorSymbol","realf","imagf","reinterpret","fromIterator","it","next","done","HAS_ITERATOR_SYMBOL","isComplexArray","isComplexArrayConstructor","getComplex64","nargs","fromArray","RangeError","reinterpret64","reinterpret128","ITERATOR_SYMBOL","src","thisArg","clbk","tmp","flg","accessorGetter","fromIteratorMap","start","copyWithin","iter","entries","end","fcn","separator","sep","outbuf","reducer","initialValue","acc","sbuf","outlen","begin","index","getComplex128","NTYPES","ctor2dtype","contains","factory","isDataType","policies","POLICIES","same","promoted","signed_integer","unsigned_integer","integer","floating_point","real_floating_point","complex_floating_point","numeric","isOutputDataTypePolicy","getOwnPropertySymbols","propertySymbols","enumerableProperties","isEnumerable","hasObjectAssign","to","assign$4","copy","isReadOnly","isOrder","filledBy","SETTERS","setter","arraylike2object","accessorProtocol","accessors","accessorSetter","everyBy","method","hasMethod","every","internal","isUndefinedOrNull","indexed","stride2offset","nullary","arrays","offsets","sx","ix","xset","strided","numel","copyIndexed","shape2strides","columnmajor","rowmajor","ROW_MAJOR","strides2offset","COLUMN_MAJOR","ndarraylike2object","xbuf","getData","getShape","getDType","ref","getStrides","getOffset","getOrder","hasProp","anyIsEntryIn","zeroTo","complex","take","indices","filled","loopOrder","sy","sz","ox","oy","oz","y","avx","iy","jx","jy","vx","vy","ux","sort2ins","defaults","BLOCK_SIZE_IN_BYTES","BLOCK_SIZE_IN_ELEMENTS","binaryBlockSize","dtypeX","dtypeY","dtypeZ","nbx","nby","nbz","vind2bind","mode","MODE","BINARY","ybuf","zbuf","dx0","dy0","dz0","S0","iz","i0","isRowMajor","dx1","dy1","dz1","S1","i1","dx2","dy2","dz2","S2","i2","dx3","dy3","dz3","S3","i3","dx4","dy4","dz4","S4","i4","dx5","dy5","dz5","S5","i5","dx6","dy6","dz6","S6","i6","dx7","dy7","dz7","S7","i7","dx8","dy8","dz8","S8","i8","dx9","dy9","dz9","S9","i9","ACCESSOR_BINARY","xget","yget","zset","BLOCKED_BINARY","bsize","ox1","oy1","oz1","s0","j0","j1","blockSize","ox2","oy2","oz2","j2","ox3","oy3","oz3","s3","j3","ox4","oy4","oz4","s4","j4","ox5","oy5","oz5","s5","j5","ox6","oy6","oz6","s6","j6","ox7","oy7","oz7","s7","j7","ox8","oy8","oz8","s8","j8","ox9","oy9","oz9","s9","j9","BLOCKED_ACCESSOR_BINARY","MAX_DIMS","hasAccessors","xmmv","ymmv","zmmv","shx","shy","shz","iox","ioy","ioz","ns","d","ndarray2object","ordx","ordy","ordz","accessorbinarynd","binarynd","broadcastArray","dim","maybeBroadcastArray","broadcast","Buffer","b","GlobalBuffer","from","hasNodeBufferSupport","table","allocUnsafe$1","allocUnsafe","size","bufferCtors","broadcastScalar","isFloatingPointDataType","isRealFloatingPointDataType","isComplexFloatingPointDataType","isIntegerDataType","isSignedIntegerDataType","isUnsignedIntegerDataType","isRealDataType","isNumericDataType","isBooleanDataType","isIntegerIndexDataType","isBooleanIndexDataType","isMaskIndexDataType","hash","opts","val","allowDupes","duplicates","objectInverse","ENUM","resolve","t","str2enum","enum2str","promotionRules","dtype1","dtype2","ntypes","dt1","dt2","PROMOTION_RULES","generateFullTable","promoteDataTypes","boolean","casting","index_mode","DEFAULTS","HASH","DEFAULT_DTYPE","DEFAULT_INDEX_DTYPE","DEFAULT_SIGNED_INTEGER_DTYPE","DEFAULT_UNSIGNED_INTEGER_DTYPE","DEFAULT_REAL_FLOATING_POINT_DTYPE","POLICY_TABLE1","default_index","promotedPolicy","accumulation","POLICY_TABLE2","floating_point_and_generic","real_floating_point_and_generic","complex_floating_point_and_generic","integer_and_generic","signed_integer_and_generic","unsigned_integer_and_generic","real_and_generic","numeric_and_generic","boolean_and_generic","integer_index","integer_index_and_generic","boolean_index","boolean_index_and_generic","mask_index","mask_index_and_generic","xdtype","ydtype","policy","outputDataType","isIntegerArray","validate","create","Ctor","createObject$1","clampIndex","wrapIndex","mp1","normalizeIndex","isIndexMode","TABLE","parent","iset","INDEX_MODE","options","minmax","isBufferLengthCompatible","readonly","submode","superCtor","createObject","inherit","getIndex","ORDINALS","Random","prng","idtypes","odtypes","output","_prng","_idtypes","_odtypes","_policies","_opts","param1","param2","params","p1","p2","scalar","initialScan","count","isScalarCompatible","convertToScalars","resolveOrder","broadcastParameters","binaryOutputDataType","wrapper","nullaryStrided","pdt","odt","unaryBlockSize","UNARY","ACCESSOR_UNARY","BLOCKED_UNARY","BLOCKED_ACCESSOR_UNARY","unary","accessorunarynd","unarynd","POLICY_TABLE","setNonEnumerableReadWriteAccessor","createFactory","OPTIONS","random","rand","setReadWriteAccessor","constantFunction","PRNG","seed","seedLength","state","stateLength","generate","unaryOutputDataType","unaryFactory"],"mappings":"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AMwD,EACN7B,IAAM8B,CACN,CACD5F,IAAM+F,EACN5D,IAAM6D,EACNlC,IAAMmC,CACN,CASV,ECrRA,SAA0B5f,EAAG4b,EAAGpY,EAAGyS,GAClC,IAAI6K,EACAvG,EACA4C,EACAC,EACAC,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAzC,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAzC,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAc,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAnC,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAnC,EACAO,EACAI,EACAK,GACAK,GACAK,GACAK,GACAK,GACA5T,GACAyR,GACAve,GACAC,GACAif,GACAK,GACAK,GACAK,GACAK,GACAK,GACA5J,GACA6B,GACAC,GACAC,GACAC,GACAC,GACAhC,GACAmC,GACA2B,GACAC,GACAM,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAgB,GACAC,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACA1T,GA8BJ,IAxBAJ,IADAI,GAAIyL,GAAWtb,EAAEkD,MAAOlD,EAAEqC,QAASuZ,EAAEvZ,QAASmB,EAAEnB,UACzCoN,GACPiK,GAAK7J,GAAE6J,GACP6B,GAAK1L,GAAE0L,GACPC,GAAK3L,GAAE2L,GAGPsF,EAAQO,GAAWrhB,EAAEkC,MAAO0Z,EAAE1Z,MAAOsB,EAAEtB,OAGvCuZ,GAAKzb,EAAEmD,OACPuY,GAAKE,EAAEzY,OACPwY,GAAKnY,EAAEL,OAGPoX,EAAOva,EAAE+O,KACToO,EAAOvB,EAAE7M,KACTqO,EAAO5Z,EAAEuL,KAGTsO,EAAM3D,GAAG,GACT4D,EAAM/B,GAAG,GACTgC,EAAM/B,GAAG,GAGH+H,GAAK9T,GAAG,GAAI8T,GAAK,GAWtB,IAVKA,GAAKzC,GACTwC,GAAKC,GACLA,GAAK,IAELD,GAAKxC,EACLyC,IAAMzC,GAEPqC,EAAM1H,GA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AAGA,GAAKmD,GAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,GAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,GAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,GAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKzb,GAAIyb,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKrb,GAAIqb,KAAO,CAC7B,IAAMN,GAAK,EAAGA,GAAKwD,GAAIxD,KACtBkD,EAAMxD,EAAMK,GAAIxH,EAAKyK,EAAMnG,EAAMZ,IAAMgH,EAAMxD,EAAMrB,MACnDnC,IAAM0D,EACNvB,IAAMwB,EACNG,IAAMF,EAEP5D,IAAMiE,EACN9B,IAAM+B,EACNJ,IAAMK,CACN,CACDnE,IAAMsE,EACNnC,IAAMoC,EACNT,IAAMU,CACN,CACDxE,IAAM2E,EACNxC,IAAMyC,EACNd,IAAMe,CACN,CACD7E,IAAMgF,EACN7C,IAAM8C,EACNnB,IAAMoB,CACN,CACDlF,IAAMqF,EACNlD,IAAMmD,EACNxB,IAAMyB,CACN,CACDvF,IAAM0F,EACNvD,IAAMwD,EACN7B,IAAM8B,CACN,CACD5F,IAAM+F,EACN5D,IAAM6D,EACNlC,IAAMmC,CACN,CASV,EC7RA,SAA0B5f,EAAG4b,EAAGpY,EAAGyS,GAClC,IAAI6K,EACAvG,EACA4C,EACAC,EACAsD,EACAC,EACAC,EACAvD,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAzC,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAzC,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAc,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAnC,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAnC,GACAO,GACAI,GACAK,GACAK,GACAK,GACAK,GACAK,GACA5T,GACAyR,GACAve,GACAC,GACAif,GACAK,GACAK,GACAK,GACAK,GACAK,GACA5J,GACA6B,GACAC,GACAC,GAC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yb,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKrb,GAAIqb,KAAO,CAC7B,IAAMN,GAAK,EAAGA,GAAKwD,GAAIxD,KACtBkD,EAAMxD,EAAMK,GAAIxH,EAAKyK,EAAMnG,EAAMZ,IAAMgH,EAAMxD,EAAMrB,MACnDnC,IAAM0D,EACNvB,IAAMwB,EACNG,IAAMF,EAEP5D,IAAMiE,EACN9B,IAAM+B,EACNJ,IAAMK,CACN,CACDnE,IAAMsE,EACNnC,IAAMoC,EACNT,IAAMU,CACN,CACDxE,IAAM2E,EACNxC,IAAMyC,EACNd,IAAMe,CACN,CACD7E,IAAMgF,EACN7C,IAAM8C,EACNnB,IAAMoB,CACN,CACDlF,IAAMqF,EACNlD,IAAMmD,EACNxB,IAAMyB,CACN,CACDvF,IAAM0F,EACNvD,IAAMwD,EACN7B,IAAM8B,CACN,CACD5F,IAAM+F,EACN5D,IAAM6D,EACNlC,IAAMmC,CACN,CACDjG,IAAMoG,EACNjE,IAAMkE,EACNvC,IAAMwC,CACN,CAUX,EC1TA,SAA2BjgB,EAAG4b,EAAGpY,EAAGyS,GACnC,IAAI6K,EACAvG,EACA4C,EACAC,EACAsD,EACAC,EACAC,EACAvD,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACA9C,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACA9C,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAS,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAxC,EACAO,EACAI,EACAK,EACAK,GACAK,GACAK,GACAK,GACAK,GACAxC,GACAO,GACAI,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAjU,GACAyR,GACAve,GACAC,GACAif,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAjK,GACA6B,GACAC,GACAC,GACAC,GACAC,GACAhC,GACAmC,GACA2B,GACAC,GACAM,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACA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K,EAAGA,GAAKmD,EAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,EAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,EAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,EAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,EAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKmD,EAAInD,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKzb,EAAIyb,KAAO,CAC7B,IAAML,GAAK,EAAGA,GAAKrb,EAAIqb,KAAO,CAC7B,IAAMN,GAAK,EAAGA,GAAKwD,EAAIxD,KACtBP,EAAMrB,IAAO7F,EAAKsE,EAAMZ,KACxBA,IAAM0D,EACNvB,IAAMwB,EAEP3D,IAAMiE,EACN9B,IAAM+B,CACN,CACDlE,IAAMsE,EACNnC,IAAMoC,CACN,CACDvE,IAAM2E,EACNxC,IAAMyC,CACN,CACD5E,IAAMgF,EACN7C,IAAM8C,CACN,CACDjF,IAAMqF,EACNlD,IAAMmD,CACN,CACDtF,IAAM0F,EACNvD,IAAMwD,CACN,CACD3F,IAAM+F,EACN5D,IAAM6D,CACN,CACDhG,IAAMoG,EACNjE,IAAMkE,CACN,CAUX,EC/PA,SAA0BhgB,EAAG4b,EAAG3F,GAC/B,IAAI6K,EACAvG,EACA4C,EACAE,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACA9C,EACAO,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAU,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAxC,EACAO,EACAI,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,EACAhU,EACAyR,EACAve,EACAC,EACAif,EACAK,EACAK,EACAK,EACAK,EACAK,EACAK,GACAjK,GACA6B,GACAE,GACAC,GACA/B,GACAmC,GACA4B,GACAM,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAW,GACAC,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,GACAK,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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529]}